ＨＥＬＰファイル


# helpと#helpを同一視します(if USE_RPG_ML_FLAG is non-nil)
＃なおCase Insensitiveです。つまり# help ＝ # Help ＝…＝ # HELP
[] はオプショナルを意味しています

# help			コマンドのヘルプ
# objective		メーリング・リストの目的、約束事を読む
# guide			（非）メンバが案内を得る
# msg			管理者へメールを送る
# members		メンバのリストを得る
# actives		アクティブなメンバのリストを得る
# summary  [引数]	過去の記事一覧を得る（Summary全体を送る）
			引数: 特定の過去をしめすキーワード
			例： 
			summary		summary ファイル全体
			summary last:10 最近の１０個の記事のサマリー
			summary 100-200 記事100〜200 のサマリーだけをみる
# get  ID		過去の記事を得る（ひとつずつ plain text で送り返す）
# send ID		同上
# status 引数
# stat   引数		現在の設定について知らせる（まとめおくりとかOFFとか）
			デフォールト（# stat(us)）は自分自身の状態
# exit			コマンド終り（Signature あっても大丈夫）
# end			コマンド終り
# quit			コマンド終り

			まとめてｇｅｔ:-)（tar.gz でまとめてある）
# mget 正規表現 送り返されるメールの時間間隔（ｓｅｃ）
# mget 1-10,5みたいなsyntax 送り返されるメールの時間間隔（ｓｅｃ）

			例外的に ｍｈ的な # mget last:10 も使えます。
			last:\d+だけ:-)

   e.g. 
   # mget * 10		基本系だが、次のようなものでは	
   # mget 1-10 		これらのコマンドシンタックスでは自動的に	
   # mget 1-10,12,15-100	mget2に切替えてサーバが送り返します。
   # mget 1,2,10		

	［補足］
	さらにその後に、オプションとして
	unpack, ish, 数字（複数になった時に送り返す間隔）
	を指定できます

		オプションなしは tar+gzip で spool.tar.gz
	tgz	同上
	rfc934	RFC934 format 	PLAINTEXT
	ish	lha + ish 
	unpack	PLAINTEXT(UNIX FROM)
	uf	PLAINTEXT(UNIX FROM)
	gz	GZIP(UNIX FROM)
	rfc1153	RFC1153 format 	PLAINTEXT

   e.g.
   # mget 1-10 unpack	PLAINTEXT(UNIX FROM)
   # mget 1-10 uf	PLAINTEXT(UNIX FROM)
   # mget 1-10 gz	GZIP(UNIX FROM)
   # mget 1-10 mp	MIME/Multipart
   # mget 1-10 rfc934	RFC934 format
   # mget 1-10 rfc1153	RFC1153 format
   # mget 1-10 ish	lha + ish 


# skip	 		From:のアドレス をそこから投稿はできるが、配送
			はされないものと設定する
# noskip 		上の逆。配送するようにする。
# off	 		ＭＬを一時的に離脱する
# on	 		一時的離脱をやめてＭＬに再参加する
# bye	 		ＭＬをやめる
# unsubscribe 		ＭＬをやめる

特殊目的：

	まんがいち複数マッチをしてしまっても サーバは自動的にアドレス
	チェックの精度をあげてトライをするのでたぶん必要ないとおもます
	が↓

# addr aoi@chan.panic
			複数の配送先を持つ人はＯＦＦコマンド等で
			サーバの設定によっては複数マッチしてしまう
			e.g. aoi@chan.panic と aoi@hayakawa.chan.panic
			も両方マッチしてしまう時、
			今は aoi@chan.panic についてのコマンドを行ないたい時
			に使うと、このコマンド以降の他のコマンドを 
			aoi@chan.panic に対してのみ行なうようにする

まとめ送り希望の方へ：（基本的に Ｎ時間“おき”）
# matome 数字(0-23)	配送時間は実はmodulus（笑）if(0 == (24 % time))
			だから 17 なんてやっても一日一回と同じです(_o_)
			default は gzip した Unix From つきのファイルの固まり
# matome 数字(13-29)	上の特別の場合で、一日一回Ｎ時にまとめおくり
			１３〜３６の数字がこのケースに当てはまります
			午前５時に一回だけまとめおくり慕いときは、
			２４＋５＝２９ をおくりこんでください。午後５
			時は１７でいいんですが、午前中はこうしないと判
			別がつかないので…

# matome 数字オプション
# matome 数字u		とすれば plain(unpack)、つまりplain textををかえします
# matome 数字i 		とすれば lha + ish で

			オプションなしは GZIP(UNIX FROM) と同じ
			u	PLAINTEXT(UNIX FROM)
			uf	PLAINTEXT(UNIX FROM)
			i	lha + ish 
			ish	lha + ish 
			b	RFC934 format 	PLAINTEXT
			d	RFC1153 format 	PLAINTEXT
			mp	MIME/Muptilpart	PLAINTEXT

# matome 0		普通の配送へ戻す

   例：
   # matome 1		まとめ送り １時間に一回(gzipd)
   # matome 2		まとめ送り ２時間に一回(gzipd)
   # matome 2u		まとめ送り ２時間に一回(plain text)
   # matome 2mp		まとめ送り ２時間に一回 MIME/Multipart形式で
   # matome 17		まとめ送り 一日一回と同じ(gzipd)
			#この場合は１７時に来る
   # matome 29		まとめ送り 一日一回と同じ(gzipd)
			#この場合は午前５時に来る
			＃matome 5 は５時間“おき” という意味

			
その他：

# whois mail_address	whois command を遠隔で実行する
			ＩＰの人はサーバを使わずに自分でやってくださいね
			これは 本物の whois データベースへコネクトしま
			す。サーバはコネクトするだけです。
			% whois -h host キー
			というコマンドシンタックスをそのまま解釈します

未実装：

以下のコマンドはｈｍｌ１．６では実装されていましたが実際に使われないの
でこのコードはｆｍｌでは実装されていません。
＃それ用のｗｈｏｉｓサーバが受け持てばいいことで別にＭＬサーバがここま
でしなくてもよいでしょう。

# Iam			自己紹介を登録する
# who			自己紹介の一覧を得る

何かあったら（ｅ．ｇ．なんか変なメールが返ってきたり）したら

		Elena@phys.titech.ac.jp

までメールして下さい。
＃出来ればその時の症状、ヘッダー、ｓｙｓｌｏｇ付きがありがたいです。

＃もし、spool の他にアーカイブしている場所 old 等をもっていれば
＃書き加えておくのが良いでしょう↓
＃つまり、@StoredSpool_DIR = ('old'); を使っている時

注意：古い記事は１００通ずつ tar + gz した状態で保管されています。

この場合、
	# get 100 
はできませんが、
	# mget 100 
とすると、１〜１００までの１００通セットが送り返されます。
最近の記事はもちろん個々にとりよせられますが、十分古いアーカイブは
こういう挙動なので、御了承ください


−−−−−−−−−−−−−−−−−−−−−−−−
どうやって過去のメールを取り寄せるかを説明します。

取り寄せ方：
%を以下ｓｈｅｌｌのｐｒｏｍｐｔとします。

==========例==========
＃以下では mail と書きますが（昔は /usr/ucb/mailのことのつもりだった…）
＃Mail (SUN)か， mailx (SVR3/4)コマンドだとおもってください。
＃4.4BSD なら /usr/bin/Mail or /usr/bin/mail のことですね

１番めのメールが欲しい
	% echo "# get 1" | mail ＭＬのアドレス
	% echo "#get 1"  | mail ＭＬのアドレス

１００番めー２００番めのメールが欲しい
	% echo "# mget 100-200"    | mail ＭＬのアドレス

１００番めー２００番めのメールが欲しいが複数のメールになってお繰り返さ
れると気に３０秒に一通づつ送って欲しい
	% echo "# mget 100-200 30" | mail ＭＬのアドレス

１００番めー２００番めのメールをPLAIN TEXTで欲しい
	% echo "# mget 100-200 unpack"    | mail ＭＬのアドレス

１００番めー２００番めのメールをlha + ishで欲しい
	% echo "# mget 100-200 ish"    | mail ＭＬのアドレス

１００番めー２００番めのメールをPLAIN TEXTで欲しい（３０秒間隔で）
	% echo "# mget 100-200 30 unpack" | mail ＭＬのアドレス

？でマッチするファイル、つまり１〜９番めのメール
	% echo "# mget ?" | mail ＭＬのアドレス

＊でマッチするファイル、つまりＭＬのメール全部
	% echo "# mget *" | mail ＭＬのアドレス


==========説明==========
１．
X-Mail-Count：1のメール“だけ”を取り寄せたい

要注意！
『必ず本文の先頭が # で始まるコマンドを用いる』
＃もし間違えたコマンドを送るとこのファイルが送り返されます。

間違いのないよう、このように
% echo "# get 1" | mail ＭＬのアドレス

とすることをお勧めします。

もし１〜３のメールなら
% cat > foo
# get 1
# get 2
# get 3
^D
% cat foo
# get 1
# get 2
# get 3
% cat foo | mail ＭＬのアドレス
とすると
１、２、３ばらばらにメールが返ってきます。

問題はこうするとそれぞれについてｓｅｎｄｍａｉｌが起動します。
＃これくらいならどうでもいいんですがまちがえて１〜１００までこのやりか
たで取り寄せようとするとこちらのマシンの大変な負荷になります。
いくら『賢い（かわいい）ＮＥＷＳ』といえどこれは大変

そこで

２．
X-Mail-Count：1〜9を取り寄せたい
% echo "# mget ? 30" | mail ＭＬのアドレス

つまりｆｔｐのコマンドと（ほぼ）同じです。正規表現を用いて下さい。
今の場合？は任意の一文字だからスプールの中の？に対応する
１〜９までのファイルがマッチします。
＊なら全メールだし、？？なら１０〜９９までです。

そして第４番目はあってもなくてもよいのですが、メールは１０００行を目安
に切ってバラバラに送られるのでお繰り返されてくるメールとメールの時間間
隔を指定してください。ここでは３０なので３０秒間隔で送り返します。
＃主にこのパラメータはｕｕｃｐのポーリング時間あたり２、３通になるよう
に各ユーザがコマンドを指示したいようなケースで使うべきです。
＃ＩＰであなたのマシンが一辺にたくさんメールがきても受けとる自信がある
ならあまり関係ないです。

ちなみにデフォールトは５分です。

これらのファイルはｔａｒでまとめられｇｚｉｐされｕｕｅｎｃｏｄｅされて
送り返されます。

１０００行を越える場合は複数のメールに分けますので
自分でつなげて(^^;)たとえばｂａｒというファイルにしたとします。
＃uumerge.plなども便利ですね。

% uudecode bar
% ls 
spool.tar.Z
% zcat spool.tar.Z | tar xf - 
% ls 
spool.tar.Z spool
% ls -l
 rw-r--r-- .......................... spool.tar.Z
drwxr-xr-x .......................... spool

という具合にｓｐｏｏｌディレクトリというのが出来ます。
これの中に取り寄せたメールがしまわれています。
