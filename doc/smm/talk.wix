.C	ちょっとした事

.S	Perl5 の余談
in fml-support: 00645
.q
５もあんまよくしりませんが:-)、＃まちがってたらごめ〜ん

Perl ４も５も 偉大だとおもうけど、Perl は４でほとんど完成しちゃってる
から、５にしたからっていっても、あまり使う機能はないですね:-)
＃もちろん ｔｋとかＸをつかうとかは別として

ただ データ構造の改良はすごくて、４をみすてて ５にして

	$Evnelope{'Addr'}->@Rcpt 

とか しようかな?とかおもうことはありますが、
いまさら sendmail とX11の中間みたいなスタイルは かえないでしょうね

Perl 5 の Object Oriented は public or not しかないといってもいいかな？
それはいまの４でも同じですね
perl 5 は programmer を信頼してるといえませう。
データを あほなプログラマからまもる protection とかはないです:-)

♪そういう きみがすきさ〜 ＞Ｐｅｒｌ５

Object Oriented なんて ゲシュタルトとおなじで、ものすご〜く基本的な部
分以外は あんま うまく かけないですね〜

実際 BSD Kernel と X11 とかはよいお手本だし、X11のやりかたで充分賢
いととおもいますけどねぇ
.~q


.S	アドレス まとめ送りの間隔 … の Extension論

in fml-support: 00637
.q
現状（accives）：

	アドレス r=リレーさーば  s=なんでもいい(skip address) \
		 m=まとめ送り方式 

\w=\S+ って形ならどうとでもなるなる:-)＃ための NEW SYNTAX
＃ x=extension-string

まとめおくりとかの Mail transpot とかは あきらかに クライアント側で操
作できないから、設定できたほうがいいだろうし、
それに 毎日状況がかわるわけでもない。

ファイル Encoding 方式 とかは 今使ってる状況によってかわるとおもうです。
学校からとか、おうちからだからgzipでまとめて、てもとで展開とか…
だから その場で Encoding rule として 状況を TERMCAP 情報のようにつたえ
るほうがいいとおもうんですよ

それに、そういうのを サーバ側に設定しておくという “大型機“的発想 は 
うにっくす となじまないとおもうです。＃ようは 大型機が嫌いだと:-)

Subject: とかも クライアントの問題ですよね、本来。

[name] が好きな人も、嫌いな人も いるから、だからこそ カーネルのソース
でもいじれる ＢＳＤ環境 がすばらしいわけです。

そういう クライアントであるべきなわけです
ちょっとかんがえているけど（RFC かくくらいじゃ なきゃいけないのかな）
.~q


.S	サブジェクトに [Name:ID] を付ける…

in X-Mail-Count: 00623
.q

MH だったら 
	fmlのそーす/lib/Utilites/scan.format 
を ~/Mail にほうりこめば

161 -10/27 Takashi Yokoyam fml-su fml probrems <<はじめまして、横山＠リコ

とかになりますけど、それじゃ だめ？

解説：

そういうのが、主流なような雰囲気があるのかも知れませんが、
“このつけかたを嫌ってる人もいっぱいいることを忘れないでくださいませ”

それには論理的な理由があって、

１	Subject が短くなるから内容が推定しにくくなる。
	なんのためのSubject:フィールド？

２	[NAME:ID] という表示にUNIX ENVIRONMENTを変更するのは
	簡単だが、
	これをはずそうという努力は 死ぬほど大変（ほんとに大変なんだな、
	これが）
	＃なんとかしようとはおもってはいるのだが…

１＋	NAME はともかく scan の時の ID は何の意味がある？
	reply の時とかはそれとは別にあらためて使うのだから意味がない
	＃そのための X-フィールド

	Subject のほうがだいじ
.~q


.S	fml 1.6 で 1.5 を大きく変えてまでやりたかったこと

	call by reference
	object moduleの分離（ほとんどすべてできてる）
	.forward -> 
	Listserv ->  複数のインターフェイスの統合（ほとんどすべてできてる）
	fml-ctl	 ->
	fml(本体)-> 

	SMTPサーバーが動いてなくても、pop経由で無理矢理ＭＬを実行する（笑）
	（UNIX ではすでに実行できている）

	WINDOWS NT サポート


.S	h2ph でシステムパラメータは install するもんなんでは？…

h2ph はたぶん昔から、手動でやるものなんだと 
perl 5 では 実際には Backward Compatibility の意味あいでしょうが 
＃結構雑な変換だし

ただ use Socket; と require sys/socket.ph は何が違うかというと…本質的
には同じなんですが… これは ext/のなかでも 昔と違わない

ただ、実際に動かすと、

perl 4
	sys/socket.ph は socket.ph をeval してまわる。

perl 5
	XS インターフェイスを通じて、 sys/socket.h の内容をチェックし
	てその値を eval する。

	だから効率はいいのか悪いのかよくわからない。Dnamic Loader やら
	なにやらいろいろ使いまくるから。

ただこういう話の利点はちゃんと system parameter が使えるといういう点に
あるので効率を考えてそれを無視してはいけない。


.S	Reply-To:を設定された投稿メールの配送をする際のReply-To:の扱い

誤解のないように解説すると、
.q
Reply-to: を設定しているメールは 投稿者が意味あってすることだし たとえ
るなら 往復はがき の返り先を指定して相手に はがきをだすようなものです。
つまり ＭＬ以外へのフォローを期待していることを明示的に相手に知らせて
いる。
.~q

わけです。これはインターネットだろうが郵政省の葉書きだろうが同じです。
その点でコンセンサスはとれるとおもいます。だから、僕は書き換えません。

しかし ＭＬによってそういうポリシーをとるのは管理者次第です。
config.ph の最後に

	$Envelope{'fh:reply-to:'} = $MAIL_LIST; 

と書くと Reply-To: $MAIL_LIST に強制的に書き換えます。
より望ましいのはこのためのインターフェイス

	&DEFINE_FIELD_FORCED('reply-to', $MAIL_LIST);

を使うことです。


.S	メール本文をいじることと慣習法と倫理(私見)

常識的にはメールも郵政省の郵便も本質的に同じはずです、輸送形態が非常に
異なるのは事実ですが。あくまで個人的な意見ですが、なんらかの理由で普通
の配送時のメール本文になにか付けて配送したい時、つまりールの中を勝手に
いじって配送するとする場合、それは

   「人の郵便をかってに開けて、人の手紙に手を加えるようなもので、
     倫理的に許されるのか？」

という疑問があります。いってみれば、ヘッダ情報は封筒の表のようなもので
す。付加情報をつけたり、転送先を書いたり情報の削除・追加をします。でも
封筒の中身を開けて「この封筒の中身は13000番めの文通封書です、と本文に
付けたしてからまた封を閉じる」ことを郵便局の人間がやったら人々はその行
為を許すでしょうか?

ＭＬサーバがメール本文をいじるということは媒体が違うだけでそういう意味
と等価です。

ぼくは自分の管理下では絶対にしません。しかしフックやそういうことが原理
的に出来得る実装は提供できます。できるかどうかということと推奨している
かどうかは全く別問題ですから、こういった行為は必ず YOUR OWN RISK だと
覚悟して使って下さい。

しかしながら結局こういう悩ましいことを考えなくてはならないのは『"どう
しょうもないインターフェイス"を"お金をとって"提供している』通信サービ
スや、どうしょうもないプログラムを公然と売っている恥ずかしい企業がいっ
ぱいある所為でないかと思うのです。

またそれが間違っていると指摘できないユーザにも問題はあります。購買者は
どうしょうもないインターフェイスに文句をいうべきです。それが資本主義と
いうものでしょう。


.S	Special Character (libhsynchtml.pl)

特殊文字

ASCII(or ISO 8859)コードの中の4つのキャラクタは HTMLでは特別な意味を持つため、
そのままでは使用できない。 4つのキャラクタとは、<, >, & と " である。

< と > はタグを示すために使用され、 & は、以下のキャラクタやその他のキャラクタ
のための エスケープシーケンスとなっている。

    &lt;
      <

    &gt;
      > のエスケープシーケンス

    &amp;
      & のエスケープシーケンス

    &quot;
      " のエスケープシーケンス

エスケープシーケンスとは、各キャラクタを表示するために必要な文字列であり、 そ
れぞれ ; が必ず必要。

その他にも、8bitキャラクタをサポートするために以下のような エスケープシーケン
スが用意されている。

注意: この文書は日本語で書かれているため、以下の例では正しく表示されない可能性
がある。

    &ouml;
      小文字の o にウムラルトのエスケープシーケンス

    &ntilde;
      小文字の n にチルダのエスケープシーケンス

    &Egrave;
      大文字の E にグレーブ・アクセントのエスケープシーケンス

このようなエスケープシーケンスに関してはCERN からリストが提供されてい
るのでそちらを参照していただきたい。


.# $Id$
.# Copyright (C) 1993-1996 fukachan@phys.titech.ac.jp
.# Copyright (C) 1996-1997 fukachan@sapporo.iij.ad.jp
.# fml is free software distributed under the terms of the GNU General
.# Public License. see the file COPYING for more details.
