.C	ちょっとした事

fml-support: 00645

.S	Perl5 の余談

５もあんまよくしりませんが:-)、＃まちがってたらごめ〜ん

Perl ４も５も 偉大だとおもうけど、Perl は４でほとんど完成しちゃってる
から、５にしたからっていっても、あまり使う機能はないですね:-)
＃もちろん ｔｋとかＸをつかうとかは別として

ただ データ構造の改良はすごくて、４をみすてて ５にして

	$Evnelope{'Addr'}->@Rcpt 

とか しようかな?とかおもうことはありますが、
いまさら sendmail とX11の中間みたいなスタイルは かえないでしょうね

Perl 5 の Object Oriented は public or not しかないといってもいいかな？
それはいまの４でも同じですね
perl 5 は programmer を信頼してるといえませう。
データを あほなプログラマからまもる protection とかはないです:-)

♪そういう きみがすきさ〜 ＞Ｐｅｒｌ５

Object Oriented なんて ゲシュタルトとおなじで、ものすご〜く基本的な部
分以外は あんま うまく かけないですね〜

実際 BSD Kernel と X11 とかはよいお手本だし、X11のやりかたで充分賢
いととおもいますけどねぇ


.S	アドレス まとめ送りの間隔 … の Extension論

fml-support: 00637

現状（accives）：

	アドレス r=リレーさーば  s=なんでもいい(skip address) \
		 m=まとめ送り方式 

\w=\S+ って形ならどうとでもなるなる:-)＃ための NEW SYNTAX
＃ x=extension-string

まとめおくりとかの Mail transpot とかは あきらかに クライアント側で操
作できないから、設定できたほうがいいだろうし、
それに 毎日状況がかわるわけでもない。

ファイル Encoding 方式 とかは 今使ってる状況によってかわるとおもうです。
学校からとか、おうちからだからgzipでまとめて、てもとで展開とか…
だから その場で Encoding rule として 状況を TERMCAP 情報のようにつたえ
るほうがいいとおもうんですよ

それに、そういうのを サーバ側に設定しておくという “大型機“的発想 は 
うにっくす となじまないとおもうです。＃ようは 大型機が嫌いだと:-)

Subject: とかも クライアントの問題ですよね、本来。

[name] が好きな人も、嫌いな人も いるから、だからこそ カーネルのソース
でもいじれる ＢＳＤ環境 がすばらしいわけです。

そういう クライアントであるべきなわけです
ちょっとかんがえているけど（RFC かくくらいじゃ なきゃいけないのかな）


.S	サブジェクトに [Name:ID] を付ける…

X-Mail-Count: 00623

MH だったら 
	fmlのそーす/lib/Utilites/scan.format 
を ~/Mail にほうりこめば

161 -10/27 Takashi Yokoyam fml-su fml probrems <<はじめまして、横山＠リコ

とかになりますけど、それじゃ だめ？

解説：

そういうのが、主流なような雰囲気があるのかも知れませんが、
“このつけかたを嫌ってる人もいっぱいいることを忘れないでくださいませ”

それには論理的な理由があって、

１	Subject が短くなるから内容が推定しにくくなる。
	なんのためのSubject:フィールド？

２	[NAME:ID] という表示にUNIX ENVIRONMENTを変更するのは
	簡単だが、
	これをはずそうという努力は 死ぬほど大変（ほんとに大変なんだな、
	これが）
	＃なんとかしようとはおもってはいるのだが…

１＋	NAME はともかく scan の時の ID は何の意味がある？
	reply の時とかはそれとは別にあらためて使うのだから意味がない
	＃そのための X-フィールド

	Subject のほうがだいじ



.S	１．６のメインテーマは 大別して

	call by reference
	object moduleの分離（ほとんどすべてできてる）
	.forward -> 
	Listserv ->  複数のインターフェイスの統合（ほとんどすべてできてる）
	fml-ctl	 ->
	fml(本体)-> 

	SMTPサーバーが動いてなくても、pop経由で無理矢理ＭＬを実行する（笑）
	（UNIX ではすでに実行できている）

	WINDOWS NT サポート

かな。
＃ほんとは１．７なんだよぉ〜



.S	h2ph でシステムパラメータは install するもんなんでは？…

h2ph はたぶん昔から、手動でやるものなんだと 
５では 実際には Backward Compatibility の意味あいでしょうが 
＃結構雑な変換だし

ただ use Socket; と require sys/socket.ph は何が違うかというと…本質的
には同じなんですが… これは ext/のなかでも 昔と違わない

ただ、実際に動かすと、

４
	sys/socket.ph は socket.ph をeval してまわる。
５
	XS インターフェイスを通じて、 sys/socket.h の内容をチェックし
	て、	その値を  eval する。

	だから効率はちょっといいのかな〜。もっとも Dnamic Loader やら
	なにやらいろいろ使いまくるから、よくわからないけど


.S	Reply-To: を設定された投稿メールの配送をするときの Reply-To: の扱い

誤解のないように解説すると、
『
	Reply-to: を設定しているメールは  
  投稿者が意味あってすることだし たとえるなら 
  往復はがき の返り先を指定して相手に はがきをだすようなものです。
  つまり ＭＬ以外へのフォローを期待していることを明示的に相手に知らせ
  ている。
』
わけです。これは インターネットだろうが、郵政省のはがきだろうが コンセ
ンサスはとれるとおもいます。だから、書き換えません

ですが、
ＭＬによってそういうポリシーをとるのは勝手なので、その方法ですが:-)

コマンドライン（つまり :include:/somewhere/driver みたいなファイルの中）で

fml.pl --force:reply-to=mailing-list-name 

のようにすると強制的に Reply-To: を mailing-list-name

config.ph で

$Envelope{'fh:reply-to:'}  = $MAIL_LIST; 

同じことですが、フックで

$SMTP_OPEN_HOOK = q#
	$Envelope{'h:reply-to:'}  = $Reply_to = $MAIL_LIST; 
#;


.S	Special Character (libhsynchtml.pl)

特殊文字

ASCII(or ISO 8859)コードの中の4つのキャラクタは HTMLでは特別な意味を持つため、
そのままでは使用できない。 4つのキャラクタとは、<, >, & と " である。

< と > はタグを示すために使用され、 & は、以下のキャラクタやその他のキャラクタ
のための エスケープシーケンスとなっている。

    &lt;
      <

    &gt;
      > のエスケープシーケンス

    &amp;
      & のエスケープシーケンス

    &quot;
      " のエスケープシーケンス

エスケープシーケンスとは、各キャラクタを表示するために必要な文字列であり、 そ
れぞれ ; が必ず必要。

その他にも、8bitキャラクタをサポートするために以下のような エスケープシーケン
スが用意されている。

注意: この文書は日本語で書かれているため、以下の例では正しく表示されない可能性
がある。

    &ouml;
      小文字の o にウムラルトのエスケープシーケンス

    &ntilde;
      小文字の n にチルダのエスケープシーケンス

    &Egrave;
      大文字の E にグレーブ・アクセントのエスケープシーケンス

このようなエスケープシーケンスに関しては、CERNから リスト が提供されているので
そちらを参照していただきたい。


.# $Id$
.# Copyright (C) 1993-1996 fukachan@phys.titech.ac.jp
.# Copyright (C) 1996-1997 fukachan@sapporo.iij.ad.jp
.# fml is free software distributed under the terms of the GNU General
.# Public License. see the file COPYING for more details.
