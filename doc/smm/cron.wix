.S	cron (fml original bin/cron.pl)
.l	cron
.key	cron.pl
.k	bin/cron.pl
.key	etc/crontab
.key	samples/crontab

SYNOPSYS
	cron.pl [-a] [-d] [-b43] [-fcrontab] [-bd] $DIR [$LIBDIR]

    -d                debug mode 
    -a                run eternally(default: 180sec. = 60sec. * 3times) 
    -n                working all times without RESTART
    -mtimes           run from now to (60 * times) sec. after 
    -fcrontab-file    alternative crontab 
    -h                show this help and exit 
    -bd		      daemon (Become Daemon) 
    -bOSTYPE          -b43(OSTYPE = 43): 4.3BSD Like. not mailed to you 


fml.pl が cron.pl を走らせ、そのまま system の cron と同じ働きをします。
つまり１分に一回おきて crontab をみて、実行する。
＃単にシステムのcronじゃないだけですね…うじゃ

本来一台あたり一個のcronで十分です。

ちなみに、複数のcron.plは走りませんが、一つの”ＭＬ”につき一つ走りま
す。というのは $CRON_PIDFILE ($DIR/var/run/cron.pid)というファイルにプ
ロセス番号を保存し一意性を保証するわけですが、ＭＬごとに corn を起動す
るとこのファイルを各ＭＬごとに作れてしまうからです。

あと長く走り過ぎておかしくなる場合も考慮してデフォールトでは２４時間く
らいで次のcron.plを起動しなおしますが、-n オプションをつけるとずっと走
り続けます。


.S	オプションの捕捉

-b43 オプションは 
.k	-b43

	$CRON_NOTIFY    = 0; (デフォールトは 1)
.k	$CRON_NOTIFY

ということをします。デフォールトでは cron が何らかの処理をした場合はそ
のログをそのユーザに知らせます。

また、デフォールトでは cron.pl はデーモン化しません。

	-onotty
.k	-onotty

オプションをつけると自分でデーモン化します。
うまくいかないＯＳがありうることを考慮してデフォールトでは

	$NOT_USE_TIOCNOTTY = 1;		# no ioctl
.k	$NOT_USE_TIOCNOTTY

つまりデーモンにならないようになっています。


.S	Vixie Cron
.k	P.Vixie
.k	bind

4.4BSDにはPaul Vixie(現在、bindのMaintainerでもある)の書いた各ユーザご
とにcronを定義できるcronが入っています。これがあるなら cron.pl は要ら
ないでしょう。システムのマニュアルを見て下さい。

cron.pl はあくまでもそういうcronを提供してくれていないOSでなんとかまと
め送りをしたい場合のためのものです。


.S	cron.plのインストール

システムが定期的に何かをしてくれないので、cron.pl をなんとかして(疑似
定期的に)起動したいわけです。

まず起動自体は

	% cron.pl $DIR(config.phの場所) $LIBDIR(libsmtp.plとかの場所) 

の形で起動します。
＃注意： Argument がないと、その環境の $HOME にいってしまう

問題はどうやって定期的に起動をトライするかですが、例えば

   1. たとえば ~/.login で cron.pl を起動するとか(すでに走っていれば走
      らないから大丈夫)…

   2. loginしたとき、まめにたちあげるとか…

   3. MLサーバにメールが来たときに起動させる↓とか…

が考えられます。設定としては


config.ph の
.key	$CRON_PIDFILE
.key	$CRONTAB
.key	$DISTRIBUTE_CLOSE_HOOK

	$CRON_PIDFILE = "$DIR/var/run/cron.pid";
	$CRONTAB      = "$DIR/etc/crontab";
	＃ directory がなかったらつくってくださいませ

	$FML_EXIT_PROG = "$LIBDIR/bin/cron.pl $DIR $LIBDIR -a";

	をつけたす。
	＃いずれも適当にパスとかは変えてください

cron.pid は cron.pl の pid を記録するファイル（ /var/run/cron.pidに相
当するもの）。

crontab は システムの /etc/crontab に相当するものです。
＊＊＊注意＊＊＊
cron.pl は 4.4 BSD FORMAT を理解します。4.3ではありません

fml のインストール時に make しているなら、samples/crontab があるはずです。
これを $DIR/etc/crontab にコピーするなり参考にすれば良いでしょう。



.S	cron.pl を使う際の注意
.label	{Matomeokuri-not-cron_2fix}
.key	Matomeokuri-not-cron_2fix
.key	attention-4-cron.pl


上述のように cron.pl を sendmail が exec して実行するというのはcrontab 
をユーザー毎に設定できないOSへの対応です。できるなら、 user ごとに 
crontab を設定できるほうがいいとおもうんですが世の中そういうOSばっかり
じゃないわけで

例えば、24時間でおきかえるっていうのも 安全策なだけで、別に1週間走
らせてもOKです(-n option)。

だから、別に無理に sendmail にcron.pl を走らせさせなくても、ML管理者
が login したときだけ cron.pl をいれかえる(実行すれば勝手に入れ替わる)
のでもいいはずです。

たまに、 sendmail とうまくおりあえないこともあるみたいなので、そういう
時はこうすれば、 sendmail の変な挙動に悩まされずにすみますよね?


.S	cron.plのrestart

cron.pl がおちるかもしれない？ という可能性があります。

システムの cron は /etc/rc が実行するので、いいんですが…もしマシンが
おちたら、それにきづくまで、まとめおくり実行されません

そのため、fml.pl が cron.pl をたちあげなおす という必要があります。
ここは、別に手動でやってもかまわないわけですが、まぁどっちでもいいと。

それが、HOOK でやってることです。


.# $Id$
.# Copyright (C) 1993-1996 fukachan@phys.titech.ac.jp
.# Copyright (C) 1996-1997 fukachan@sapporo.iij.ad.jp
.# fml is free software distributed under the terms of the GNU General
.# Public License. see the file COPYING for more details.
