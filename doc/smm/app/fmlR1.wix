.C	fml 1.x smm/op より再収録…
.l	appendix:fmlR1

.S	fml 1.x サーバの中身は？
.label	{fml-mechanism}

ようは Sendmail からパイプで渡されたメールをヘッダと本文にわけて（ヘッ
ダの解析もして）、メンバーへ配送かコマンドを実行するってだけです

さらっと、fml.plのmain partを説明しましょう。

↓
	引数からINCLUDE PATHを設定する(config.ph libaries...)
	基本ライブラリのインクルード(e.g. SMTP)

		&ChkREUid;
	setuid のチェック、もしだめだと警告を出す
	＃おそらく、その場合はその後のどこかで止まるでしょうが

↓	ファイルや日付等のチェック

		&InitConfig
.key		&InitConfig

	最初の空行を境にヘッダー、本体を分ける。
	コマンドモードか否かを最初の3行が#ではじまっているかどうかで
	判断（コマンド専用のアドレスも作る方が建設的かと…）。

	見知らぬ人からのガイド要求チェック

		&Parsing
.key		&Parsing

	From:とかSubject:の中身を切り出す。

		&GetFieldsFromHeader
.key		&GetFieldsFromHeader

	ロックをして他のプロセスは待たせる（コマンド、配送問わず）。

		(!$USE_FLOCK) ? &Lock : &Flock
.key		$USE_FLOCK
.key		Lock
.key		FLock

	もし、特別なことがしたければｈｏｏｋをしかけておく
	＃ＭＬ依存のことです。デフォールトは何もしない

		$START_HOOK && &eval($START_HOOK, 'Start hook'); 
.key		$START_HOOK

	＃＃＃ いよいよ、メインパート↓ ＃＃＃

	もし見知らぬ人からのガイド要求だったら？
	＃See INSTALL, README, config.ph

		if($GUIDE_REQUEST) { 
.key		$GUIDE_REQUEST

	ガイドを送ってあげる

		&GuideRequest
.key		&GuideRequest

	そうでないならＭＬサーバとして動くので、
	メンバーチェックを実行

		} elsif(&MLMemberCheck) { 
.key	&MLMemberCheck

	メンバーチェック もしくは チェックして自動登録なら登録
	＃その区別は この sub MLMemberCheck 内で場合わけしている

	メンバーチェックを通過したら、
	普通にＭＬへ来たメールなのか？
		or 
	コマンド実行する要求なのか？の最終判断をする。

		&AdditionalCommandModeCheck
.key		&AdditionalCommandModeCheck

	配送以外のなんらかのコマンド要求（LOAD_LIBRARYが空でない）だっ
	たら

		if($LOAD_LIBRARY) {
.key		$LOAD_LIBRARY

	$LOAD_LIBRARY(e.g. libfml.pl)を読み込んでコマンドを実行
	＃デフォールトでは require 'libfml.pl'; と同じ

			require $LOAD_LIBRARY;

	もし、コマンドなら $LOAD_LIBRARY ＝ libfml.pl つまりコマンドを
	実行する。config.ph等で $LOAD_LIBRARY を設定しておけば常にその
	ライブラリ（$LOAD_LIBRARY）をよび、○○専用、例えばftpmail専用
	サーバ等に設定できる（ために汎用化した（1.3.2））。

	コマンドでもなければ配送（ＭＬ本来の挙動）を実行

		} else {
			&Distribute;
.key			&Distribute

	ロックを外しておしまい（通常はここで終り）

		(!$USE_FLOCK) ? &Unlock : &Funlock;# UnLocking 

	■以下は必要に応じて■
	なにかユーザーへ伝えることが起きていたらメールを送る
	例：エラー等の通知。
	&Notify if $_cf{'return'};	# Reply some report if-needed.
.key	&Notify
.key	$_cf{'return'}

	この時点で本体とは直接関係ない残り仕事を”必要”なら実行
	e.g. コマンドのmget とか まとめおくりver.5 をここで実行
	
		&RunHooks;	＃Ｌｉｓｐかいな:-)
.key		&RunHooks

		exit 0

	
.S	認証プロセス
.key	認証プロセス

せいぜい数百人（←数字100に根拠はありません。ふつうはそんなにいかないも
の〜ってくらい）程度とおもって線形にファイルを探索します

メンバー数万のオーダーとかいわない限り関係ないとおもうんですが…
＃律速段階はやっぱりsendmailでしょう(sub Distribute)

でも、普通 user@foo.bar.uja の user の exact match でreturn しちゃうか
ら、その後の複雑なマッチング処理はあんまり気にしなくてもよいでしょう
（期待値としての振舞いは）



.# ##########################################################
.S	config.phの項目一覧
.key	config.ph
.label	app:config

あくまで Advanced なので慣れてない人はデフォールトでもいっこう
に構いませんし、この章は読み飛ばしていっこうに差し支えありません。
#Mariel
1.3.1.10 前後からは config.ph は項目ごとに並びかえられています。

Advanced の中で今の御時世で特別注意を払うべきなものはこの辺でしょうか
＃大事な項目は コマンドラインオプションで簡単にカスタマイズできます。
＃次の章の一覧も御覧下さい

デバッグモード			.seealso debug-mode
$debug		= 1;            

自動登録			.seealso auto-regist
$ML_MEMBER_CHECK = 0;

ＭＩＭＥ			.seealso MIME-1, MIME-2
$USE_LIBMIME	= 1;
$LIBMIMEDIR	= "$DIR/contrib/MIME";

ＮＩＦＴＹ対策			.seealso against-nifty
$AGAINST_NIFTY = 1;		もう必要ないらしい

ロックのしかた
$USE_FLOCK	= 1;		

誤動作コマンドチェック		.seealso command-plural2
$COMMAND_CHECK_LIMIT = 3;

＃簡易config.ph として config.ph-fundamental というのにもっとも基本的
＃なカスタムだけ抜き出したファイルがあります。
＃ここにでてくる変数だけをみるほうがわかりやすいかもしれません
＃つかうなら config.ph-fundamental -> config.ph にしてください


.S	config.ph 設定一覧（Advanced Setting）


■デバッグモード
$debug		= 1;            

■メンバーチェックと自動登録
$ML_MEMBER_CHECK = 1;		# メンバーチェックするか否か？

・メールの中身を問わずに自動登録する時
$DEFAULT_SUBSCRIBE = "subscribe";
				# ただメールをだせば自動登録の時に
				# 登録アドレスを最初から代えたいなら
				# subscribe Email-address としてもらう。

・共通
$AUTO_REGISTERD_UNDELIVER_P = 1;# 自動登録の時、登録願いメールをＭＬへ
				# フォワードするか否か？

$AUTO_REGISTRATION_LINES_LIMIT = 0;# この行数以下のメール、例えば
				# ただ”subscribe”一行のメールはＭＬ
				# へは流さない
				#（上のUNDELIVER_Pの設定に拘らず）
				#今は 0 の場合デフォールト 8と設定される


・自動登録する時にキーワードを必要とする時

$REQUIRE_SUBSCRIBE = "subscribe";# 自動登録でsubjectに "subscribe" が必要
$REQUIRE_SUBSCRIBE_IN_BODY = 1;	# 自動登録で本文に    "subscribe" が必要


■ヘッダの形

$SUPERFLUOUS_HEADERS = 1;	# ヘッダのadditionalなものをそのまま保存
				# 例えば X-うじゃ の類。
				# デフォールトは切捨て

$USE_LIBMIME	= 1;		# MIME decodingを行なう
$LIBMIMEDIR	= "$DIR/contrib/MIME";
				# MIME decodeをするためのライブラリ

$STRIP_BRACKETS = 0;		# サブジェクト の [Elena:ID] 形を抜く
$SUBJECT_HML_FORM = 1;		# Subject: [Elena:ID] の形
$BRACKET	= 'Elena';	# Subject: [$BRACKET:$ID] ...
				#           ^^^^^^^^キーワード

$AGAINST_NIFTY = 1;		# ＮＩＦＴＹ対策にobsoleteなErrors-to
				# をつける;_;

■ Ｓｅｎｄｍａｉｌとのおつきあい

$HOST		= 'localhost';	# どのマシンのSendmailを使う？

■ＯＳ、その他

$USE_FLOCK	= 1;		# ロックアルゴリズムの選択

$COMMAND_SYNTAX_EXTENSION = 1;	# "#member"形と"# member"形は同じ意味

$COMMAND_CHECK_LIMIT = 3;	# 最初の３行は間違いコマンド探しの対象
				# としてチェックされます。

$USE_WHOIS = 0;			# Whois libraryを使うか？
$DEFAULT_WHOIS_SERVER = "localhost";	# Default whois server

$USE_RFC934 = 0;		# まとめおくりで９３４フォーマット

@ARCHIVE_DIR = ('old');		# gzipした記事群のアーカイブのおき場所


.S	その他の SyncHtml 用の変数一覧 (NOT CHECKED in fml 2.x)
.k	SyncHtml用の変数
.key	libsynchtml.pl
.key	$HTML_EXPIRE
.key	@HTML_FIELD
.key	$DEFAULT_HTML_FIELD
.key	$HTML_INDEX_TITLE


@HTML_FIELD

	分野ごとに index.html を作るときの分野指定
	メールの keyword: もしくは field: 指定で
	メールを分野ごとに分類する。

	@HTML_FIELD のために 毎回 index.html を作り直すので
	Overhead がかかる


$DEFAULT_HTML_FIELD

	分野ごとに index.html を作るときの デフォールト
	デフォールトがないと misc がデフォールト（へんな日本語:-)）

$HTML_INDEX_TITLE
	index.html のタイトル。もし指定しないときは "Spool $ML_FN"

例：
	$HTTP_DIR = 'tmp/http';
	$HTML_EXPIRE = 14;
	@HTML_FIELD = ('misc', 'uja');
	# $DEFAULT_HTML_FIELD = "Elena";

	$HTML_INDEX_TITLE = "Fj.Sci.Physics FAQ Project";

.# $Id$
.# Copyright (C) 1993-1997 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1997 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
