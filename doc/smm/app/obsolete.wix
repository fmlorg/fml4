.C	Obsolete things
.if LANG == ENGLISH
*** NOT TRANSLATE SINCE THIS CHAPTER IS ADDITIONAL AND OBSOLETE ***
.return
.fi

.S	複数のＭＬがあるけど、コマンドの処理は一つのアドレスで一括してやりたい
.key	コマンド専用アドレスその２
.comment beth2

今 master.fml というそのためのアドレスを作ったとします。 

解説０：
ｆｍｌ は メンバーへの配送サーバ ＋ そのサーバの抱えているスプール等へ
	のコマンドを制御する

解説：で、今の場合（ｍａｓｔｅｒ．ｆｍｌ）は ｆｔｐ、 WWW 等へのアクセ
スの中継と、（おまけで）ｆｍｌ（ＭＬサーバ）群への中継をおこなう

例：	だから シンタックスは次のようになります。
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿

普通のＭＬ宛のメール	→	sakisan@phys...(e.g. サキさん)

サキさんの 記事１をとりよせる。

"# get 1"		→	sakisan@phys...(e.g. サキさん)
もしくは（推奨↓）
"# get 1"		→	sakisan-ctl@phys...(e.g. サキさん)
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿

一方、一箇所で集中管理したい場合（master.fml）のほうでは
WWW.phys.titech.ac.jp へのアクセス

"www http://www.phys.titech.ac.jp/"	→	master.fml@phys..

サキさんの 記事１をとりよせる。

"# get sakisan 1"	→	master.fml@phys..
       ↑ここにはＭＬ名が入る（ここが要注意）

となってます。実は中でＭＬサーバへただ中継してるだけです（笑）

コマンド一覧：（<list>はＭＬ名（アドレスの＠前の部分））
help		<list>
objective	<list>
guide		<list>
msg		<list>
member		<list>
members		<list>
active		<list>
actives		<list>
summary		<list>
on		<list>
off		<list>
bye		<list>
get		<list> <filename>
mget		<list> <filename>

end
quit
exit	

本来の目的は	www, ftp, wais, gopher とのＩＰＣの中継をする
おまけ機能で 
subscribe ML-address とか
member ML-address とか
which とか
できる（あくまでおまけ）＃実は単にＩＰＣの中継してるだけ:-)



.S	ロックアルゴリズム
.key	flock
.key	liblock.pl
.key	pid
.key	rename()

今のは
	1.	flock system call（man flock）

	BSDね。fml 1.2はあまりすっきりしたコードになってないが、1.3は
	かなりすっきりしたとおもう

	2.	pidにもとづくロック（liblock.pl）

	1にくらべ数倍よけいなsystem callがかかる
	＃ちゃんと一周した後も補正している。

	3.	rename() を使う

	rename()をつかって排他制御とか… UNIX V7 の時代からあるやりか
	たですね。結局 1.6 では、これにもどしちゃたんですが…



.S	sendmailとの通信の記録（デバッグ）
.key	var/log/_smtplog
.key	_smtplog
.key	$NOT_TRACE_SMTP

sendmailとのやりとりの記録（もっとも最近のものだけ）デバッグに便利。
（デバッグとか終わっちゃって）もぉ必要なかったら

	$NOT_TRACE_SMTP = 1; 

とconfig.phにかいてください。ログをとらなくなります。



.S	X-MLServer: field って何？
.key	X-MLServer:

起源はデバッグ用だったんだけど（笑）、今の意味は『明示的にＭＬサーバが
ｈｍｌ系である』ことを宣言しているつもりです。無意味ではないと思うんで
すが
＃だってぇ〜hmlじゃないのにhmlのコマンドがＭＬにながれるのをよく見るか
ら:-)

＃けずるときはfml.plの中の sub Distribute のX-MLServerって行をコメント
＃アウトなりなんなりしてください


.S	違うアドレスから来たメールは？
.S	アドレスチェックを緩めたい or 強くしたい
.key	$ADDR_CHECK_MAX

メンバーチェックは送られてきたメールの発信者のアドレスと members に書
かれたアドレスとが一致するか否かで判断しています。今の設定は
＃1.3.2からは…緩くした

	fukachan@titech.ac.jp
	fukachan@phys.titech.ac.jp
	fukachan@beth.phys.titech.ac.jp
	fukachan@exelion.phys.titech.ac.jp

はすべて同じにみなしてます。つまり phys.titech.ac.jp のjp側から数えて
３つの部分の判定チェックですね。（木構造のルートから数える）
＃経験的にここまでやれば十分でしょう

４つ（jp ac phys titech の４つ）までチェックしたいなら、

$ADDR_CHECK_MAX = 4;

と config.ph のどっかに書いておいて下さい。$ADDR_CHECK_MAX という変数
が設定されてない場合は３として動きます。


.S	複数アドレスから投稿したいがうけとりは一つ( "# skip" )
.key	skip
.key	noskip
.label	{skip}

複数アドレスから投稿可能だがうけとりはあるアドレスに送って欲しい。
＃この１週間だけこのアドレスも使いたいしぃ〜とかの場合にも効果的です

という場合を考えて、actives(自動登録では members = actives) で

fukachan@phys.titech.ac.jp	skip

と書いておけば認証（新人さんチェック）には使うけど配送はしないという動
作をします

つまり

	fukachan@phys.titech.ac.jp	skip
	Elena@phys.titech.ac.jp	
	Pollyanna@phys.titech.ac.jp	skip

になっているとすると、fukachan,elena,pollyannaどこからでも投稿はできる
が、配送はelenaにしか行なわれないということです。

ユーザーがこれを自分でコントロールしたいなら、コマンドは
＃ Admin command でのみ引数が有効です。
 
# skip	 [引数]		From:のアドレス もしあれば 引数のアドレスを
			そこから投稿はできるが、配送はされないものと設定する
# noskip [引数]		上の逆。配送するようにする。

です。例：
# skip 
	From: のアドレスを skip に

# skip pollyanna@phys.titech.ac.jp
	pollyanna@phys.titech.ac.jp を skip に

# noskip pollyanna@phys.titech.ac.jp
	pollyanna@phys.titech.ac.jp へも配送を



.S	たとえば、Received: のようなヘッダを残すには？

Current(1.6以降) では、すべての変数は 

	$Envelope{"field名を小文字にした単語:"}
	＃ いまのばあい、$Envelope{'received:'}

に、はいってるので、 これを どっかの hook で Add するとかでＯＫでしょう。
もっとも、

	$Envelope{'received:'} =~ s/(\w)Received:/$1\nReceived:/g;

とかして、（つながってますんで、）複数行にもどさないと あきまへん…

古いやつだと、直接 next if /^Received:/ をけずって、addするしかありま
せんが
.q
--- fml.pl	Tue Nov 14 16:49:28 1995
+++ fml.pl.new	Tue Nov 14 16:49:02 1995
@@ -173,6 +173,11 @@
 
 	# Fields to skip. Please custumize below.
 	next if /^Received:/io;
+
+	if (/^Received:/io) {
+	    $ReceivedHeaders .= "X-Received: $contents\n"; #?
+	}
+
 	next if /^In-Reply-To:/io && (! $SUPERFLUOUS_HEADER);
 	next if /^Return-Path:/io;
 	next if /^X-M\S+:/io;
@@ -518,6 +523,8 @@
     $body .= $_cf{'MIME', 'header'} if (!$PREVENT_MIME) && $_cf{'MIME', 'header'};
     $body .= $SuperfluousHeaders    if $SUPERFLUOUS_HEADERS;
 
+    $body .= $ReceivedHeaders;
+
     # Additional hook;
     $body .= "Message-Id: $Message_Id\n" if $USE_ORIGINAL_MESSAGE_ID;
     $HEADER_ADD_HOOK && &eval($HEADER_ADD_HOOK, 'Header Add Hook');
.~q



.S	X-Stardate: をつける（mh-e）

lib/Utilities/stardate.el を load してください
＃ emacs 19 でなきゃかきかえないとだめ

たとえば、.emacs に
(load-libaray "stardate")
(setq startrek-stardate-process "/some-directory-path/libStardate.pl")

とすると mh-comp の draft buffer をつくるときに 
X-Stardate: をつけてくれます。




.S	自動送り返しサーバってどう実装してるんですか？ その１
.key	自動送り返しサーバっ実装例１

なんのことはない。ガイドファイルに適当なファイルを設定して、config.ph 
で強制的にガイド送り返ししかしないようにしてしまえば終わりですね。
＃いままで、きづかなかった…

ポイントは、“$START_HOOK にしかける”ってところですね。

例：
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
$MAIL_LIST	= 'fml@phys.titech.ac.jp';
$ML_FN		= '(fml recent infomation)';
$MAINTAINER	= 'fml-request@phys.titech.ac.jp';

$FML            = '/home/axion/fukachan/work/spool/EXP';
$GUIDE_FILE	= "$FML/doc/INFO";
$LOGFILE	= "$FML/var/log/fmlinfo-log"; # activity log file

$START_HOOK     = q# $Envelope{'req:guide'} = 1;#;

1;
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿


.S	自動送り返しサーバってどう実装してるんですか？ その２
.key	自動送り返しサーバっ実装例２

設問：fml-current@phys.titech.ac.jp 宛に送ったメールは自動返送されて戻っ
てくるのですが、こういったものを作るには、どのような設定をすればいい？

いまでは libSendBack.pl ってのにまとまってます。
/usr/ucb/vacation ってのはこれとほぼ同じですね。
＃もっともあれは unix from をみるんですが

理屈は コードをけずっただけ（笑）というだけですが、

０．いつもの通り仕掛ける
１．ロック
２．メンバーチェックをしないで
３．送り返す
	&SendFile($to, "", 目的のFILE);
４．ロックをはずす

in fml.pl MAIN PART

(!$USE_FLOCK) ? &Lock : &Flock;	# Locking 

#---------------- CHANGE -------------------------

$MAIL_LIST	= 'fml@phys.titech.ac.jp';
$ML_FN		= '(fml recent infomation)';
$MAINTAINER	= 'fml-request@phys.titech.ac.jp';

$INFO_FILE	= "$DIR/INFO";

$LOGFILE	= "$DIR/fmlinfo-log";		# activity log file

$to             = $Reply_to ? $Reply_to : $From_address;

&SendFile($to, "Info $ML_FN", $INFO_FILE);
&Logging("Info request from $From_address");

#---------------- CHANGE ENDS --------------------

(!$USE_FLOCK) ? &Unlock : &Funlock;# UnLocking 
exit 0;				# the main ends.




.S	コマンド専用サーバなら "# command" syntax じゃなくてもいいわけで…

	次説参照

.S	コマンドの # syntax は必要か？ 

“コマンド専用のアドレスにメールが来た時だけ”は考える必要がないですね
もし、コマンド専用のアドレスで

	# get 1
		も
	get 1

同じに動いて欲しいなら
＃もちろん off bye 等も同じですが

$COMMAND_ONLY_SERVER = 1;

と config.ph に書いてみてください。
＃もっとも、こうしておくと listserv とかわりませんな:-)


.S	コマンドは一辺に実行できるか？

	% cat foo
	# get 1
	# get 2
	# get 3
	# help
	# summary
	% cat foo | Mail ＭＬのアドレス

とすると、1 2 3 の記事を取り寄せ、ヘルプとさらにサマリーファイルもとり
よせるという働きをします。bye を除き 一行一コマンドなら順番にすべて実
行します。

それは各行ごとにどんどん処理をするようになっているからです。
＃ ただし # exit はコマンドの終りです。ここで exit = end = quit


.S	コマンドは一辺に実行できるか？２
.label	{command-plural2}

でも、
	% cat foo
	uja
	# get 1
	# get 2

というファイルだとエラーです。最初の３行のどこかで#ではじまる行があれ
ばコマンドモードとみなして処理を行なうためです。
最初の行は空行で２行目に#があるメールが、間違えてながれたりしないため
の防止機構です。この“３”行の“３”を変えたいときは

config.ph の中の
	$COMMAND_CHECK_LIMIT = 3;（最初の３行をチェックする）
を変えます。


.S	コマンドの終り（シグニチャア対策）
.key シグニチャア対策

# exit 
# end
# quit

を追加しました。このコマンドのところでアクションは終了します。
シグニチャアがあってもいいように、こうしました。


.S	コマンドのエラー警告

デフォールトではしません。$USE_WARNING =1; とすると変なコマンドがあっ
たらメールでユーザーへ知らせます。
.seealso USE_WARNING 


.S	$TMP_DIR = './tmp'; を各種作業に使います。
.key	$TMP_DIR

1.3.1.3 からは $TMP_DIR をセットして下さい。
セットしないと デフォールトでは $DIR/tmp(つまり $TMP_DIR = './tmp';) 
です。

/tmp とか /usr/tmp とかは万が一ファイルが残ると嫌なので使いません。
＃だって private communication だもん


.S	コマンド専用サーバ

コマンド専用のサーバ（登録とか、get とか…）
と
Distribution 担当のサーバ
の２つということですね

コマンド専用のアドレスときには

	$COMMAND_ONLY_SERVER = 1; 

となるようにする（たとえば config.ph にかく）。この時
	# command と command 
は同じです。つまり 

	# get 1 
も
	get 1 

は同じです＃以下同様に各コマンド…

ついでに subsribe コマンドも使えたりします。

さらに $ML_MEMBER_CHECK = 1; だと members と actives 両方にアドレスを
登録します


.S	コマンドの結果を送り返すときにヘルプやなにかの情報も付加する 	

	$PREAMBLE_MAILBODY	（前）
	$TRAILER_MAILBODY	（後）
	を本文の前後に必ず付けます。

つまり、
	e.g. HELP コマンドにたいして、

	$PREAMBLE_MAILBODY	（前）
	HELPファイル本文
	$TRAILER_MAILBODY	（後）

のようにです。

もし、なんらかの理由で普通のメールの場合にも付けたいなら
＃それは、人の郵便をかってに開けて、人の手紙に手を加えるようなもので、
＃倫理的に許されないと思うが…世の中いろいろあるだろう〜？？？

config.ph に $_cf{'ADD2BODY'} = 1; と書いておいてください。
普通のＭＬのメールですら、INFO?がつくようになります。

これを利用して、本文に メールカウントを埋め込むことも可能になります。
＃実際、コマンドモードに入るときに $_cf{'ADD2BODY'} = 1;をしています。




.S	ＭＬサーバの考え方？（私見）
.key	ＭＬサーバの理屈

Private Communication を便利にするだけのツール（Filter）
＃Private→メンバーチェックという考え方になる。

考え方：
メール→Sendmailがうけとる
             ↓
	サーバへ渡す。
             ↓
	フィルター操作（しないなら/etc/aliasesいじるだけ）
	さらにヘッダーをいじるとか…
	＃これくらいならsed＋αでも十分
             ↓
	なんらかのリストにしたがって配送
	＃“配るだけ”ならSendmail 8.xでも十分

＋αでログをとり、スプールし、必要なら取り寄せられるようにちょこっとだ
け複雑なことをしようとするならこのサーバまで必要です。


.S	認証プロセス
.key	認証プロセス

せいぜい数百人（←数字100に根拠はありません。ふつうはそんなにいかないも
の〜ってくらい）程度とおもって線形にファイルを探索します

メンバー数万のオーダーとかいわない限り関係ないとおもうんですが…
＃律速段階はやっぱりsendmailでしょう(sub Distribute)

でも、普通 user@foo.bar.uja の user の exact match でreturn しちゃうか
ら、その後の複雑なマッチング処理はあんまり気にしなくてもよいでしょう
（期待値としての振舞いは）



.S	律速段階
.key	何がどこが遅くさせるか？

律速段階はやっぱりsendmailでしょう。

sub Distribute でＭＸ引く時とかサーバプロセスの後のSendmailの配送が遅
いでしょうねぇ。
＃アクティブな人たちをmember fileの最初にするとすると少しは早いかな:-)
＃後、読み込む前に grep 一発かましてからとかね :-)

ひっくりかえすと、sub Distribute のループとか認証プロセス以外は、少し
くらい余計なプロセスがついても、ほとんど効かないということです。
＃正確なProfileははかってないですけど




.S	動く時のuid はどうなってるの？
.key	uid
.key	setuid
.key	ユーザー権限ということ
.label	{fml-uid}

・ローカルに自分が実験したら

	自分のuidで実行

・外からメールがやってきたら？

	外→	
		sendmail は uid = 1で起動（daemon）
		→ setuidしてユーザー権限(uid=your own)にして
		   → fml.pl を起動する
	＃これは fml.c で作った fml を使うか
	＃:include list 形
	.seealso configuration, calling-fml.pl, msend-0, msend-1, msend-2, msend-3, msend-dir

	→ fml.plに渡す

この辺でsetuidの話とかが関係するわけですね。

各ＯＳでどう setuid をすればうまくいくか？については INSTALL にまとめ
一覧があります。そちらをみてくださいませ









.C	Appendix: History
.S	1.4 -> 1.5

newsyslog e.g. var/log/*.0 -> .1..
bug fix fml.pl libfml.pl MSendv4.pl

UNIX FROM CHECK

summary コマンドの引数

librfc1153 fix of plural appearing when delivered to two different
condition persons.

--- fix 1.4.4 

# matome 0 の誤動作をｆｉｘ
内部 function call を変えたときに 0 用のコードがない

EasyConfigure で config.ph の flock の設定まわりまで 対話的に行うスクリプト

まとめおくりでの User interface のバグｆｉｘ
＃ 1 byte だけ;-)

MSendv4.pl 1.4.1 -> 1.4.1.1 は必須ですぅ _o_
条件がおなじで複数マッチしたユーザーへ配送する最後のところが間違ってい
る。複数マッチしないかぎり動きはただしい

Configure 廃止。新しい sbin/ccfml が cc への前段階処理をする

スタートレックの 宇宙歴 がつくぞ（笑）
＃ $APPEND_STARDATE = 1; in config.ph 

mget のデフォールトが ちがってた…_o_ ｆｉｘ

おまけ：
EXPIRE 機能
libSendBack.pl （あるアドレスに送ると ドキュメントとかを送り返すように
設定するための）

1.4.1 RELEASE 1995/5/7

mget とまとめおくりでの User interface 
PLAINTEST 
	UNIX FROM
	RFC934	
	RFC1153
	MIME/Multipart
COMPRESSED FILE
	GZIP of UNIX FROM
	Lha + Ish 

を ユーザーごとに設定できる

KNOWN BUGS 

まとめ送りのときの RFC1153 のカウントの取り方の問題がある
＃ISSUE カウントなんて意味ないと思えばかまわないのだが…

config.ph の SECURITY_LEBEL のスペルミスで mget 正規表現 が動かない
＃ただしくは SECURITY_LEVEL です


ファイル構成を一部再構成（ 4.4BSD like ）
etc/crontab-4.3
etc/crontab-4.4
var/run

.S	1.4 RELEASE	1995/04/26 11:59:02 GMT
＃RCS ID の都合でとりあえず 番号をｆｉｘしただけ

ごめんなさい 1.3.9.4 〜 1.3.9.10 はとってもまずいです。
入れ換えて下さい_o_

"# matome 0" の時に、いまたまっているメールを送り出します。

MIME-Version:
Content-Type:
Content-Transfer-Encoding:
をデフォールトで通すように変更（もし、あれば）

From と 配送先が一致した時に、配送を止める

~/.forward ＭＬの バグｆｉｘ

libutils.pl syntax bug fix
SendFile.pl syntax bug fix
configure_fml syntax bug fix

注意： Configure の意味がちがいます
GNU なんかのソフトと同じで Configure した後 make です。

・sjis conversion is ish+lzh mode
^M ^Z もつける。

・extract from archive to expand as tmp/spool/201 ...
 for '# mget 201-210 ..' not using tmp/extract$$

・fix libsmtp for rfc821 4.5.2

・sub system

・対security

・複数のアドレスが登録がされている時、
  普通のユーザーにたいしては 一つにマッチするまで頑張る、
  だめならだめ

・しかし、リモートでの アドミンコマンドでは 複数マッチを許す。
  OFF 引数 等の 引数も許す。

・ # addr exact-address コマンドは ユーザーが 自分で複数のアドレスの内
  一つを指定するのに使う。

1.3.2 のメインテーマは“ごたごたしてるコードを整理”とおもって、そうし
ようとしてます _o_

fix of MSendv4.pl inconsistency between ish and gzip mode when
sequential calling

自動登録の時 subscribe = # subscribe 

・ ftpmail の修正はまだ途中だす_o_

■fml.pl が cron.pl を走らせ（正確にはfml.pl自身が変身するんだけど…）
そのまま system の cron と同じ働きをします。
つまり１分に一回おきて crontab をみて、実行する。
Fml System Check Routine とか、まとめおくりを crontab に書いておけばい
いんですね


.S	1.3.2.x

libfml.pl はエラー処理を一括しておこなう。そうしないと複数のコマンドミ
スそれぞれについて警告メールが返ってしまうから

fml の remote control（admin command）
のパスワード機構

変数名等の変更：
PRE_HOOK -> START_HOOK
ExExec -> RunHooks
"# guide" は本当に知らない人の時だけ特別扱い

まとめおくりのヴァリエーション
	cron をつかわずに、３通たまったら配送みたいな形式
	＃でも、１日に終りには rehash するべきだろうな（この部分はま〜
	だだよん）

	RFC1153 フォーマット、細かい部分は rfc1153.ph の中で変更してく
	ださい。

ＦＡＱに索引がついたぞ！

おまけ：~/.forward で 使う方法

コマンドの拡張
特殊目的：
# addr aoi@chan.panic
			複数の配送先を持つ人はＯＦＦコマンド等で
			サーバの設定によっては複数マッチしてしまう
			e.g. aoi@chan.panic と aoi@hayakawa.chan.panic
			も両方マッチしてしまう時、
			今は aoi@chan.panic についてのコマンドを行ないたい時
			に使うと、このコマンド以降の他のコマンドを 
			aoi@chan.panic に対してのみ行なうようにする

まとめおくりで、
# matome 数字i 		とすれば lha + ish で
# matome 数字(13-29)	上の特別の場合で、一日一回Ｎ時にまとめおくり
			１３〜３６の数字がこのケースに当てはまります
			午前５時に一回だけまとめおくり慕いときは、
			２４＋５＝２９ をおくりこんでください。午後５
			時は１７でいいんですが、午前中はこうしないと判
			別がつかないので…

bug fix：
1.3.2 以前のものは timing のとりかた（普通考えないような組み合わせで）
で mget の送り返しルーチンの fileへのbuffering と conflict する（して
中身が消える）ことがあります。


■ stat or status コマンド
# status [引数]
# stat   [引数]		現在の設定について知らせる（まとめおくりとかOFFとか）
			デフォールト（# stat(us)）は自分自身の状態

■ for $s in /etc/sendmail.cf

自分じゃ使わないので、ほったらかしといたのをｆｉｘ


■直接は関係ないんですが、一応  MIME-decodingでつかう
	mime_pls の２．０α はｆｔｐにおいてあります。

   パッケージ中で実際に使ってるのは（一緒に配布されているものは）
	1.11alpha です。

■ master.fml （./lib/Master）
	www, ftp, wais, gopher とのＩＰＣの中継をする
	おまけ機能で 
	subscribe ML-address とか
	member ML-address とか
	which とか
	できる（あくまでおまけ）＃実は単にＩＰＣの中継してるだけ


■ command: "# mget last:10" (mhだね) シンタックス
＃first: prev: next:なんて意味ないでしょ

■ 祝！INSTALL MANUAL English 版:-)、あと help も英語版がある

でも、この２つしか翻訳が終ってない;_;

■ クロスポスト機能

別にＭＬでやるこっちゃないよなぁ〜これ:-)
もちろん デファールトの fml.pl には組み込まれていません。

lib/Crosspost/fml.pl lib/Crosspost/*.p[lh] に置き換えると
クロスポストつまり、複数のＭＬにだしてもユーザーには１通しか配送されな
い。ということができます。

■ RFC822 を素直に解釈すれば、自動登録のときにreply-toを使うべき（と私
は読む）ですが、あぶないのでやっぱりやめます。
自動登録でFROM:フィールドと明示的に別のアドレスで登録したいなら
subscribe ml-addressを使ってね（この手のは全部 $DEFAULT_うじゃ って変
数でキーワードは変えられます）

■ $DIRの下の ./tmp を各種作業に使います。

$TMP_DIR をセットして下さい。しないと $DIR/tmp = ($DIR/$TMPDIR)を自動
的に使います

■ 明示的に $USE_WARNING をセット（e.g. $USE_WARNING = 1;）しないと
エラーのコマンドは警告するが、
コマンドメールでの単なるシンタックスエラーの警告をしない（ヘルプを返さ
ない）

■lzh + ish option
		# mget 200-210 ish

の用に指定するとlzh して ish(s7 mode)したものを送り返します。

$LHA = "/usr/share/bin/lha a $TMP_DIR/$pipe ";
$ISH = "/home/axion/fukachan/bin/ish -s7 ";

等をどこかで（config.phとか）で設定して下さい。
しないと上の↑Built-inデフォールト値になります。

■<コマンド終り>
# exit 
# end
# quit

■ Proceess Table にＭＬ名をつける（８文字もありゃ十分だろう）

	FAQ about auto-regist
	fml-1.3/bin/Archive.*
	libutils.pl(Asymmetric code around pack and unpack)
	libutils.pl(NOT_DELETE_ORIGINAL)
	fml.pl Strip bracket and Re: actions
	libutils.pl sub MakeFileWithUnixFrom. bugfix when unpack mode.

■ 間違えコマンド チェックルール

	最初の３行のどこかで ^# syntax
	やっぱり、もとに戻しました（小細工はやめろ＞おれ）
	＃$GUIDE_CHECK_LIMIT、$COMMAND_CHECK_LIMIT 等で
	＃パラメータは変更できます。

■ ログファイルへのメッセージちょっと改変（少し見やすい？）

■ libnounistd.pl はもぉ使わないっす。ただし aish110uを使うという前提
で。aish や lha のソースは 
ftp.phys.titech.ac.jp:/pub/net/fml-current に一緒においてあります。

■ 古いライブラリ は lib/Compatibility に移動しておきました。


■■■ Bug fix ■■■
・	２／１１〜１２／１７あたりのfml-currentで
	『まとめおくりで全てのユーザーに１時間毎にメールが配られる』
	InitConfigに
	     $HOUR = (0 == $hour) ? 24 : $hour; 
	が抜けてるんだと思います。１２／２０から後のなら大丈夫
	＃これがないと、$HOUR % 数字 が常に 真 になって１時間ごとに配
	送されてしまいます;_;。

・ no * in sub SendFile
1.3.1.7のころの libsmtp.pl のfixに fix まちがえがあります。すいません
(_o_)。ｆｉｘしました。

・マシンによってはプロセス間通信がうまくいかない？
lib/Sendmail/libo2smtp.pl(旧 libR8.pl)
＃open2.pl をつかってます

OS:OSF/1 って libo2smtp.pl じゃないとだめなの？
＃今のところ、こっちじゃないといけないという話しか聞かない…


see FAQ

・ libfml.pl

バグじゃないけど… stat の順をちょいといれかえた＃あまり本質的でない

・ MSendrc

もし、リアルタイム配送にきりかえたらちゃんとこっちのエントリも消す
＃いままで手抜きだっただけか…


.S	1.3 release (94/9/12)

.S	1.2 -> 1.3


ＲＥＡＤＭＥとＦＡＱが一部おいついていません。
わかんないところは聞いて下さいませ(_o_)

・コマンド フック

ＭＬごとに付け加えたいコマンドは config.ph の中に こんなかんじに付け加
えれば便利

コマンド：リスト取り寄せの例

	$COMMAND_HOOK =q#
	      if(/list/io) {
		  &Logging("List ($From_address)");
		  &SendFile($to, "List $ML_FN", "$DIR/list");
		  next GivenCommands;
	      }
	#;

・明示的な自動登録をする 例えば Subject: subscribe とか書いてもらう

	config.ph で
	$REQUIRE_SUBSCRIBE = "subscribe"; 

のように好きな言葉を定義して下さい e.g. subscribe, add, append...

・まとめおくり ver.１ でコントロールも本体のＭＬで行なえるようにしまし
た。		→ まとめおくり ver.２ 
つまり、まとめ送り専用アドレスは不要です。

・ＩＰでない人用のｈｔｔｐ中継ソフト(contrib/www-mail)
＃メールｐｒｏｘｙとでもいえばいいの？

・RELEASE_NOTES書きました
＃PREHISTORYはなくなった

.S	1.2.2 -> 

lock の仕方（対象を）を変えることで、
・seekをつかわない
・lock algorithm toggle switching の非対象性をなくした

・Whois が使えます。hml の whois のことじゃなくて
日本語も使えるようになってるので libutils.pl に加え jcode.pl が必要で
す。contrib/Whois に jcode.pl は入ってます。

	# whois -h host key 

という本物のコマンドの互換操作がＭＬサーバを通じて任意のサーバに対して
できます。必要な perl で書いた whois サーバが contrib/Whois にあります

・まとめおくり ver.2  MSend-cron.pl

ユーザーは次のような任意の指定ができます。まだ gzip コードが内蔵されて
ないので、plain で送り返しちゃいます(_o_)。

# matome 数字(0-23)	配送時間は実はmodulus（笑）if(0 == (24 % time))
			だから 17 なんてやっても一日一回と同じです(_o_)

			default は gzip した Unix From つきのファイルの固まり
# matome 数字u 		とすれば plain(unpack) のはずですが、
			いまは plain だけ(_o_)

# matome 0		普通の配送へ戻す

例：
# matome 1		まとめ送り １時間に一回
# matome 2		まとめ送り ２時間に一回
# matome 17		まとめ送り 一日一回と同じ（この場合は１７時に来る）

・まとめおくりで Unix From つきのファイルの固まり
	 を ＲＦＣ９３４式 にもなるようにした。
	MH の burst で展開すればいい
	$USE_RFC934 = 1

・今は ｇｚｉｐ がデフォールトっす。ソフトウエア特許反対！

・自動登録の時メールそのものを管理者に伝える

.S	1.2.1 -> 

fml-1.2.1.x series はおわりです。
fml-1.2.1.7 が fml-1.2.1.x シリーズの最後ですがドキュメントが一部不完
全です(_o_)

いま fml-1.2.2 をやってる際中ですぅ。


・mget ver 2 
	新しいmget。従来の Bourne shell type regular expressionに加え
	# mget 1-3,4-100,100-1000 time 
	のようなシンタックスも自動判別して動きます。
	e.g. # mget 1-3,4-100,100-1000 time 

	SendFile.pl が新しい下請け サーバです。
	これで majordomo type vulnerability も消しました

	・get まわり vulnerability をつぶした
	＃もともとの hml も同じ security hole をもつ

	・# mget 1-3,4-100,100-1000 time 
	のようなシンタックスも自動判別して動きます。

	・# mget 1-3,4-100,100-1000 time unpack
	・# mget 1-3,4-100,100-1000 unpack
	  unpack オプション は tar.gz をしない mget
	見やすいが、返すファイルサイズも数倍

・投票用サーバのリリースコードが 開発中のヴァージョン でした。
	＃運用実績のあるコードじゃなくて、僕のパッケージングの間違いです

	今のは、開発コード ver. 1.2 Elena Lolabrigita です:-)
	＃むかしは、「おさかな」といっていた場所にある

	さらに、vote.pl が変わった(1994/06/09)。
	＃International 声優コンテスト 企画に合わせて（笑）

・WHOIS Server
	＃ 開発コード Rin Russel（馬鹿）

・MIME decoding Library が 1.10 に上がった（いただきもの）
  ftp に一緒に mime_pls.* はおいておきました。
	＃ありがたいことです

・（自動登録）$AUTO_REGISTERD_UNDELIVER_P = 1;
	 なら 登録要請をしているメールはＭＬへ流さない

・アドミンコマンド復活計画（not 推奨）
	Backward compatibility 用の libhml.pl
	contrib/libhml

・いまならもれなく 謎の ftpmail 互換ライブラリつか（謎＋＋）
	＃でもβ版くらいなんだなぁ〜ちゃんと動くけど

new options of configuration files
・ +      in members
・ skip   in actives
・ matome in actives（開発中 まとめおくり ver.2）

・RecreateConfig.pl
	昔の config.ph の設定を尊重しつつ新しい機能のために
	config.ph につくりかえるための Utility


.S	1.2 ->  Bug Fix および 仕様変更 ほか( 1.2.1 current)

・SendFile.pl の InitConfig が間違っていた fix(1994/06/16)

・libfml.plのコードで順番をちょっと直して logging をわかりやすくした
（ちょっとしたこと（気になったので））

・自動登録は reply-to 優先（ははは、この例外処理を考えていなかったぁ）

・（自動登録）Naming Convention がおかしいので Fix
	$AUTO_REGISTERD_DELIVER_P -> $AUTO_REGISTERD_UNDELIVER_P 

・libfml 1.2.2.4 -> 1.2.2.5  fixed
	"# mget 1,2,3" not work in libfml 1.2.2.4


.S	Majordamo vulnerability(CERT Advisary report)

最近 Majordamo vulnerabilityの話がありましたが (CERT Advisary report
94/6/10)これは違う類。
Sendmail と直接話すので fml の場合ああいうのは関係なし。
ただ、似たような形が split_and_sendmail.pl を呼ぶ時にあった(最終fix 06/16)。


.# $Id$
.# Copyright (C) 1993-1997 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1997 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
