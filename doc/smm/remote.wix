.C	リモート管理
.l	remote
.label	REMOTE-ADMINISTRATION
.key	$REMOTE_ADMINISTRATION


.S	リモート管理 イントロダクション
.xref	bin/passwd.pl

FMLで”リモート管理”といっているのは、ＭＬ管理者が config.ph や 
members 等を、そのＭＬサーバのマシンに入って直接いじるのではなく、サー
バにコマンドメールを送ってＭＬの設定をメインテナンスすることを意図して
います。リモート管理ができる人は

	メンバーリストに登録されている
.xref $ADMIN_MEMBER_LIST
かつ
	パスワードを知っている
	複数人いたらそれぞれに別のパスワードを付けることができます。

現在では makefml があるので、これを使って登録とパスワードの初期化をす
るとよいでしょう。

問題は SMTP (Simple Mail Transfer Protocol) では原理的に認証はできない
というところにあります。パスワードによる認証もまた当てにはなりません。
パスワードを含むメールが FAIL してどこかのポストマスタにうっかり見えて
しまう可能性もあります(普通はヘッダだけですが)。でもヘッダの Approval:
password フィールドは見えちゃいますよね、その場合は。

そういう意味で決して”推奨していません”が、実用上しかたなく使うことに
なるケースも一杯あるらしいので実装しています。そういうものだと心に止め
ておいて下さい。


.S	より安全を考えると

SMTP でやるより、Secure Shell で RSA 認証して、
.k SSH 
.k Secure Shell

	ssh remote-host $FML/makefml add address

や
	scp remote-host:$FML/ml/elena/guide newguide 
	newguide を編集
	scp newguide remote-host:$FML/ml/elena/guide

のような操作をする方がはるかに優れていると思います。
これならコネクションがRSA認証されていてなおかつIDEA(default)暗号化され
ているという優れ物です。

なおマシンの上で他の人に覗かれた場合は少しだけましで、etc/passwd とい
うパスワードを保存するファイルにパスワードをcryptで暗号化して保存して
います。$USE_MD5 をセットすれば、MD5 で保存します。
.xref	MD5

そのためパスワードファイルの編集には makefml もしくは bin/passwd.pl を
使うと良いでしょう(自分で crypt してもいいですけどね、普通手動ではしな
かろう:)。


.S	リモート管理モード
.k	リモート管理モード
.k	&DEFINE_MODE('remote')

config.ph に

	$REMOTE_ADMINISTRATION = 1;
	$REMOTE_ADMINISTRATION_REQUIRE_PASSWORD = 1; (default)

をするとリモート管理を可能にします。これは

	リモート管理を認め
	管理者であることを証明するためにはパスワード認証が必要

という設定です。この２つの設定は

	&DEFINE_MODE('remote');

を書くと ON になります。パスワード認証を必要としない場合は

	$REMOTE_ADMINISTRATION_REQUIRE_PASSWORD = 0;

とすればそうなりますが、これはするべきではありません。


.S	コマンド
.k	admin

リモートで管理を許される人は

	# admin コマンド オプション

というシンタックスのコマンドをＭＬサーバに送ることで様々な操作をするこ
とができます。

パスワード認証を必要とする場合、一般に次のような一連のコマンドをいれる
ことになるでしょう。

例：
	# admin pass パスワード
	# admin addadmin fukachan@sapporo.iij.ad.jp
	# admin add      fukachan@sapporo.iij.ad.jp


.S	approve password command SYNTAX
.key	approve
.xref	fmlserv.pl
.label	admin:approve

# admin 形式は
   password認証して、その後は全部認証したものとみなす

# approve 形式は
   毎回 password を書く 

どっちもそれなりに面倒くさいですが…

ようはapporveは毎回 password を書くことだと思えばいいでしょう。このコ
マンドは Listserv Compatibitlity のために付け加えられました

例：	(上と同じコマンド)
	# approve パスワード addadmin fukachan@sapporo.iij.ad.jpa
	# approve パスワード add      fukachan@sapporo.iij.ad.jpa

つまり

	# approve password commands 

は ２行分

	# admin pass  password
	# admin commands

と同じです。つまりパスワードを付け加えれば 

	# admin コマンド == # approve password コマンド

ということですね。


.S	リモート管理の設定
.l	$ADMIN_MEMBER_LIST
.k	$ADMIN_HELP_FILE
.k	$REMOTE_ADMINISTRATION_REQUIRE_PASSWORD
.k	$PASSWD_FILE
.k	$DIR/etc/passwd

リモートで管理を許される人のリスト

	$ADMIN_MEMBER_LIST	= "$DIR/members-admin";

このリモート管理サーバのコマンドのヘルプ

	$ADMIN_HELP_FILE	= "$DIR/help-admin";

もし、リモートの管理者にパスワードを要求するなら、

	$REMOTE_ADMINISTRATION_REQUIRE_PASSWORD = 1; 

0にすればパスワードチェックをおこなわない設定です
このチェックに使うパスワードファイルが

	$PASSWD_FILE = "$DIR/etc/passwd";

です。

注意：
$REMOTE_ADMINISTRATION_REQUIRE_PASSWORD は $REMOTE_AUTH (TYPO で 
$REMORE_AUTH) が古い変数名。Backward compatible にしてあるので、どっち
の変数でもいいです。


.S	リモート管理モードでのアドレスの複数マッチ問題について 
.key	アドレスの複数マッチ
.key	admin コマンド

通常のリモートコマンドの場合、 OFF コマンド等での multiple-matching 
を認めません。つまり、

	fukachan@aoi.chan.panic
 と
	fukachan@uja.aoi.chan.panic

は両方ともマッチしてしまう時、

	チェックをきびしくしてひとつのアドレスだけを選ぶ

のがデフォールトのFMLの挙動ですが、リモート管理のコマンドの時だけは 
multiple です。つまり、上の両方のアドレスを一気に消して、新しく add し
たりできるわけです。


.S	リモートで入れ替えが可能なファイルについて、

具体的には remove unlink put rename コマンドの場合に、任意のファイルが
操作できるのはまずいです。本来これらのコマンドはリモートで guide ファ
イルを入れ換える等の目的のためにあります。現在では

	  @REMOTE_RECONFIGURABLE_FILES
.k	  @REMOTE_RECONFIGURABLE_FILES

という配列で定義されたファイルにのみこれらのコマンドは作用します。デフォー
ルトは、次の変数で設定されているものを操作可能にしてあります。

	$INDEX_FILE		$WHOIS_DB
	$ADMIN_MEMBER_LIST	$ADMIN_HELP_FILE
	$PASSWD_FILE		$LOG_MESSAGE_ID
	$MEMBER_LIST		$ACTIVE_LIST
	$OBJECTIVE_FILE		$GUIDE_FILE
	$HELP_FILE		$DENY_FILE
	$WELCOME_FILE		$CONFIRMATION_FILE
	$LOGFILE		$MGET_LOGFILE
	$SMTPLOG		$SUMMARY_FILE
	$SEQUENCE_FILE		$MSEND_RC
	$LOCK_FILE

	$FILE_TO_REGIST
	$FTP_HELP_FILE		$WHOIS_HELP_FILE

	@ACTIVE_LIST		@MEMBER_LIST

増やす場合は config.ph で

	push(@REMOTE_RECONFIGURABLE_FILES, "$DIR/独自のファイル");

のように配列の中身を追加してください。ちなみにこの場合 put 等の引数の
ファイル名は$DIR からの相対パスを全部書いてもらう必要があります。
ファイル名だけでは複数の置く可能性のある directory の中から自動的には
決められないからですね。


.S	アドミンのコマンド一覧 (help-admin より)
.k	help-admin
.k	help-admin

   # admin pass パスワード
   # admin password パスワード
   # admin passwd 新しいパスワード
   # admin initpass アドレス パスワード
   # admin help
   # admin log
   # admin add address
   # admin off address
   # admin on address
   # admin bye address
   # admin chaddr old-addr new-addr
   # admin change old-addr new-addr
   # admin change-address old-addr new-addr
   # admin matome address 引数 
   # admin skip address
   # admin addadmin address
   # admin addpriv  address
   # admin byeadmin address
   # admin byepriv  address
   # admin dir
   # admin ls options
   # admin remove filename
   # admin get filename
   # admin resend filename address
   # admin put filename
   # admin rename filename1 filename2
   # admin newinfo
   # admin newguide


.S	リモート管理で使えるコマンドを増やすor減らす
.l	add-admin-procedures
.xref	add-procedures
.k	リモート管理で使えるコマンドを増やすor減らす

普通のコマンドを増やす要領で同じようにやれば良いです。
config.ph でコントロールできます。
いくつかの変数がありますが、次のように作動します

   1	@PermitAdminProcedure が定義してあるなら
	@PermitAdminProcedure で許しているコマンドだけを設定します。
	もし、定義されていなければデフォールトのすべてのコマンドが
	利用可能になります。
	これらの設定はグローバル変数の %AdminProcedure に定義されます。

   2	%LocalAdminProcedure が定義されているなら
	1 で定義された %AdminProcedure を %LocalAdminProcedure で上書き
	します。

   3	@DenyAdminProcedure が定義されているなら
	@DenyAdminProcedure のコマンドだけを使えなくする

   4	$ADMIN_COMMAND_HOOK を評価する。
.k	$ADMIN_COMMAND_HOOK


例：
	○ 管理者用の helpとaddadminのみを使用可能、それ以外はすべて使用不可

	@PermitAdminProcedure = ('admin:help', 'admin:addadmin');

	○デフォールトに加え自分で定義した hack コマンドも使える

	%LocalAdminProcedure = ('admin:hack', 'ProcAdminHack');

	もちろんこの場合はどこかで sub ProcAdminHack { ...; } があって
	この関数を用意しておく必要がある。

	○デフォールトの中で addadmin は使えなくする
	@DenyAdminProcedure = ('admin:addadmin');


.S	リモートで管理する人を増やす時
.k	admin addadmin
.k	admin addpriv
.k	admin initpass

fukachan@sapporo.iij.ad.jp を管理者に加える時は

パスワード認証をしていない時は

   # admin addadmin fukachan@sapporo.iij.ad.jp

だけを、パスワード認証もしている時は

   # admin addadmin fukachan@sapporo.iij.ad.jp
   # admin inipass  fukachan@sapporo.iij.ad.jp パスワード

をコマンドで送りこみます。

より良いのは、

   # admin inipass  fukachan@sapporo.iij.ad.jp パスワード

の代わりに、そのマシンで (ML の HOME で)

   bin/passwd.pl -i fukachan@sapporo.iij.ad.jp パスワード

をすることです。そのマシンがリモートにある場合さらに良い方法は、あらか
じめそのパスワードを crypt した文字列を（ローカルマシン上で）用意して、
そのマシンへ入って $DIR/etc/passwd (ML の HOME の下の etc/passwd) を
手で編集することです。
.xref	bin/passwd.pl etc/passwd 

その場合途中の経路上が暗号化されているとより望ましいです。例えば 
Secure Shell を使えば実現できます。SSL(Secure Socket Layer)化 telnet 
等もあります。

暗号化に関しては初期化プロセスだけ暗号化されていても、メールで admin 
コマンドを送る場合SMTP 上で動いてるのでパスワード隠蔽に関しては、どの
みちあまり意味はありませんが…


.S	リモートで管理する人を削除する時
.k	byeadmin
.k	byepriv

   # admin byeadmin fukachan@sapporo.iij.ad.jp

です。


.S	パスワードファイルの初期化と設定
.label	init-passwd
.k	etc/passwd
.k	bin/passwd.pl
.xref	bin/passwd.pl

例：
	makefml passwd ML名 ...

fukachan@phys.titech.ac.jp のパスワードを uja で初期化する。
初期化はＭＬサーバを edit できる人にしかできません。


.S	リモートでパスワードの変更

コマンドで

	# admin pas	パスワード
	# admin passwd	新しいパスワード

をサーバへ送り込むことで変更 (etc/passwdの設定変更) をすることができま
す。approve コマンドなら

	# apporve パスワード passwd 新しいパスワード

ですね。


.S	ログファイルがＭＬ本体と管理者コマンドで同じだが…

ログファイル ってＭＬ本体と管理者コマンドって同じファイルを使ってます。
分けた方がいいとおもう場合は… &Log を直接いじるしかないですかね…


.S	リモート管理の古い設定への注意
.key	リモート管理の古い設定への注意

古い設定のままでは動きません(libfml.pl 1.5.2より前)。ごめんなさい

昔、リモート管理はフックをしかけることで実装していました。 
いまでは、$REMOTE_ADMINISTRATION で ON, OFF できるようになっています。


.# $Id$
.# Copyright (C) 1993-1996 fukachan@phys.titech.ac.jp
.# Copyright (C) 1996-1997 fukachan@sapporo.iij.ad.jp
.# fml is free software distributed under the terms of the GNU General
.# Public License. see the file COPYING for more details.
