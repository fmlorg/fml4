.C	リモート管理
.l	remote
.label	REMOTE-ADMINISTRATION
.key	$REMOTE_ADMINISTRATION


.S	リモート管理 イントロダクション
.xref	bin/passwd.pl

”リモート管理”といっているのは config.ph や members 等をＭＬ管理者が
そのＭＬサーバのマシンに入って直接メインテナンスをするのではなく、ＭＬ
管理者がサーバにコマンドを送ってＭＬの設定をメインテナンスすることを意
図しています。

SMTP (Simple Mail Transfer Protocol) では原理的に認証はできません。パ
スワードによる認証もまた当てにはなりません。パスワードを含むメールが
FAILしてどこかのポストマスタにうっかり見えてしまう可能性もあります(普
通はヘッダだけですが)。でもヘッダの Approval: password フィールドは見
えちゃいますよね、その場合は。

そういう意味で決して「推奨していません」が、実用上しかたなく使うことに
なるケースも一杯あるらしいので実装しています。そういうものだ心に止めて
おいて下さい。

なおマシンの上で他の人に除かれた場合は少しだけましで、etc/passwd とい
うパスワードを保存するファイルにパスワードをcryptで暗号化して保存して
います。

そのためパスワードファイルの編集には bin/passwd.pl を使うと良いでしょ
う。


.S	リモート管理モード ('remote')
.k	リモート管理モード
.k	--remote
.k	&DEFINE_MODE('remote')

ロングラインオプションで

	fml.pl --remote
	fml.pl --ra
か
	config.ph で &DEFINE_MODE('remote');
	             &DEFINE_MODE('ra');

で設定できます(ra == Remote Administration)。
このモード設定は

	$REMOTE_ADMINISTRATION = 1;
	$REMOTE_ADMINISTRATION_REQUIRE_PASSWORD = 1;

をしていることと同じです(後述)。つまり

	リモート管理を認め
	管理者であることを証明するためにはパスワード認証が必要

という設定です。


.S	コマンド
.k	admin

リモートで管理を許される人は

	# admin コマンド オプション

というシンタックスのコマンドをＭＬサーバに送ることで様々な操作をするこ
とができます。

パスワード認証を必要とする場合、一般に次のような一連のコマンドをいれる
ことになるでしょう。

例：
	# admin pass パスワード
	# admin addadmin fukachan@sapporo.iij.ad.jp
	# admin add      fukachan@sapporo.iij.ad.jp


.S	approve password command SYNTAX
.key	approve
.xref	fmlserv.pl
.label	admin:approve

# admin 形式は
   password認証して、その後は全部認証したものとみなす

# approve 形式は
   毎回 password を書く 

どっちもそれなりに面倒くさいですが…

ようはapporveは毎回 password を書くことだと思えばいいでしょう。このコ
マンドは Listserv Compatibitlity のために付け加えられました

例：	(上と同じコマンド)
	# approve パスワード addadmin fukachan@sapporo.iij.ad.jpa
	# approve パスワード add      fukachan@sapporo.iij.ad.jpa


つまり

	# approve password commands 

は ２行分

	# pass  password
	# admin commands

と同じです。つまりパスワードを付け加えれば 

	# admin コマンド == # approve password コマンド

ということですね。


.S	リモート管理の設定
.k	$ADMIN_MEMBER_LIST
.k	$ADMIN_HELP_FILE
.k	$REMOTE_ADMINISTRATION_REQUIRE_PASSWORD
.k	$PASSWD_FILE
.k	$DIR/etc/passwd

リモートで管理を許される人のリスト

	$ADMIN_MEMBER_LIST	= "$DIR/members-admin";

このリモート管理サーバのコマンドのヘルプ

	$ADMIN_HELP_FILE	= "$DIR/help-admin";

もし、リモートの管理者にパスワードを要求するなら、

	$REMOTE_ADMINISTRATION_REQUIRE_PASSWORD = 1; 

０にすれば パスワードチェック をおこなわない設定です

このチェックに使うパスワードファイルです。

	$PASSWD_FILE = "$DIR/etc/passwd";

注意：
$REMOTE_ADMINISTRATION_REQUIRE_PASSWORD は $REMOTE_AUTH (TYPO で 
$REMORE_AUTH) が古い変数名。Backward compatible にしてあるので、どっち
の変数でもいいです。


.S	アドミンモードでのアドレスの複数マッチ問題について 
.key	アドレスの複数マッチ
.key	アドミンコマンド

リモートの場合 OFF コマンド等での multiple-matching を認めません。
つまり、

	fukachan@aoi.chan.panic
 と
	fukachan@uja.aoi.chan.panic

は両方ともマッチしてしまう時、

	チェックをきびしくしてひとつのアドレスだけを選ぶ

のがデフォールトのfmlの挙動ですが、リモート管理のコマンドの時だけは 
multiple です。つまり、上の両方のアドレスを一気に消して、新しく add し
たりできるわけです。


.S	アドミンのコマンド一覧 (help-admin より)
.k	help-admin
.k	help-admin

   # admin pass パスワード
   # admin password パスワード
   # admin passwd 新しいパスワード
   # admin initpass アドレス パスワード
   # admin help
   # admin log
   # admin add address
   # admin off address
   # admin on address
   # admin bye address
   # admin chaddr old-addr new-addr
   # admin change old-addr new-addr
   # admin change-address old-addr new-addr
   # admin matome address 引数 
   # admin skip address
   # admin addadmin address
   # admin addpriv  address
   # admin byeadmin address
   # admin byepriv  address
   # admin dir
   # admin ls options
   # admin remove filename
   # admin get filename
   # admin put filename
   # admin rename filename1 filename2
   # admin newinfo
   # admin newguide


.S	リモート管理で使えるコマンドを増やすor減らす
.l	add-admin-procedures
.xref	add-procedures
.k	リモート管理で使えるコマンドを増やすor減らす

普通のコマンドを増やす要領で同じようにやれば良いです。
config.ph でコントロールできます。
いくつかの変数がありますが、次のように作動します

   1	@PermitAdminProcedure が定義してあるなら
	@PermitAdminProcedure で許しているコマンドだけを設定します。
	もし、定義されていなければデフォールトのすべてのコマンドが
	利用可能になります。
	これらの設定はグローバル変数の %AdminProcedure に定義されます。

   2	%LocalAdminProcedure が定義されているなら
	1 で定義された %AdminProcedure を %LocalAdminProcedure で上書きします。

   3	@DenyAdminProcedure が定義されているなら
	@DenyAdminProcedure のコマンドだけを使えなくする

   4	$ADMIN_COMMAND_HOOK を評価する。
.k	$ADMIN_COMMAND_HOOK


例：
	○ 管理者用の helpとaddadminのみを使用可能、それ以外はすべて使用不可

	@PermitAdminProcedure = ('admin:help', 'admin:addadmin');

	○デフォールトに加え自分で定義した hack コマンドも使える

	%LocalAdminProcedure = ('admin:hack', 'ProcAdminHack');

	もちろんこの場合はどこかで sub ProcAdminHack { ...; } があって
	この関数を用意しておく必要がある。

	○デフォールトの中で addadmin は使えなくする
	@DenyAdminProcedure = ('admin:addadmin');


.S	リモートで管理する人を増やす時
.k	admin addadmin
.k	admin addpriv
.k	admin initpass

fukachan@sapporo.iij.ad.jp を管理者に加える時は

パスワード認証をしていない時は

   # admin addadmin fukachan@sapporo.iij.ad.jp

だけを、パスワード認証もしている時は

   # admin addadmin fukachan@sapporo.iij.ad.jp
   # admin inipass  fukachan@sapporo.iij.ad.jp パスワード

をコマンドで送りこみます。

より良いのは、

   # admin inipass  fukachan@sapporo.iij.ad.jp パスワード

の代わりに、そのマシンで (ML の HOME で)

   bin/passwd.pl -i fukachan@sapporo.iij.ad.jp パスワード

をすることです。そのマシンがリモートにある場合さらに良い方法はあらかじ
めそのパスワードを crypt した文字列を（ローカルマシン上で）用意して、
そのマシンへ入って $DIR/etc/passwd (ML の HOME の下の etc/passwd) を
手で編集することです。
.xref	bin/passwd.pl etc/passwd 

その場合途中の経路上が暗号化されているとより望ましいです(^^)。
.xref	Gauntlet

もっとも暗号化に関しては初期化プロセスだけ暗号化されていても admin コ
マンドは SMTP 上で動いてるのでパスワード隠蔽に関しては、どのみちあまり
意味はありませんが…


.S	リモートで管理する人を削除する時
.k	byeadmin
.k	byepriv

   # admin byeadmin fukachan@sapporo.iij.ad.jp

です。


.S	パスワードファイルの初期化と設定
.label	init-passwd
.k	etc/passwd
.k	bin/passwd.pl

例：
   % passwd.pl -i fukachan@phys.titech.ac.jp uja

fukachan@phys.titech.ac.jp のパスワードを uja で初期化する。
初期化はＭＬサーバを edit できる人にしかできません。


.S	リモートでパスワードの変更

コマンドで

	# admin pas	パスワード
	# admin passwd	新しいパスワード

をサーバへ送り込むことで変更 (etc/passwdの設定変更) をすることができま
す。approve コマンドなら

	# apporve パスワード passwd 新しいパスワード

ですね。


.S	ログファイルがＭＬ本体と管理者コマンドで同じだが…

ログファイル ってＭＬ本体と管理者コマンドって同じファイルを使ってます。
分けた方がいいとおもう場合は… &Log を直接いじるしかないですかね…


.S	リモート管理の古い設定への注意
.key	リモート管理の古い設定への注意

古い設定のままでは動きません。ごめんなさい

昔、リモート管理はフックをしかけることで実装していました。 
いまでは、$REMOTE_ADMINISTRATION で ON, OFF できるようにしました。
(libfml.pl 1.5.2 から)


.# $Id$
.# Copyright (C) 1993-1996 fukachan@phys.titech.ac.jp
.# Copyright (C) 1996      fukachan@sapporo.iij.ad.jp
.# fml is free software distributed under the terms of the GNU General
.# Public License. see the file COPYING for more details.
