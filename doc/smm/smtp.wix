.C	Mail Delivery System Tuning

.S	%によるリレー
.key	%リレー

sendmail.cf の問題があります。「厳密にはRFCには従ってない?から%なんざぁ
理解しなくていいんだぜっ!」ってサイトも世の中にはあることに注意しましょ
う。


.S	activesファイルによるリレー (sendmail 8.x)
.key	%リレー

actives には

アドレス			リレーサーバー
fukachan@phys.titech.ac.jp	axion.phys.titech.ac.jp

のような書き方ができます。これをするとsendmailには

fukachan%phys.titech.ac.jp@axion.phys.titech.ac.jp

のように渡されます。	
だからactivesファイルに

fukachan@phys.titech.ac.jp	axion.phys.titech.ac.jp
…
Elena@phys.titech.ac.jp		axion.phys.titech.ac.jp
…
cocoa@phys.titech.ac.jp		axion.phys.titech.ac.jp

なものがあると

fukachan%phys.titech.ac.jp@axion.phys.titech.ac.jp
Elena%phys.titech.ac.jp@axion.phys.titech.ac.jp
cocoa%phys.titech.ac.jp@axion.phys.titech.ac.jp

のように渡されてaxion.phys.titech.ac.jpまで一通にまとめられて来て
axion.phys.titech.ac.jpで3通にばらけます。
パケットの数もサーバの負担も軽くなるのでもしリレーしていいっていう許可
が得られればどこかでリレーサーバーを使えるといいですね。

#注意:RFCに従うなら、% ではなく : を使った形が正しい。
%式制御は RFCにはないが、これで動くという類のものです。(see rfc821)


.S	activesファイルによるリレー (sendmail 8.x) 捕捉
.key	リレー

1.3.2 からは内部表現が拡張性のため違う形になっています。が、この章の内
容は依然として有効です。内部で古いフォーマットも自動的に
NEW FORMAT に自動変換して解釈しています。気にしないで下さい:-)

NEW FORMATでは

fukachan@phys.titech.ac.jp	r=axion.phys.titech.ac.jp m=1u 
#意味:axion をリレーサーバとし、まとめおくりは一時間おきにPLAINで


.S	activesファイルによるリレー (sendmail 5.x)

fukachan@phys.titech.ac.jp	axion.phys.titech.ac.jp
Elena@phys.titech.ac.jp		axion.phys.titech.ac.jp
cocoa@phys.titech.ac.jp		axion.phys.titech.ac.jp

↑このように順番に並んでいないと一通になってくれませんので注意。
それ以外は8.xの時と一緒です。


.S	同じmxについて
.key	mx

sendmail 8.xではCHANGES-R5-R8にあるとおり↓

   For example, if two sites ``foo.com'' and ``bar.com'' are both
   served by UUNET, they will have the same set of MX hosts and will
   be sent in one transaction.  UUNET will then split the message

一通で送られます。ばらばらの順番でも大丈夫。

sendmail 5.xでは@.*の部分が厳密に同じで、さらにちゃんと並んで書いてあ
れば

	fukachan@phys.titech.ac.jp	
	Elena@phys.titech.ac.jp	
	cocoa@phys.titech.ac.jp	

一通にまとめられます。

.S	MCI Cache

TCP Connection Cache の基本的なアイデアは TCP Connection 自体のコスト
の高さです。

もともとの sendmail は

	for (…おくるべきホストのリスト…) ｛
		ソケット、コネクト、通信、おしまひ
	｝

を一つ一つおこないます。これだと 通信が遅いだろうが、なんだろうが、
TIMEOUT か error が起こるまで長い間無駄な配送がありえます。

sendmail 8.7 では標準装備ですが、いまは
＃旧もとのりさんのWIDEぱっち ってやつです

	for (…おくるべきホストのリスト…) ｛
		ソケット１
		ソケット２
		…

		じゅんぐりにまわしていって、
		通信がしやすい connection へ優先的に
		通信、（…おしまひ）

		………
	｝
	＃ちょっと、簡単化し過ぎかな↑

のように、さっさと送ることが可能なホストへどんどん送って、駄目なところ
は駄目なままです。どうしてもだめなら、最後は queue up されて、次回30分
後とかに retry です。

そういう意味で、MCI CACHE は多いと だめなホストが2、3個ならかなり理想
的な速度で配送できるでしょう。もし、MCI_CACHE が2個で、2個だめなホスト
があると、そこでしばらくつかえてしまうので、遅くなってしまい R５ のよ
うになってしまうと。

そういう意味で MCI CACHE は多ければ多いほどよさそうに見えますが、やり
すぎると 今度はカーネルと折り合いがつかなくなるので、まぁ数個が妥当な
数字なのでしょうね。

○ １つのメールは常に１か所づつ配送されるのでしょうか？

これは カーネルがある時点ではかならず CurrentProcess を実行しているの
だから、YES です。ただ 通信はしていなくても Connection 自体は OkN 
の N 個(MAX) ACTIVE なままです（netstat でみえるもの）

これにさらに MX Cache 等が組合わさって、R８はR５にくらべ非常に高速化さ
れましたね。


.# $Id$
.# Copyright (C) 1993-1996 fukachan@phys.titech.ac.jp
.# Copyright (C) 1996      fukachan@sapporo.iij.ad.jp
.# fml is free software distributed under the terms of the GNU General
.# Public License. see the file COPYING for more details.
