.# CAUTION:
.# FML 2.2.1 make smtp.wix to be SMPT protocol overview and
.# move the old smtp.wix content to delivery.wix
.# Also FML internals this SMTP overview.
.#
.n	smtp
.C	Simple Mail Transfer Protocol
=E.C	Simple Mail Transfer Protocol

配送効率についての考察
=E
Discussion On Delivery Efficiency

.S	配送プロセスの律速段階とは
=E.S	Blocking Stage Of Delivery Process
.k	配送プロセスの律速段階

律速段階はやっぱり sendmailの配送プロセスそのものでしょう。この部分の 
overhead は R5 にくらべ R8 では非常に改善されましたがそれでもかなりの 
overhead があります。single thread であることが最大の要因の一つです。
並列度をあげるためには、SMTP connection や DNS query を並列化しないと
いけません。高速配送には例えば smtpfeed を利用して下さい:)
qmail vs smtpfeed: 本当に複数のプロセスを立ち上げるという暴挙をやると 
qmail になります;_;理論の上ではマシンの負荷は圧倒的に違うはずですが、
配送するアドレス分布のスペクトルが白色雑音状態なら配送時間はあまり違わ
ないように振舞うでしょうね。
=E
The cost of delivery depends on the cost of SMTP connections. To
accelerate each action e.g. DNS, SMTP sessions need to run parallelly
and simultaneously. For example it is good to use "smtpfeed" for
acceleration of delivery. qmail forks plural processes and run
simultaneously ;_;

逆にいえば fml 自体を tuning して速度を例えば 0.1 sec 上げても ML の配
送プロセスには何のメリットも生じないということでもあります。基本的には
MTAのチューンや機能の並列化を先に考えるべきです。
=E
The tuning of fml.pl codes cannot contribute the delivery acceleration
since delivery speeds are much slower than fml processing time scale.
To accelerate delivery, we can consider a few conditions:

１	十分なパワーのマシンで十分な file descriptor や 
	多くの process が走っても大丈夫であれば、
	複数の sendmail を起動して配送を試みる。
	この場合ちゃんと Load Average と sendmail.cf を tune する
	必要があります。人それを qmail と呼ぶという話もあります(苦笑)
=E
1	plural MTA running on one host. fml.pl uses them simultaneously.
	If the host is enough tough, it is O.K. It is the logic of qmail:)
	
２	非力でも複数のマシンが用意できるなら複数のマシンでパラレルに実行
=E
2	uses plural MTA on different hosts. 
	This works even though hosts are delicate.

３	リレーサーバを用意する。例えば東京方面、関西方面のように分けて
	一回そのリレーサーバに投げて、そこから再配送をする。
=E
3	prepare relay servers, a variation of case 2. 
	This case assumes one smtp session transports a pack of
	plural recipients e.g. one smtp session for a region.

ケース1、2は fml の $MCI_* 変数群がそれを可能にします。
=E
FML prepares variables $MCI_* to use plural MTA for one article.

ケース3のリレーサーバは各ユーザごとに”管理者”が設定できます。ここで
考えるべきこととしてリレーサーバは相手のマシンに負荷をかけることに注意
しなくてはなりません。またネットワークトポロジーを考慮の上決めるべきで
す。そして現在ではSPAM不正中継のため普通リレーはできないので特定のホス
トからのリレーだけはあけてもらうなどの設定変更も必要なことにも注意して
下さい。
=E
Today MTA rejects a relay against UCE(SPAM) illegal relay. If you use
relay server, you need to reconfigure MTA's on relay machines.

なお $DEFAULT_RELAY_SERVER が定義されている場合は強制的に全てのメールを
=E
You can use $DEFAULT_RELAY_SERVER as a default relay server. fml.pl
sends mail to deliver to the default relay server. The server
delivers it.

	$DEFAULT_RELAY_SERVER
.k	$DEFAULT_RELAY_SERVER

で定義されたリレーサーバへ投げそのサーバに配送してもらうということもで
きます。
.xref	$DEFAULT_RELAY_SERVER

qmail というひたすら配送プロセスを fork() しまくって、何も考えずにばん
ばん投げるMTAがあります。そういう配送の仕方でバックボーンならいいと思
いますが、細い線のサイトにばんばん投げ付けられてしまうようになったら最
低ですよね？世の中どこも線が太いなんていう仮定は誤りですから。
.url	http://www.qmail.org/

.S	複数のマシンの sendmail を使ってパラレルに送信
=E.S	Use Plural Mta'S On Plural Hosts
.k	$HOSTS
.k	@HOSTS
.k	@HOST(@HOSTSの旧変数名)

複数の(sendmailの走っている)マシン(非常時のセカンダリも含む)
=E
To use plural MTA on plural hosts (N hosts), set the number of hosts
in

	$MCI_SMTP_HOSTS = N;

で指定されたＮ台のマシンを配列 @HOSTS で指定する
=E
and configure an array @HOSTS filled with at least N hostnames.

   @HOSTS = (machine-1.domain, machine-2.domain, machine-3.domain, ...);

$HOST と @HOSTS で与えられる N個 のマシンの sendmail をパラレルに使っ
て(理論上での限界は)N倍配送を高速化する。
＃ $HOST も使われてしまうのは、もともと @HOSTS はセカンダリだったから
＃ です(歴史的に)。
=E
fml.pl uses MTA's on $HOST and @HOSTS in delivery.

もし、指定したサーバ数が N 個に足りない場合は、$HOST が何度も使われま
す。Nは理論上 int と同じだろうが、普通は netmask できまるわな(笑)でも、
他のドメインでも使えるから、int までいく(理屈、理屈)
＃とくに actives の最後の方の人はうれしい
=E
If the total number of $HOST and @HOSTS < N, fml.pl uses $HOST again
and again. This technique is used as a secondary server in delivery.
When you setup @HOSTS and unset $MCI_SMTP_HOSTS, fml.pl uses $HOST in
usual, but @HOSTS if $HOST is down.

.S	VERPs

See .ptr{VERP}. 

.# $Id$
.# Copyright (C) 1993-1999 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1999 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
