.C	各種ユーザ用ユーティリティ等 (bin/, lib/Utilities/ ...)
=E.C	Several Utilities (bin/, lib/Utilities/ ...)
.n	uip
.l	uip

ここでは bin/ 以下と contrib/Utilities/ 以下の階層で提供しているプログ
ラムについて解説します。あったら便利かもしれないというプログラムです。
使い方について理解している必要があるわけではありません。
=E
In this chapter we describe utility programs under bin/ and
contrib/Utilities/.

.S 	analyze_mail_error.pl (replaced to libexec/mead.pl)
.k 	analyze_mail_error.pl
.k	analyze_mail_error.sh 
.l 	analyze_mail_error.pl
.l	analyze_mail_error.sh 

use libexec/mead.pl.

.S	アーカイブの作成 (bin/Archive.pl bin/Archive.sh)
=E.S	Archive Generator
.l	bin/Archive.pl
.l	bin/Archive.sh
.k	Archive.pl
.k	Archive.sh
.xref	Archive.pl

アーカイブの節を参照 (.ptr{archive})
=E
Please see the chapter of "archive" (.ptr{archive}).

.S	base64decode.pl base64encode.pl
.l	base64decode.pl
.l	base64encode.pl
.k	base64decode.pl
.k	base64encode.pl
.k	bin/base64decode.pl
.k	bin/base64encode.pl

BASE64 encoder and decoder. A part of library uses this.

.S	cron (bin/cron.pl)
.l	bin/cron.pl
.k	cron.pl
.xref	cron

Vixie Cron (4.4BSD の cron) と compatible な cron もどき(.ptr{cron}).
=E
cron is a tiny program which is almost compatible of Vixie Cron.
Please see cron chapter (.ptr{cron}).

.S	プログラムをデーモン化して実行 (bin/daemon.pl)
=E.S	Daemon-ize programs
.l	bin/daemon.pl
.k	daemon.pl
.xref	cron

例：
=E
Example:

	% bin/daemon.pl cron.pl $PWD

cron.pl をデーモン化して実行する。ようは次のプログラムの perl version 
です。おそらくBSDでしか動かないだろう。
=E
to make cron.pl a daemon. perl version of the following C program.
This may work on BSD's.

.q
#include <stdio.h>
#include <sys/ioctl.h>
#include <sgtty.h>
#include <sys/file.h>

void usage()
{
  char *string="USAGE: targetprogram";
  fputs(string,stderr);
  exit(0);
}

main(argc, argv)
     int argc;
     char **argv;
{
  int f;

  f = open( "/dev/tty", O_RDWR, 0);
  if( -1 == ioctl(f ,TIOCNOTTY, NULL))
    exit(1);
  close(f);
  
  if( argc > 1 )
    execvp(*(++argv), argv);
  else
    usage();

  exit(0);
}
.~q

.S	daily (日々のログ解析)
=E.S	daily, log analyzer 
.l	bin/daily.pl
.l	etc/daily.ignore
.k	daily.pl
.k	daily.ignore

	% bin/daily.pl -f etc/daily.ignore log

は log ファイル（複数も可）を解析しログの中で普通じゃない行をOUTPUTし
ます。どういう行を正常の動作とみなして無視するかは
=E
which shows ambiguous yesterday lines in the log file($LOGFILE).

	/usr/local/fml/etc/daily.ignore
	(FMLのインストール先/etc/daily.ignore)
=E
	/usr/local/fml/etc/daily.ignore
	("FML installed directory"/etc/daily.ignore)

というファイルに入っています。各行が無視するキーワードです。増やすなら
足せばいいし減らすなら切ってしまえば良いでしょう。毎朝 cron で実行する
とよいです。
=E
determines which lines daily.pl ignores. This file contains key
phrases regarded as valid in the context of FML operations. We
recommend you run daily.pl and check the output. If it has superfluous
lines, you add needless phrase patterns to "daily.ignore". It is good
to run daily.pl each morning by cron.

	daily.pl [-hd] [-f patfile] [-t trap_patfile] [-p days]

	-h        this message
	-d        debug mode

	-f file   pattern file to ignore
	-t file   pattern file to trap (evaluated before ignore list)
	-p days   scan at which day (default is 1, that is "yesterday")

Example: for elena ML (/var/spool/ml/elena)

[$HOME/sbin/daily.sh]

	#!/bin/sh
	/usr/local/fml/bin/daily.pl -f $HOME/etc/daily.ignore \
		-t $HOME/etc/daily.trap /var/spool/ml/elena/log

[crontab]
0 5 * * * /bin/sh $HOME/sbin/daily.sh


.S	DNS のチェック(bin/dns_check.pl)
=E.S	Checking DNS
.l	bin/dns_check.pl
.k	dns_check.pl

DNS のテストをする、ちょっとしたプログラム。パッケージを広げた場所で
=E
A small program to check DNS values.

	% make dns_check

とするとこのプログラムを実行する。
=E
runs this program.

.S	emumail.pl
.k	emumail.pl
.l	bin/emumail.pl

ヘッダを生成して sendmail から fml.pl への入力をコマンドラインで
emulation するためのもの。debug に使うだけ(なくてもいいけど、あるとちょっ
と便利？)。
=E
Emulation program of output from sendmail into fml.pl which is for
debug only.

"makefml test <ML>" が同じことをしてくれます。こっちの方が便利だと思う。
=E
"makefml test <ML>" is the same function and more useful I believe.

.S	EXPIRE を実行するプログラムの例 (bin/expire.pl)
=E.S	Expire
.xref	bin/expire.pl

Please see the chapter .ptr{expire}.

.S	WIX言語フォーマッタ (bin/fwix.pl)
=E.S	WIX Language Formatter  (bin/fwix.pl)
.k	fwix.pl
.l	bin/fwix.pl
.xref	WIX

WIX言語のフォーマッタ 
=E
Please see the chapter .ptr{WIX}

.S	gen_summary.pl (summary ファイルを再生成する)
=E.S	gen_summary.pl (summary re-creator)
.k	gen_summary.pl
.l	bin/gen_summary.pl

ML の spool から summary を再生成する。(e.g. summary が壊れた時)
=E
When summary file is broken, you can re-create summary file with this
program from ML articles in the spool.

in fml-support ML's Count: 02393

   gen_summary.pl -I /usr/local/fml めーりんぐりすとのDIR/spool > summary
=E
   gen_summary.pl -I /usr/local/fml Mailing List's spool > summary

        -I lib*.pl のある場所（必須）
        -m オプションで MIME Decoding もします。
=E
	-I lib*.pl locations (required)
	-m MIME decoding

.S	ローカルテスト (sbin/localtest.pl)
=E.S	localtest (sbin/localtest.pl)
.l	sbin/localtest.pl
.k	localtest.pl

メッセージIDチェックをチェックしている都合上、これを使わずにローカルテ
ストをするとメールがループしているとみなしてしまいます。そのためこのよ
うな wrapper が必要になります。あるファイル TEXT を入力するメールの見
本として使いたい時
=E
To inject TEXT as mail input into fml.pl, you cannot test in the
following:

	cat TEXT | perl fml.pl $PWD 

のようにはできません。Message-Id を一通ごとに変えて突っ込むために 
localtest.pl を wrapper として利用できます。
=E
since FML checks Message-Id duplication. Hence you should do

	bin/localtest.pl -f < TEXT | perl fml.pl $PWD 

のようにしないとテストできません。

でも "makefml test <ML>" が同じことをしてくれます。こっちの方が便利だ
と思う。
=E
"makefml test <ML>" is the same function and more useful I believe.


.S	bin/msend_master.sh

example of control over multiple msending processes.
See also INSTALL file.


.S	bin/more_secure_cf.pl

a real program of "make secure" operation.



.S	Multipart Canceler Filter (bin/multipart.pl)
.l	bin/multipart.pl
.k	multipart.pl

Author: Yuao TANIGAWA <yuao@infonia.or.jp>

なお makefml で作るとサンプルに見本がついています。
=E
You can use "| multipart.pl | fml.pl" in include file.
This cancels out multipart mails to inject it to fml.pl since 
commands in multipart mails could fail.

.q
From:    Yuao TANIGAWA <yuao@infonia.or.jp>
Subject: Multipart Canceler
To:      fml-support@axion.phys.titech.ac.jp (fml supporting ML)
Date:    Fri, 10 Jan 1997 21:09:03 +0200
X-Mail-Count: 01937

  最近、ML に Multipart/Mixed とか Multipart/Alternative とかの
形式で、メールを送ってくる人がいるので（特にコマンドの処理がで
きないので）、Multipart Canceler なるフィルタを作ってみました。
  Multipart/Mixed の場合は、# End of Document No.??? でつなげる。
Multipart/Alternative の場合は、最初の文書以外は捨てる。...と
いうことをしています。
  使い方は、fml を起動するのに "|/fmlpath/fml.pl ..." と記述し
ているところを "|/scriptpath/multipart.pl|/fmlpath/fml.pl ..."
などと記述すれば機能します。
.~q


.S	NEWSYSLOG SHELL VERSION (bin/newsyslog.sh)
.xref	newsyslog
.l	bin/newsyslog.sh
.k	newsyslog.sh

libnewsyslog.pl がなかった時代の産物。
=E
Inheritance in the age without libnewsyslog.pl


.S	SMTPライブラリを使った /usr/bin/Mail の emulation (bin/pmail.pl)
=E.S	A demo of SMTP library
.l	bin/pmail.pl
.k	pmail.pl

単なる書き方の例
=E
A demo.

.S	パスワードの初期化と変更 (bin/passwd.pl)
=E.S	initialize and change password  (bin/passwd.pl)
.l	bin/passwd.pl
.k	passwd.pl
.xref REMOTE-ADMINISTRATION

現在では makefml passwd ML を使う方が便利です。
=E
Please use "makefml passwd ML ...", which is more useful today.

fml でのパスワードは通常 crypt された形で保存されます(オプションでMD5
も可能 .ptr{MD5})。つまり UNIX の /etc/passwd と同じようにです。
=E
FML saves crypted passwords for remote administration authentication
in $DIR/etc/passwd. So you should use a special program to encrypt
passwords for initialization and change.

bin/passwd.pl を使って下さい。使い方は、

 passwd.pl [-i] [-f password-file] user password

    -i で user のパスワードを password で初期化
    -f etc/passwd に代わるパスワードファイルを指定
=E
   -i initialize
   -f password file	 

例：
=E
Example:

	% passwd.pl -i fukachan@phys.titech.ac.jp 

とユーザ名つきで入れると
=E
shows

	Address: fukachan@phys.titech.ac.jp 
	Password: 

となるのでパスワードを入れて下さい。
=E
Please input your password. The password file contains

	fukachan@phys.titech.ac.jp 32ZrV/XvYj1kY

のように etc/passwd が初期化される。ここの32ZrV/XvYj1kY は入力したパス
ワードを暗号化した結果です。
=E
where this "32ZrV/XvYj1kY" is a crypted password.

この etc/passwd は

	ＭＬのリモート管理(admin approve コマンド)
	moderated モード (TYPE I)

等で使われます。
.xref REMOTE-ADMINISTRATION

.S	POP経由でスプールへ、POPを使ってＭＬを実行 (bin/popfml.pl)
=E.S	get mails via POP3
.k	bin/pop2recv.pl
.k	bin/inc_via_pop.pl
.k	pop2recv.pl
.k	inc_via_pop.pl
.xref	popfml cron fml_local

libexec/popfml.pl がこの目的の専用プログラムです。
.xref	popfml
=E
This gets mails from a mail server via POP3 and injects them into
fml.pl and runs ML. The real program is libexec/popfml.pl, others is a
link to it.

注意: inc_via_pop.pl は昔の名前(今はリンク)

.S	与えられたファイルを分割して送り出すプログラム (bin/split_and_msend.pl)
=E.S	split and send files (bin/split_and_msend.pl)
.l	bin/split_and_msend.pl
.k	split_and_msend.pl

与えられたファイルを分割して送り出すプログラムを太古の昔使ってた名残。
事実上使ってない。fml 2.x では OBSOLETE のため無保証 or 単なるおまけ。 
=E
Obsolete.

.S	SPOOL -> HTML Hierarchy (bin/spool2html.pl)
.l	spool2html.pl
.k	bin/spool2html.pl
.k	spool2html.pl

ターゲットとなるdirectory中のメールをHTML化します。MLのホームで
実行するか、それを-D オプションで指定しなければいけません。
=E
make HTML style articles of ML. In default this generates index.html,
thread.html (thread) and each article.html. Please run this program in
ML's HOME DIRECTORY ($DIR) or define -D $DIR.

SYNOPSIS:

  spool2html.pl [-h] [-I INC] [-f cf] [-d HTML_DIR] [-t TYPE] [-D DIR] SPOOL

    -h    this message
    -d    $HTML_DIR
    -f    cf (例えばMLの設定ファイルconfig.phを評価する）
    -t    number of day ($HTML_INDEX_UNIT)
    -D    $DIR (fml の $DIR)
    -I    @INC に INCLUDE PATH を付け加える
=E
    -h    this message
    -d    $HTML_DIR
    -f    config.ph location
    -t    number of day ($HTML_INDEX_UNIT)
    -D    $DIR
    -I    path; add path to @INC
    
    SPOOL $SPOOL_DIR

Example:
   % cd /var/spool/ml/elena
   % spool2html.pl -I /usr/local/fml -d /htdocs /var/spool/ml/elena/spool

ターゲット SPOOL 中のメールを HTML化し $HTML_DIR 中に変換します。
注意: 2.1GAMMA#103 以降はデフォールトでスレッド処理も実行します。 

変換の仕方については SyncHtml (.ptr{SyncHtml}) を参照してください。

MLなら config.ph を評価して実行するので -f config.ph で呼び出してもOK
です。

なお -D で設定していない場合 $DIR には $PWD が設定されています。
config.ph を評価する場合には気をつけて下さい。
=E
Attention: Without -D, $DIR == $PWD.

.S	MH scan.format (lib/Utilities/scan.format)
.l	scan.format 
.k	scan.format 
.k	lib/Utilities/scan.format

lib/Utilities/scan.format を自分の ~/Mail にいれると
=E
Please input lib/Utilities/scan.format to your ~/Mail, MH scan shows
the following

  65 -06/14 Horaki Hikari fml-su Subject uja  <<うじゃ…
のような表示になります。    ↑ここが X-ML-Name: の部分の６文字
=E
  65 -06/14 Horaki Hikari fml-su Subject uja  <<UJA
     Date:  From:         X-ML-Name: Subject:

MHは暗号のようですが、ポイントは今レジスターに何が入っているかと、
=E
It must be useful. You can write MH scan.format if you understand

	if	%<
	elif	%?
	else	%|
	fi	%>

が理解できれば scan.format は書けます。
=E
Statement Examples:

X-ML-Name: とかと名前が違うフィールドは ↓この辺を

%?{X-Mailinglist-Name}%6{X-Mailinglist-Name}\

X-ML-Name: とかがないＭＬは、この辺↓のマッチングパターンのエントリを
適当に増やして、適当に増やしてください。
例:

%?(match NetBSD.ORG)NetBSD\

.S	mgetで得たファイルをmh以外で読む時 (lib/Utilities/packmbox.pl)
=E.S	to make articles by "mget" mbox style (lib/Utilities/packmbox.pl)
.l	packmbox.pl
.k	packmbox.pl

packmbox.pl	(by ukai@hplj.hpl.hp.com)

	1,2,3,...のように並んでいるファイルをmbox形式のファイ
	ルにするスクリプト

	つまり mget してきたファイルたちをMHでない人はmbox
	にした後で好きなインターフェイスをつかえばよいように

lib/Utilities/packmbox.pl を使って、
=E
By lib/Utilities/packmbox.pl, you do to make mbox style file. 

	(cd spool; packmbox.pl ) > ~/mbox

として、mbox をつくれば、これにたいして、/bin/Mail なり Rmail なりを使
うことができて便利でしょう。MH なら例えば mbox を作った後
=E
You can incorporate mails to your ~/Mail/inbox if with MH

	inc -file ~/mbox -truncate 

のようにすれば、mbox から inbox へ入ります。

.S	RMAILファイルからfmlへのメッセージの取込み (lib/Utilities/Rmail2fml.pl)
=E.S	RMAIL -> fml.pl
.l	Rmail2fml.pl
.k	Rmail2fml.pl

Rmail2fml.pl	(yamane@ngi.co.jp)

	RMAILファイルから fmlへのメッセージの取込みプログラム
=E
	RMAIL file -> fml.pl

.S	宇宙歴関係
=E.S	Stardate (STAR TREK)
.l	my-mh-post
.l	my-mh-post.pl
.l	stardate.el
.k	my-mh-post
.k	my-mh-post.pl
.k	stardate.el

MHのpost部分をいれかえて、  
=E
Add a special header field Stardate which is STAR TREK's date:-).

	X-Stardate: [-31]8122.12

のような宇宙歴をヘッダにつける。

post を入れ換えるべき 
=E
If you use MH, you can replace MH post by my-mh-post.pl (perl) or
my-mh-post(shell) to add Stardate in your mail when sending.

	SHELL VERSION が my-mh-post
	PERL  VERSION が my-mh-post.pl

libstardate.pl はコマンドラインで呼ぶと宇宙歴そのものをOUTPUTします。
これを使って、mh-e レベルで宇宙歴をヘッダにつけるEmacs Lisp が 
stardate.el です。
=E
libstardate.pl is stardate library.

注意: 宇宙歴には複数の解釈があります。そのうちの一つを勝手に選んで使っ
ています。
=E
* This algorithm is one of stardate calculation. Several
interpretation are available for stardate, but I choice one of them.

.S	weekend-msend.sh
.l	weekend-msend
.l	bin/weekend-msend.sh
.k	weekend-msend.sh

設定ファイルを別に持ち msend.pl を一週間に一度起動するようにすれば一週
間に一度まとめ送りするようになります。
それを一週間に一度送るための script の例です。
=E
FML drives Matomeokuri / Digest in the interval 24 hours, so FML does
not implement sending once in a week.  To send articles in a week once
in a week, you run weekend-msend.sh once in a week where you set m=1u
as a digest parameter. 

m=1u みたいに常に送りつけるように設定しておいて送り時間は cron でコン
トロールするようにします。もっともコマンドでコントロールできません。管
理者が手で設定すると仮定しています。
＃まぁそれ用の別のアドレス作ってしまえばできますけどね
=E
In default you cannot configure FML to control weekly digest
configurations for each address by remote (e.g. command).
# Of course, you can hack FML.

要点は
=E
The heart of weekly-msend is 

        MSEND_RC=$DIR/weekend/msendrc
        ACTIVE_LIST=$DIR/weekend/actives
        MEMBER_LIST=$DIR/weekend/members

で ACTIVE_LIST に 
=E
and "address option" in actives or members (depended on modes).  You
require "1" of "m=1" as an option since we require msend.pl works
always.

	address m=1オプション

	例:
	address m=1u

とか書いておくという部分です。

.S	X-Stardate: をつける(mh-e)
=E.S	Append X-Stardate: (Emacs Lisp)
.l	x-stardate
.k	STAR TREK
.k	stardate.el
.xref	stardate.el

contrib/Utilities/stardate.el を load してください
＃ emacs 19 でなきゃかきかえないとだめ
=E
Please load contrib/Utilities/stardate.el and add the following codes
to your ~/.emacs. mh-comp generates draft buffer with X-Stardate:.  I
check this code on mule-2.3.

たとえば、.emacs に

(load-library "stardate")
(setq startrek-stardate-process "/some-directory-path/libstardate.pl")

とすると mh-comp の draft buffer をつくるときに X-Stardate: をつけてく
れます(mule-2.3で確認)。

.# $Id$
.# Copyright (C) 1993-1999 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1999 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
