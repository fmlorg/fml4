~.C	FRED （汎関数-正規表現-微分）ライブラリ

.S	Funtional Regular Expressional Derivative

正規表現にマッチするか否かを調べパターンにマッチした時およびしない時に
それぞれ定義された関数を実行します。fred は

	項目	値

の組、たとえば 投票や アンケート といった一般的に良くありうる形式につ
いて当てはまるすべてのものに適用可能です。

例：
	ADDRESS:		fukachan@sapporo.iij.ad.jp
	FAVORITE_ACTORESS:	西原久美子
	FAVORITE_ACTORESS:	こおろぎさとみ
	FAVORITE_ACTORESS:	荘真由美
	FAVORITE_ACTORESS:	矢島晶子
	COMMENT:		うじゃ
				うじゃうじゃ

投票システム lib/Elena (VotingSystem) というのが lib/ の下にありますが、
これをさらに汎用的に拡張しなおしたものと考えてよいでしょう。


.S	$FRED_CF
.k	$FRED_CF

FRED ライブラリは $FRED_CF 変数で定義された設定ファイルを読み、これに
従い作動します。


.S	FRED Configuration file の例：

   #CONFIG:
   
   # DEBUG
   
   TAB
   #RFC822
   
   CATCH \S+ BODY
   
   INC     /usr/libexec/fml
   INCLUDE myfred.pl
   
   #BODY:
   
   #
   ### DEFAULT	*	&Nothing	&Warn	###
   # VARIABLE	IF				THEN		ELSE	
   # Domain:		[0-9A-Z_\-]+\.[0-9A-Z_\-]+\.[0-9A-Z_\-]+
   #
   # FIELD SYNTAX:
   # ENTRY	PATTERN(IF)	FUNCTION(THEN)	FUNCTION(ELSE)
   
   NAME		(\S+)		AddAL
   SPOOL	(\S+)		AddAL
   MAIL		(\S+)		AddAL


解説：

行の先頭が "#" で始まる行はコメントです。しかしながら

	#PART: 

というシンタックスは例外で、"PART"部の始まりを宣言しています。
＃汎用性を重視したため変な宣言文になってしまっています _o_ 

コメントは 

	# 空白 コメント

の形をとると良いでしょう。

PART には ヘッダ、ボディ といったものが来ます。
というのは、普通与えられるデータはいくつかの部分からなります。
例えばメールはヘッダ部とボディ部からなるわけで、自然なメールの構造の分
類は #HEADER: と #BODY: からなると考えることでしょう。

またボディ部が複数のパートからなることも考えられます。
つまり #BODY1:, #BODY2:, #BODY3: … のようにです。
目印が存在すれば ボディ部の細かい構造を反映させることもできます。
例えばアンケートでは、メールのボディの中にさらに、

	ユーザー情報
	…についてのアンケート
	…についてのアンケート
	…

のような構造をもつでしょう。
これらの目印と特定のPART部の間の対応関係は CATCH 構文で定義します。

例外として、#BODY1:, #BODY2:, #BODY3: のように複数のブロックからなる場
合にキーワードが同じもので始まる場合、

例えば
	---------------------------------------------
	UJA1:
		…
	---------------------------------------------
	UJA2:
		…
	---------------------------------------------
	UJA3:
		…

のような形式をとる場合、

	CATCH \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- BODY

で定義された CATCH 構文はパターンマッチするたびに自動的にインクリメントし
各ブロックを	BODY1	BODY2	BODY3 … のデータ構造としてとらえます。


基本的な形としては、例えばメールは ヘッダとボディからなります。
この場合自然な config は、

	   #CONFIG:
			
		全体に共通する設定
		例えば デバッグモードで走るとか、
		INPUT される データの形式の定義とか…
		
	   #HEADER:
		
		定義（たぶんヘッダはあまり使わないとおもう）
		
	   #BODY:
		
		「どういうパターンにマッチしたら、何をする」
		を定義する。
		
#BODY: でのパターンマッチは

   変数のラベル パターン 関数（マッチした時） 関数（マッチしない時）

のような４つ組（最低２つ）の定義をすることで行ないます。


.S	全体に共通する設定（#CONFIG: 部）

基本設定を行ないます。

   DEBUG	デバッグモードに入る。


   TAB		はINPUTされるデータが
		TAB で区切られた項目である と仮定されます。

	例：

	ADDRESS	fukachan@sapporo.iij.ad.jp


   RFC822	はINPUTされるデータが 
			FIELD: VALUE
		の形であると仮定します。
		VALUEはRFC822 folding rule で書かれていれば	
		複数行のデータを扱えます(要点)。

	例：
	From:	fukachan@sapporo.iij.ad.jp
	Cc:	fukachan@sapporo.iij.ad.jp,
		Elena@phys.titech.ac.jp


   INC     directory

		directory を perl のサーチパスリスト（@INC）に加えます。

   INCLUDE file

		file をインクルードします。
		例えば fred で使う関数を別のファイルで保守管理すると良
		いでしょう。
		@INC のリストにしたがって
		サーチされるので、自分の directory にある場合は INC 
		で付け加えておくと良い。


   CATCH pattern part

		pattern にマッチする行を見つけると
		「 part 部分に入った」と見なし、part 部のデータ形式として
		宣言（下述）されているフォーマットに従い、
		パターンマッチとそれに bind された関数の実行を行ないます。

	例：
		CATCH ADDRESS: BODY	

	ADDRESS: で始まる部分を見つけたらそれ以降を本文（BODY パート）
	とみなす。
	

.S	#BODY: 部

基本パターン   

   名前 パターン マッチしたら実行する関数 マッチしなかった時実行する関数

の組からなります。後ろの２つの関数部分は１つでもいいし、両方省略もでき
ます。その場合は パターンの形が正しいか否か？のみをチェックしているこ
とになります。


例：
   
   NAME		(\S+)		AddAL
   SPOOL	(\S+)		AddAL
   MAIL		(\S+)		AddAL


パターンマッチした場合 &AddAL を呼び出します。&AddAL等の呼び出される関
数の引数は固定されていて、

	$ok = 'AddAL';
	&$ok(*key, *value, *pat, *fred, *opt, *mesg);

のような関数呼び出しをされます。

	$key	フィールド	e.g. ADDR:
	$value	フィールドの値	e.g. fukachan@sapporo.iij.ad.jp
	%fred	$key $value のセット
	$pat	ADDR: に期待するパターン e.g. fukachan@\S+
	@opt	$pat にマッチした $1, $2 等のリスト
	$mesg	AddAL から返ってくる答えを格納する場所

例：

sub AddAL
{
    local(*key, *value, *pat, *fred, *opt) = @_;

    print "push [$value] for key=[$key]\n" if $debug;
    $C{$key} .= "$value\n";
}


sub Summary
{
    print "Summary Information:\n\n";
    while (($k, $v) = each %C) { 
	print "KEYWORD ($k) :: ENTRY {\n$v\n}\n\n";
    }
}

sub DomainCheck
{
    local(*key, *value, *pat, *fred, *opt, *mesg) = @_;

    if ($value !~ /^[\w\-]+\.\w\w.JP$/i) {
	$mesg .= "エラー：ドメイン名の階層が３段でない\n";
	return;
    }

	…
}


.# $Id$
.# Copyright (C) 1993-1996 fukachan@phys.titech.ac.jp
.# Copyright (C) 1996      fukachan@sapporo.iij.ad.jp
.# fml is free software distributed under the terms of the GNU General
.# Public License. see the file COPYING for more details.
