.n	functions
.C	ライブラリ関数
=E.C	Library Functions
.k	ライブラリ関数

ここでは、カスタマイズに役に立ちそうなライブラリ関数の説明をします。
とりあえずいきあたりばったりに選んで説明:-)
=E
I explain useful (I believe) library functions in this chapter.
Anyway here we go though choice depends on me.  The choice must be
random and does not cover the whole ;-D.

.S	daemon (libutils.pl)
.k	daemon()
.k	setsid()

(4.4BSDにならって) 今のプロセスをデーモンにします。
＃4.4BSDのdaemon()には引数がありますが、まだそれをEmulateしていません
=E
Let the current execution program be a daemon.

fml.pl から cron.pl を動かすんなら、これをつかうとうまくいくといいです
な:-)
＃4.3BSDでしか動作確認してないけど…
＃なにがうれしいって、mailq にのこらない:-)

本来の使い方は /dev/console とかから たちあげるときに

	&use('utils');
	&daemon;
	デーモンになってからする仕事；
=E
Example:
	&use('utils');
	&daemon;
	work under daemon mode

みたいにすると &daemon; のところでTTYを切り放しSTDIN,STDOUT,STDERRを閉
じます。
＃注意：4.4BSDの setsid()は 新しいセッションをはじめること
=E
&daemon detaches the current TTY and close STDIN,STDOUT,STDERR.

例:
=E
Example:

	$FML_EXIT_HOOK .= q#
		&use('utils');
		&daemon;
		exec("$LIBDIR/bin/cron.pl $DIR -a");
	#;

$NOT_USE_TIOCNOTTY を セットしないと、うまく daemonさんになってくれな
いかもしれませんが…
＃このへんの挙動はいまひとつわからない…
=E
You may be required to set $NOT_USE_TIOCNOTTY? This function works well
on 4.x BSD, but I don't know how it works on other OS's.

4.4BSD では setsid() ですが、そのへんの細かいところは省略…

.S	Sendmail (libsmtp.pl)
.k	Sendmail

SYNOPSIS
	&Sendmail($to, $subject, $body, @to);

	$to		送り先
	$subject	メールのsubject
	$body		メールの本文
	@to		$to 以外の複数の送り先アドレスを配列で
=E
	$to		recipient
	$subject	subject of mail to send
	$body		body of mail to send
	@to		recipients except $to 

.S	SendFile (libsmtp.pl)
.k	SendFile

SYNOPSIS
	&SendFile($to, $subject, $file, $zcat, @to);

	$to		アドレス
	$subject	メールのSubject
	$file		送るべきファイル
	$zcat		送るべきファイルがgzipしてある場合変換して送る
			1 zcatを実行
			2 uuencodeを実行
	@to		上以外の複数のアドレス
=E
	$to		recipient
	$subject	subject of mail to send
	$file		a file to send
	$zcat		conversion flag (not used)
	@to		recipients except $to 

	実際には、$zcat	@to エントリは使ってませんが…
	＃いつ、第４エントリ以降をなくすか保証しない

.S	NeonSendFile (libsmtp.pl)
.k	NeonSendFile

複数のアドレスとファイルを一辺にハンドリングし、メールで送り返すための
インターフェイス
=E
handling plural recipients and plural files to send.

SYNOPSIS
	&NeonSendFile(*to, *subject, *files);

	@to		配送したいアドレスリスト
			一人分のアドレスを $to にいれて渡してもＯＫ
	$subject	メールのSubject
	@files		送りたいファイル（複数可能）
=E
	@to		recipients (array)
	$subject	subject of mail to send
	@files		array of files to send

.S	Addr2FQDN              (fml.pl)
.k	Addr2FQDN

SYNOPSIS:
	&Addr2FQDN($addr);

もし与えられた文字列($addr)が @ を含んでいない時は 
=E
If given $addr has no '@', we convert it to

	$addr@$FQDN

に変換。@ を含んでいればそのまま返す。
=E
If $addr contains '@', return $addr.

.S	AddressMatch           (fml.pl)
.k	AddressMatch
.xref	$ADDR_CHECK_MAX

SYNOPSIS:
	&AddressMatching($addr1, $addr2)

$addr1 と $addr2 が同じものかどうか調べる。
=E
compare $addr1 and $addr2, return 1 if they are the same.
return 0 if different.

.S	MailListMemberP        (fml.pl)
.k	MailListMemberP

SYNOPSIS:
	&MailListMemberP($addr)

アドレスがメンバーファイルの候補(@MEMBER_LIST)の中にあるかどうかを調べ
る。もしあればそのファイル名を返す。
=E
search $addr in lists of member (member files are listed in
@MEMBER_LIST) and return the file name in which $addr if $addr is
found. return $NULL if fails.

.S	MailListActiveP        (fml.pl)
.k	MailListActiveP

SYNOPSIS:
	&MailListActiveP($addr)

アドレスがメンバーファイルの候補(@ACTIVE_LIST)の中にあるかどうかを調べ
る。もしあればそのファイル名を返す。
=E
search $addr in lists of active member (active member files are listed
in @ACTIVE_LIST) and return the file name in which $addr if $addr is
found.

.S	Append2                (fml.pl)
.k	Append2

SYNOPSIS:
	&Append2($string, $file)

appends $string to $file
	
.S	AutoRegist             (libutils.pl)
.k	AutoRegist

SYNOPSIS:
	&AutoRegist(*Envelope);
	&AutoRegist(*Envelope, $string);

自動登録ルーチン。明示的に

	&AutoRegist(*Envelope, 文字列);

と呼び出すことで文字列を登録すべきアドレスにすることができる
=E
Auto Registration routine. The argument is *Envelope or *Envelope and
$string. If $string is given, the routine checks $string as an input.
If not, $Envelope{'Body'} which is mail body. 

.S	ChangeMemberList       (libfml.pl)
.k	ChangeMemberList

$ADDR_CHECK_MAX(default 10) 回、アドレスチェックを厳しくしながら
&DoChangeMemberList(@_); を繰り返し適用する。つまりデフォールトでは３
段階までしかアドレスチェックをしないので
=E
Apply &DoChangeMemberList(@_) recursively up to
$ADDR_CHECK_MAX(default 10) times. It checks the given address little
by little severely. For example we check the address

	fukachan@sapporo.iij.ad.jp

の iij.ad.jp までしか比べないが、それだけでは曖昧な場合は
４段階つまり sapporo.iij.ad.jp までアドレスをチェックする。
=E
up to 3 level, that is "iij.ad.jp" in default. If both
fukachan@iij.ad.jp and fukachan@sapporo.iij.ad.jp exist in member
file, we cannot determine this mail is from which person?  Hence we
require changing the address check level dynamically. Secondary FML
checks up to 4 levels, that is "sapporo.iij.ad.jp" and matches in
exacet and return TRUE.

例:
=E
Example: a list have two similar addresses with different levels.

	fukachan@iij.ad.jp
	fukachan@sapporo.iij.ad.jp

の両方がファイル中に現れる場合。	

.S	ChangePasswd           (libcrypt.pl)
.k	ChangePasswd

SYNOPSIS:
	&ChangePasswd($PASSWD_FILE, $addr, $new)

$PASSWD_FILE 中の $addr に対してのパスワードを $new にする。
なお、この時点でパスワード認証は終っていなければならない。
=E
Change the password for the address $addr. The new password is $new
and the password file is $PASSWD_FILE.  $new is a plain password.

.S	CheckMember            (fml.pl)
.k	CheckMember

Go to .ptr{Lookup}

関数名を変更した。互換性のため残っている。
=E
obsolete. left for compatibility.

SYNOPSIS:
	 &CheckMember($addr, $list);

$list の中に $addr が現れるかどうかしらべる。
=E
Check whether $addr appears in $list or not. 1 if found, 0 if fails.

.S	CmpPasswd              (libcrypt.pl)
.k	CmpPasswd

SYNOPSIS:
	&CmpPasswd($encrypt, $plain-passwd)

etc/passwd 中の
	cryptがかかったパスワード ($encrypt)
と
	user が送り込んだ plain password ($plain-passwd)
を比較する
=E
compare encrypted password $encrypt and input plain password
$plain-passwd.

.S	CmpPasswdInFile        (libcrypt.pl)
.k	CmpPasswdInFile

SYNOPSIS:
	&CmpPasswdInFile($PASSWD_FILE, $addr, $pass)

$PASSWD_FILE 中のアドレス $addr に対しパスワード $pass で認証できるか
否か？
=E
check whether $addr with password $pass is valid in $PASWD_FILE.
If valid, $addr is authenticated.

.S	Conv2mailbox           (fml.pl)
.k	Conv2mailbox

SYNOPSIS:
    &Conv2mailbox($from, *e)

$from の中の アドレス部分（ユーザ＠ドメイン 部分）だけを取り出す。
なお *e はあってもなくてもよい。
=E
Cut out only user@domain part from given string $from.

.S	DecodeMimeStrings      (libMIME.pl)
.k	DecodeMimeStrings

SYNOPSIS:
	$s = &DecodeMimeStrings($s);

$s 中のMIME文字列を日本語へ変換する。関数の返り値が日本語化された文字
列である。
=E
Decode MIME string to Japanese and return it.

.S	Flock                  (fml.pl)
.k	Flock

SYNOPSIS:
	&Flock();

$FP_SPOOL_DIR へ対して flock(2) をかける。
=E
flock(2) to $FP_SPOOL_DIR. 

なお $Timeout{'flock'} (default 3600) 秒後 SIGALRM が fml.pl へ返るよ
うに設定している。この時 $SIG{'ALRM'} で定義された関数が実行される。
標準は &TimeOut; が実行され、fml.pl はタイムアウトエラーで終る。
=E
After $Timeout{'flock'} (default 3600) under locked, we trap signal
SIGALRM and runs &Tick. In default fml.pl exits after timeout.

.S	Ftp                    (libftp.pl)
.k	Ftp
.xref	ftp

.S	Funlock                (fml.pl)
.k	Funlock

$FP_SPOOL_DIR に対する flock(2) をはずす。
=E
unlock the lock on $FP_SPOOL_DIR. see flock(2)

.S	GetID                  (libfml.pl)
.k	GetID

SYNOPSIS:
	&GetID;

$SEQUENCE_FILE の値を返す。
=E
Return value in $SEQUENCE_FILE where the value is the last article
sequence.

.S	GetTime                (fml.pl)
.k	GetTime

SYNOPSIS:
	&GetTime;

localtime(); を実行し、フォーマットの違ういくつかの日付変数(グローバル)
を設定する。
=E
runs localtime(); and sets several global variables such as:

    $Now = sprintf("%02d/%02d/%02d %02d:%02d:%02d", 
		   $year % 100, $mon + 1, $mday, $hour, $min, $sec);
    $MailDate = sprintf("%s, %d %s %d %02d:%02d:%02d %s", 
			$WDay[$wday], $mday, $Month[$mon], 
			1900 + $year, $hour, $min, $sec, $TZone);

    $CurrentTime = sprintf("%04d%02d%02d%02d%02d", 
			   1900 + $year, $mon + 1, $mday, $hour, $min);

.S	Lock                   (fml.pl)
.l	Lock
.k	Lock

SYNOPSIS:
	&Lock;

	if $USE_FLOCK がセットされいるなら
		&Flock;
	else 
		liblock.pl で定義されている link() を使う
		UNIX V7 時代からあった懐かしいロックアルゴリズムを使う
		require liblock.pl;
		&V7Lock;

=E
	if $USE_FLOCK 
		&Flock;
	else 
		# link(2) based lock algorithm (liblock.pl)
		require liblock.pl;
		&V7Lock;

.S	Log                    (fml.pl)
.k	Log

SYNOPSIS:
	&Log($s);

$s 文字列を日付とともに $LOGFILE に書き込む。
=E
Append $s string to $LOGFILE with date.

.S	LogWEnv                (fml.pl)
.k	LogWEnv

SYNOPSIS:
	&LogWEnv($s, *e);

は
=E
&LogWEnv($s, *e); is the same as

	&Log($s)
	$e{'message'} .= "$s\n";

です。$LOGFILE への書き込みと、&Notify で返されるfml Status Reportの
内容に $s を付け加える。
=E
Both Logs $LOGFILE and the messages &Notify uses.


.S	Lookup (fml.pl)
.l	Lookup

SYNOPSIS:
	 &Lookup($addr, $list);

$list の中に $addr が現れるかどうかしらべる。
=E
Check whether $addr appears in $list or not. 1 if found, 0 if fails.	


.S	MailListActiveP	(fml.pl)
.l	MailListActiveP

SYNOPSIS:
	&MailListActiveP($address);

$address はメーリングリストのメンバーか否か？つまり認証のリストの中に
含まれているか？配送先とは限らないことに注意。返り値はそのアドレスを含
むファイル名かNULL
=E
ML member list contains $address? It return the file which contains it
or NULL if fails. 
Caution: $address is a member, so it is used in authenticaion. Whereas
this does not imply $address is a recipient in fml.


.S	MailListMemberP	(fml.pl)
.l	MailListMemberP

SYNOPSIS:
	&MailListMemberP($address);

$address はメーリングリストの配送リストに含まれているか？否か？
返り値はそのアドレスを含むファイル名かNULL
=E
$address is a recipient? This returns the file which contains it or
NULL if fails.


.S	Mesg                   (fml.pl)
.k	Mesg

SYNOPSIS:
	&Mesg(*Envelope, $s);

&Notify で返される fml Status Reportの内容へ $s を付け加える。
=E
&Notify sends a content $Envelope{'message'} to a user (From:
address). &Mesg() appends $s to $Envelope{'message'}.

	$Envelope{'message'} .= "$s\n";

.S	NewSyslog              (libnewsyslog.pl)
.k	NewSyslog
.xref	newsyslog

newsyslog(8) like function.

.S	Notify                 (fml.pl)
.k	Notify

SYNOPSIS:
	&Notify;

ようするに "fml Status report $ML_FN" を送り返している関数。
=E
Send an error, warning status report of commands mail reply.  The
content is $Envelope{'message'}.  The recipient is
$Envelope{'message:h:to'}, if not defined $Envelope{'Addr2Reply:'}.
The plural recipients is available by setting
$Envelope{'message:h:@to'}. The return mail subject is
$Envelope{'message:h:subject'}, if not defined, "fml status report
$ML_FN".

   宛先:	$Envelope{'message:h:to'} 
		もし未定義の場合は $Envelope{'Addr2Reply:'} が使われる
   宛先(複数):	$Envelope{'message:h:@to'} にアドレスリストを入れる。
   Subject:	$Envelope{'message:h:subject'}
		default は "fml Status report $ML_FN"

$PROC_GEN_INFO (default 'GenInfo') で生成されるヘルプメッセージをつけ
て、$Envelope{'message'} をユーザに送り返す。
=E
In the last of mail body, &Notify appends the buffer generated by a
function $PROC_GEN_INFO (default 'GenInfo') .

また、$Envelope{'error'} があればそれを管理者へ送る。
=E
Also &Notify the buffer $Envelope{'error'} to ML maintainers.

この時のメールの最後に現れる「さようなら」メッセージには
=E
In this mail, &Notify uses a good bye phrase and a face mark:D. You
define it by

	$GOOD_BYE_PHRASE	(good bye phrase)
	$FACE_MARK		(face mark)
.k	$GOOD_BYE_PHRASE
.k	$FACE_MARK

で変更できます。また $FACE_MARK という変数もあります（謎）

	$GOOD_BYE_PHRASE = "\tBe seeing you!   ";
	$FACE_MARK	 = "(^^)P〜";

例2:	Episode 42(謎)
	$GOOD_BYE_PHRASE = &JSTR("\tヴェデル シーン   ");

.S	RunHooks               (fml.pl)
.k	RunHooks

SYNOPSIS:
	&RunHooks;

もし $FML_EXIT_HOOK があれば
=E
If $FML_EXIT_HOOK is defined, runs it.

	eval $FML_EXIT_HOOK

.S	ExecNewProcess		(fml.pl)
.k	ExecNewProcess

もし $FML_EXIT_PROG が定義されていれば
=E
If $FML_EXIT_PROG is defined, runs it 

	exec $FML_EXIT_PROG;

を実行する。

.S	SecureP                (fml.pl)
.k	SecureP
.xref	security

SYNOPSIS:
	&SecureP($request);

コマンド等のユーザからＭＬサーバへのリクエスト($request)が”安全と思わ
れる”シンタックスのみで表現されているかどうか？を調べる。例外処理をす
る場合は SecureP を呼び出す前にケースバイケースで処理するか 
%SECURE_REGEXP を定義する(リスクは自分で負うこと)。
.xref	%SECURE_REGEXP
=E
Check whether $request is safe or unsafe. Please use %SECURE_REGEXP
for an exceptional security check.

.S	SendBackInOrder     (libfop.pl)
.k	SendBackInOrder

SYNOPSIS:
	&SendBackInOrder($returnfile, $total, $subj, $sleeptime, @to)

	$returnfile	tmp/uja のようなファイル
	$total		全部で何分割しているか？
	$subj		Subject: 
	$sleeptime	何分おきに配送するか
	@to		配送リスト
=E
	$returnfile	file to send
	$total		the number of split files
	$subj		subject
	$sleeptime	send once each $sleeptime
	@to		recipients

まとめ送りサーバ msend.pl や mget の中で使われている代表的なファイル送
り返し関数。

.S	SocketInit             (libsmtp.pl)
.k	SocketInit

SYNOPSIS:
	&SocketInit;

プロセス間通信をはじめる前にはこれを呼ぶ。libsmtp.pl の中にあるので、
普通はどこからでも呼べる。
=E
Initialize socket functions.

.S	TurnOverW0             (libnewsyslog.pl)
.k	TurnOverW0

SYNOPSIS:
	&NewSyslog'TurnOverW0($LOG_MESSAGE_ID);#';

newsyslog を適用する。

上の例は $LOG_MESSAGE_ID に newsyslog を適用する。
=E
Runs newsyslog. Example: runs newsyslog over $LOG_MESSAGE_ID.

.S	Unlock                 (fml.pl)
.k	Unlock
.xref	Lock

上述の Lock の逆をやる。
=E
Unlcok.

.S	Warn                   (fml.pl)
.k	Warn

SYNOPSIS:
	&Warn($subject, $body);

中身は
=E
&Warn is the same as

	&Sendmail($MAINTAINER, $subject, $body);

と同じ。つまり管理者宛のメールを出す。
=E
Mails to $MAINTAINER. 

.S	WholeMail              (fml.pl)
.k	WholeMail
.k	$MIME_CONVERT_WHOLEMAIL

SYNOPSIS:	
	&WholeMail;

オリジナルのメールをスペース３文字インデントしたものを返す。インデント
はぱっと見た時に明らかに本文の中で違う意味を示すようにするためである。
エラーメール等で使う場合が多いため、変なフォーマットにする等の小細工は
せず単純なインデントですませるべきであろう。エラーデバッグのためには、
できるだけ生のメールを管理者へフォワードするべきだと思う。
=E
Return the whole mail with 3 SPACE CHARACTERS indent.  The indent
prevents strange MTA or MUA converting the mail body.  No conversion
is important for debug. I want to receive raw mail for debug!

$MIME_CONVERT_WHOLEMAIL をセットした場合MIME逆変換をしたメールも付加さ
れるが、エラーメール等では変なメールもありうるため推奨しない。
=E
If $MIME_CONVERT_WHOLEMAIL is set, we try MIME decoding of Japanese of
the mail body.

.S	eval                   (fml.pl)
.k	eval

SYNOPSIS:
	&eval($eval_string)

$eval_string を eval する。$COMPAT_FML15 を指定すると eval の前後で補
正コードが適用されfml 1.5 依然のデータ構造でもほとんど動くはずである。
＃完璧に補正できる保証はないと思う。
=E
Evaluate $eval_string.

.S	ipc                    (libutils.pl)
.k	ipc

SYNOPSIS:
	&ipc(*ipc, *r);

プロセス間通信インターフェイス。
=
Interface of InterProcess Communication based on Berkeley Socket mechanism.

	$ipc{'host'}	相手のホスト
	$ipc{'serve'}	ポート (/etc/services)
	$ipc{'tcp'}	TCP/IP を宣言
	$ipc{'pat'}	構造体パターン
	@ipc		相手サーバへのINPUT文字列
	$r		答えはこの中に入り返される。
=E
	$ipc{'host'}	host
	$ipc{'serve'}	port
	$ipc{'tcp'}	TCP/IP
	$ipc{'pat'}	struct sockaddr
	@ipc		input strings (array)
	$r		return value

.S	system                 (libutils.pl)
.k	system

SYNOPSIS:
	&system($s, $out, $in, $read, $write)

$s 文字列を実行する。チェックメカニズムを除けば内容的にＯＳの提供する 
system(3) とほとんど変わらない。
=E
Executes $s. OUT FILE is $out, IN is $in. OUT FILE HANDLE is $write,
IN is $read.

その際

	$in ファイルから読み
	$outファイルへ出力

	$write ファイルハンドルから読みこみ
	$read ファイルハンドルへ書く

なお	
=E
If $s matches

    /[\$\&\*\(\)\{\}\[\]\'\\\"\;\\\\\|\?\<\>\~\`]/

の文字列にマッチした場合 security のため system() は実行されない。
=E
&system does not run for security.

.# $Id$
.# Copyright (C) 1993-1998 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1998 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
