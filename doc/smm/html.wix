.C	HTML形式の記事を作成する
=E.C	Generating HTML Articles 
.n	gen_html
.l	href
.k	WWW

[アブストラクト]
ＭＬにながれる記事をHTML形式で"も"作成します。つまりMLのホームには
「spoolディレクトリの下に普通の記事、htdocsの下にHTML化された記事」が
作られます。スレッドのindexも作ります。WWWサーバにとっては単にファイル
を読むだけなので負担が軽いです。でもCGIではないので高度なことができた
りしません。


(たぶん2.1以前からのUPGRADEの人への)注意: 
HTML を作る場所ですが、デフォールトでは var/htdocs -> htdocs/ に変わっ
ています。var は nobody 等へpermission を出していないからです。

このルーチンは htdocs/ の下に記事をHTMLファイルとして成し適当に 
index.html や thread.html を再生成しています。そのため運用ポリシーとし
てWWWサーバでCGIなどが使えない場合(使いたくない場合)にも問題はありませ
ん。一般にCGIの方が自由度は高いでしょうが、普通WWW管理者はセキュリティ
的にそういうものは使わせたくないし、一つ記事を読むたびに毎回プログラム
が走ると重たいということもあります。fmlの方式はそういう事情に左右され
ませんが、そのために支払わねばならないトレードオフは当然あります。
=E
This routine creates html articles in htdocs/ and adjusts index.html
and thread.html. By this you can read html articles under a www server
without CGI, SSI ... Usually www server administrators think that our
server does not provide such a function for security and avoidance of
high load. Under such a circumstance, you can provide ML articles as a
HTML style. CGI is more flexible but may be unsafe. Fml HTML function
is restricted without functions provided by CGI, but not affected by
WWW server operation policy (security and high load average). It is a
trade-off but it is effective I believe under some environments.

.S	自動的に スプールを html 化する(Expireはしない)
=E.S	Automatically generating HTML articles from ML spool ($DIR/spool)
.l	SyncHtml
.k	automatic generation of html articles
.key	自動 html 化
.key	libsynchtml.pl
.xref	spool2html.pl
.k	$AUTO_HTML_GEN
.k	$HTML_DIR

$AUTO_HTML_GEN = 1; をセットすると、自動的にHTML化された記事も作ります。
作る場所は $DIR の下の $HTML_DIR (デフォールトは htdocs) という場所で
す。この時普通のPLAINTEXTのスプール($SPOOL_DIRへ溜る)も同時に作ってい
ます。
=E
When $AUTO_HTML_GEN = 1;, FML generates both plain articles in
$DIR/spool and HTML articles in $DIR/$HTML_DIR ($DIR/htdocs/).

HTML化の実体は HOOK で呼び出されます。fml.pl の中から外部の 
SyncHTMLfiles.pl を呼んでやらせるのは美しくないので;-)、HOOK でやれる
ように書き直しました。
注意: libsynchtml.pl により SyncHtml.pl は obsolete になりました
=E
The internal design of FML is running HTML generator functions as a
hook. Running external program SyncHtmlfiles.pl is an old time design,
which is obsolete.

記事は htdocs/ の下に階層構造を作りその下に作られます。階層構造は日や
記事番号100通ごとなどを単位にしています。単位は $HTML_INDEX_UNIT で決
められます。
=E
FML creates HTML articles in sub-directories under htdocs/. The unit
of sub-directories is are based on days, weeks, month and article
sequences. The unit is $HTML_INDEX_UNIT.

Example:

	htdocs/
	htdocs/19980120/
	htdocs/19980120/1.html
	htdocs/19980120/2.html
	.....

.S	&SyncHtml($HTML_DIR, $ID, *Envelope);
.k	&SyncHtml

SYNOPSIS:

	&SyncHtml($HTML_DIR, $ID, *Envelope);

	$HTML_DIR 	生成されたHTMLを置く場所
	$ID		記事番号は &Distribute; で
			グローバル変数 $ID はセットされる。
	*Envelope	%Envelope
=E
	$HTML_DIR 	Location where HTML articles is stored.
	$ID		Current article ID. Global variable ID is defined
			in &Distribute.  
	*Envelope	%Envelope

Example: 

	$FML_EXIT_HOOK .= q#;
		&use('synchtml');
		$HTML_DIR = 'htdocs';
		&SyncHtml($HTML_DIR, $ID, *Envelope);
	#;

&SyncHtml を走らせると
=E
Running &SyncHtml makes

	htdocs/index.html 
	htdocs/ID.html 

を生成します。index.html の中身は LIST 構造を成しています。
=E
index.html is the following listing structure.

	<UL>
	<LI>
	<A HREF=1310.html>
	96/09/16 18:12:33 Subject
	</A>

.if	LANG == JAPANESE
	<UL>
	…
	<LI> <A HREF=記事番号.html> Summary ファイルもどき </A>
	…
.fi

$HTML_INDEX_REVERSE_ORDER がセットされていると逆方向に <LI> エントリを
作ります。つまり新しい記事が最初に来るわけです。
.k	$HTML_INDEX_REVERSE_ORDER
=E
If $HTML_INDEX_REVERSE_ORDER is set (default), FML generates <LI>
entries in reverse order. Latest article is on the top of index.html.

この時各 directory の .indexcache にキャッシュされているデータから生成
しています。ファイル .indexcache は $HTML_DATA_CACHE で変更できます。
.k	$HTML_DATA_CACHE
=E
The cache file is $HTML_DATA_CACHE (default is .indexcache). 
Each directory has each cache file. 

またスレッドを生成するためのキャッシュのファイル名は $HTML_DATA_THREAD 
です。
.k	$HTML_DATA_THREAD
=E
Also a cache file for threading is $HTML_DATA_THREAD.

同じライブラリを呼んで同じことをするコマンドラインからのためのインター
フェイスに spool2html.pl というのもあります。
.xref spool2html.pl
=E
spool2html.pl is the command line interface.
.xref spool2html.pl

.S	HTML化する単位 (数 or 日)
=E.S	Unit of HTML directory
.l	$HTML_INDEX_UNIT
.key	$HTML_INDEX_UNIT

	$HTML_INDEX_UNIT (default is 'day')

	設定できる値:
=E
	value:	

		"day"
		"week"
		"month"
		"infinite"
		number (e.g. 100, 1000, ...)

現在の標準実装のデフォールトは $HTML_INDEX_UNIT = 'day'; です。
=E
$HTML_INDEX_UNIT is the unit of sub-directories under htdocs/. The
default unit is 'day'. FML creates each sub-directory for each day and
stores HTML articles.

もしexpireしない場合一つの htdocs/ に数千のファイルができることになり
かねません。これよりはファイル100個ごと、もしくは日ごとにdirectoryをま
とめておくなどが見やすいでしょう。

Example: Creation of HTML articles on 1996/09/16

	htdocs/19960916/index.html
	htdocs/19960916/100.html
	htdocs/19960916/101.html
	...

のように 1996/09/16 日のMLの記事を htdocs/19960916/ 以下にHTML化
します。

また $HTML_INDEX_UNIT = 数字; (e.g. 100)とした場合は記事100個ごとに別
のdirectoryを作ります。
=E
If $HTML_INDEX_UNIT = number (e.g. 100), each sub-directory is 100 HTML
articles.

Example:

	htdocs/100/
	htdocs/100/101.html
	htdocs/100/102.html
	...
	htdocs/200/
	htdocs/200/201.html
	htdocs/200/202.html
	...

.S	$HTML_INDEX_UNIT == "infinite"
.k	$HTML_INDEX_UNIT == "infinite"

日などでわけずに一つの directory に作る。$HTML_DIR 直下に生成する。
トラフィックが多く数万個の記事ディレクトリ直下にできてしまうことが想定
されるようなケースでは非現実的なので使うべきでない(いろいろな整合性チェッ
クの時間だけで馬鹿にならない)。
=E
Generate html files in one directory, just under $HTML_DIR.  If you
have a ML with large traffic, you should not use this setting since
only inconsistency check routine must run very longly.

.S	thread.html; スレッド化した index を作成する
=E.S	thread.html; Threading
.k	$HTML_THREAD
.k	スレッド化したHTML階層を作る

スレッド化 HTML (libsynchtml.pl)
=E
Index file for threaded html articles are created when

	$HTML_THREAD = 1; 

にするとスレッド化したインデックスファイルとして thread.html を作りま
す。両方を作るので好きな階層を見ればいいでしょう。スレッドには 
In-Reply-To: と References: の依存関係を使っています。そういうものをつ
けない MUA を使ってる人からのメールだけはうまく動きません。
=E
FML Threading depends on In-Reply-To: and References: fields. Hence
FML cannot recognize mails sent from some MUA's such as Eudora since
they ignore In-Reply-To: and References: fields.

	thread.html
	index.html
		SUB-DIRECTORY/thread.html
		SUB-DIRECTORY/index.html
	...

このように両方のファイルが作られ別の階層が形成されるので、見る人にはどっ
ちか好きな方をたどってみてもらえば良いでしょう。

$HTML_INDENT_STYLE (default "UL")はスレッドを作る際に使うHTMLのスタイ
ル?です。現在あるスタイルは『文法<UL>を段をずらすために利用するか？』
か否か？だけです。

$HTML_THREAD_REF_TYPE は依存関係の作り方のタイプです。デフォールトでは
References: In-Reply-To: のすべてのリファレンスへリンクをはります。た
とえ thread.html の中で重複していてもです。リンクは一つだけを選びたい
なら
=E
$HTML_THREAD_REF_TYPE defines how articles are referred within them.
In default FML uses all elements in References: and In-Reply-To:.
Even if plural links are shown (duplicated) in thread.html. When

	$HTML_THREAD_REF_TYPE = "prefer-in-reply-to"; (3.0 default)
.k	$HTML_THREAD_REF_TYPE

と設定すると、
	1.	In-Reply-To: 
	2.	In-Reply-To: がない時は References: に現れる最後のID
を前の記事とみなすようにします。
=E
FML selects one message-id in References: and In-Reply-To:. 
	1.	In-Reply-To: 
	2.	If no In-Reply-To: is given,
		the last message-id in References:

.S	Variables to Customize HTML File 

           $HTML_FORMAT_PREAMBLE
.k         $HTML_FORMAT_PREAMBLE

		(default) 先頭から <HEAD> まで
		<TITLE>あたり
=E
		From the begin to <HEAD>

           $HTML_DOCUMENT_SEPARATOR
.k         $HTML_DOCUMENT_SEPARATOR
		(default) </HEAD><BODY>

		本体
=E
		main body

           $HTML_FORMAT_TRAILER
.k         $HTML_FORMAT_TRAILER

		</BODY></HTML> (default) 

index.html 用には

	$INDEX_HTML_DOCUMENT_SEPARATOR
	$INDEX_HTML_FORMAT_PREAMBLE
	$INDEX_HTML_FORMAT_TRAILER
.k	$INDEX_HTML_DOCUMENT_SEPARATOR
.k	$INDEX_HTML_FORMAT_PREAMBLE
.k	$INDEX_HTML_FORMAT_TRAILER

という変数が用意されています。

メーリングリストの記事のどのヘッダを表示するかは @HtmlHdrFieldsOrder 
で決まります。が $HTML_HEADER_TEMPLATE という変数を使うと 
@HtmlHdrFieldsOrder は無視され、$HTML_HEADER_TEMPLATE だけが書き込まれ
ます。
.k	@HtmlHdrFieldsOrder
=E
The header fields defined in @HtmlHdrFieldsOrder is written to html
files. If $HTML_HEADER_TEMPLATE is defined, only the content is
written and @HtmlHdrFieldsOrder is ignored.
.k	@HtmlHdrFieldsOrder

.S	HTML 4.0
.k	$HTML_STYLESHEET_BASENAME

HTML 4.0 については
=E
HTML 4.0 comes from a patch by

	From: TAMURA Kent <kent@hauN.org>
	fml-support: 04153

のパッチをほとんどそのまんま使っています。＃ ありがとう _o_
=E
Thank you the contribution.

$HTML_STYLESHEET_BASENAME はスタイルシートのファイルです。sub
directory の下に html ファイルが作られることを考慮して設定して下さい。
例:
=E
HTML 4.0 has a css as a standard. $HTML_STYLESHEET_BASENAME is a style
sheet file. Please consider the relative path.

	$HTML_STYLESHEET_BASENAME = "../fml.css";

A style sheet example is automatically installed under automatic html
generation.

.S	HTMLファイルのExpire
=E.S	Expiration over HTML articles
.k	$HTML_EXPIRE_LIMIT
.k	$HTML_EXPIRE

	$HTML_EXPIRE_LIMIT	(default 0)

expire の“日”数。もし０以下ならおこなわない。これが指定されていない
ときは index.html は増える一方:-)
＃注意: $HTML_EXPIRE はわかりにくいので $HTML_EXPIRE_LIMIT へ名前を変えた。
＃      なお内部では自動変換しているのでどっちでも動く
=E
The unit of expiration over HTML articles. If the unit <= 0,
expiration does not run, so HTML articles breeds only:).

なお今のアルゴリズムは以下のようなものです。htdocs の下は
=E
The current expiration algorithm follows: 
Firstly the HTML directory has the following structure.

	thread.html
	index.html
		SUB-DIRECTORY/thread.html
		SUB-DIRECTORY/index.html
		SUB-DIRECTORY/100.html
		…

のような階層を成しています。今はファイル単位ではなく sub-directory ご
とに expire するか否かを決定しています。
そうしないと中途半端に記事が欠落するとか、中途半端にファイルがなくなっ
た状態で thread を再生成しなければならないので、ものすごく複雑な処理が
必要になるからです。
=E
If removing articles one by one, FML requires sub-directory
consistency checks for re-creating index.html and so on. It is
difficult to keep consistency. Hence our algorithm is "removing the
whole sub-directory if all articles in the sub-directory are expired".
After removing, FML re-creates the top index.html and thread.html.

directory ごと expire する根拠はdirectory 中に含まれる全てのファイルが 
expire だと判定された場合です。よって、ある directory 中の一部のファイ
ルが expire の日付を過ぎていてもそれらは全てのファイルが expire される
まで残り続けることに注意して下さい。なお directory ごと消す時にだけ一
番上の index.html thread.html は再構成されます。

また expire 処理の overhead がかなりかかります。また directory 単位なの
に毎回 expire するべきか？の判定処理をしてもしょうがありません。デフォー
ルトは投稿数に対し $HTML_EXPIRE_LIMIT * 5 回に一回 expire code は走り
ます。この値は $HTML_EXPIRE_SCAN_UNIT で変更できます。
.k	$HTML_EXPIRE_SCAN_UNIT
=E
Expiration codes requires some overheads. It must be of no use to run
expiration each time FML runs since our algorithm is applied for each
directory but an expiration occurs sometimes.  FML runs expiration
codes once $HTML_EXPIRE_LIMIT * 5 times in default.
$HTML_EXPIRE_SCAN_UNIT can control this value.
.k	$HTML_EXPIRE_SCAN_UNIT

.S	BASE64 Decoding
.k	$BASE64_DECODE
.k	mewdecode

base64 で encode されたものがあった場合$BASE64_DECODE という変数に定義
された base64 decoder を使って展開しその結果をHTMLの中に埋め込みます。
なお展開した結果はFMLが勝手につけた名前でファイルに落されます。
ユーザが与えた名前は security 上使いません。
=E
If $BASE64_DECODE is defined, FML tries to decode BASE64 parts
contained in the mail when a HTML article is created.

Example:
	$BASE64_DECODE = "/usr/local/bin/mewdecode";

明示的に $BASE64_DECODE を定義されたない場合は bin/base64decode.pl が
使われます。(2.2A#11以降)
.xref base64decode.pl
=E
Fml uses bin/base64decode.pl as a default when $BASE64_DECODE is not
defined. (After 2.2A#11)
.xref base64decode.pl

.S	$HTML_OUTPUT_FILTER
.k	$HTML_OUTPUT_FILTER

index.html を作る時 $HTML_OUTPUT_FILTER というプログラムを通してから作
る。具体的には 日本語漢字変換やMIME,BASE64 decoder 等が該当するだろう。
=E
When creating HTML articles, apply $HTML_OUTPUT_FILTER as a filter.

.S	$HTML_TITLE_HOOK
.k	$HTML_TITLE_HOOK

HTMLに変換された記事をファイルに保存する直前に実行されるフック。
=E
$HTML_TITLE_HOOK is evaluated just before saving HTML files.

例:
=E
Example: to change HTML article subject.

	q#$HtmlTitle = sprintf("%s %s", $Now, $HtmlTitle);#;

で、タイトルのシンタックスを日付を付け加える等…変えられる。

.S	キーワードによるHTML化の自動分類 （今の実装でOKか未確認？）
=E.S	Classification by keywords (obsolete?)
.k	@HTML_FIELD
.k	Keyword:

.if 	LANG == JAPANESE
ヘッダの Keyword: エントリが含んでいるキーワードが @HTML_FIELD のどれ
かにマッチした場合に、キーワード別に別のHTML階層を作ります。
.fi
.if LANG == ENGLISH
* please ignore ;D
.fi

.S	&TalkWithHttpServer
.l	&TalkWithHttpServer
.k	&TalkWithHttpServer

SYNOPSIS:
	&TalkWithHttpServer($host, $port, $request, $tp, *e); 

	$host		ホスト		(e.g. www.iij.ad.jp)
	$port		ポート番号	(70, 80, 21, ...)
	$request	リクエストの内容
	$tp		TYPE OF PROTOCOL (http, gopher, ftp, ...)
	*e		答えを入れるためのstab
=E
	$host		host	(e.g. www.iij.ad.jp)
	$port		port	(70, 80, 21, ...)
	$request	request (e.g. http://www.fml.org/)
	$tp		TYPE OF PROTOCOL (http, gopher, ftp, ...)
	*e		stab of the result

http:// で始まらない時には、デフォールトで聞きにいくサーバを
=E
If the request begins without http://host, the www server to prepend
is

	$DEFAULT_HTTP_SERVER
.k	$DEFAULT_HTTP_SERVER

で、またデフォールトを80から変えたい時は
=E
the default port number is

	$DEFAULT_HTTP_PORT 
.k	$DEFAULT_HTTP_PORT 

で変更できます。同様に gopher についても
=E
On gopher

	$DEFAULT_GOPHER_SERVER
	$DEFAULT_GOPHER_PORT 
.k	$DEFAULT_GOPHER_SERVER
.k	$DEFAULT_GOPHER_PORT 

という変数が用意されています。

Example:

    if ($tp =~ /http/i) {
	$host = $host || $DEFAULT_HTTP_SERVER;
	$port = $port || $DEFAULT_HTTP_PORT || 80;

	# connect http server
	&Mesg(*e, ">>> HREF=$tp://$host$request\n");
	&TalkWithHttpServer($host, $port, $request, $tp, *e); 
	&Mesg(*e, ">>> ENDS HREF=$tp://$host$request\n");
    } 
	
.S	URLの中身を返すサーバ
=E.S	Server to get the request URL and send back it
.k	&HRef
.k	libhref.pl

一番単純なやり方は

$START_HOOK = q#
    require 'libhref.pl';
    &HRef($Envelope{'Body'}, *Envelope);
    $DO_NOTHING =1;
#;

です。こうするとメール本文をコマンドレポートの形で送り返します。
=E
It send backs the URL contents as a "fml status report".

.S	HRef関数によるURL先データの引き落とし
=E.S	Download URL's content
.l	HRef
.k	&HRef
.k	HRef

SYNOPSIS:
    &HRef($request, *Envelope);

$request のURLの内容を$Envelope{'message'}に入れて送り返す。
$request は
=E
Download the URL which URI is $request and set the content in
$Envelope{'message'}. Request types below are available.

	http://
	gopher://
	ftp://

を理解します。ftp はローカル or ftpmailへのリレーへ自動的に切替えます。
また、もしバイナリデータの場合はuuencodeして送り返します。
=E
ftp:// automatically changes to local or to be related to ftpmail. 

.S	NOTE: Special Character (libsynchtml.pl)

特殊文字

ASCII(or ISO 8859)コードの中の4つのキャラクタは HTMLでは特別な意味を持つため、
そのままでは使用できない。 4つのキャラクタとは、<, >, & と " である。

< と > はタグを示すために使用され、 & は、以下のキャラクタやその他のキャラクタ
のための エスケープシーケンスとなっている。

    &lt;
      <

    &gt;
      > のエスケープシーケンス

    &amp;
      & のエスケープシーケンス

    &quot;
      " のエスケープシーケンス

エスケープシーケンスとは、各キャラクタを表示するために必要な文字列であり、 そ
れぞれ ; が必ず必要。

その他にも、8bitキャラクタをサポートするために以下のような エスケープシーケン
スが用意されている。

注意: この文書は日本語で書かれているため、以下の例では正しく表示されない可能性
がある。

    &ouml;
      小文字の o にウムラルトのエスケープシーケンス

    &ntilde;
      小文字の n にチルダのエスケープシーケンス

    &Egrave;
      大文字の E にグレーブ・アクセントのエスケープシーケンス

このようなエスケープシーケンスに関してはCERN からリストが提供されてい
るのでそちらを参照していただきたい。


.# $Id$
.# Copyright (C) 1993-1999 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1999 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
