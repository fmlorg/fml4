.C	config.phのその他の設定について
=E.C	Config.Ph Miscellaneous Configurations
.l	config-misc

.S	ヘッダを MIME Decoding してログをとること
=E.S	Header Mime Decoding (To Japanese)
.k	MIME
.l	MIME
.l	MIME-header
.l	MIME-1
.l	$USE_MIME
.# .xref	MIME-hack

本来 MIME をクライアントプログラムが処理すればいいことなのでサーバとし
ては素通しでいいはずです。が、ログを日本語変換してから保存したいという
要求があるらしいのでこれらの機能が実装されています。
=E
Client programs should do MIME decoding, so ML server (and MTA) should
pass the mail body through. FML provides solutions such as MIME
decoding to save subject decoded to Japanese in summary.

まず各種の MIME Decoding を行うためには、すべての MIME decoding を ON 
にする変数
=E
To use MIME decoding engine in FML, configure

	$USE_MIME	= 1; (default 1)
.k	$USE_MIME

を定義します。これがないと必要なライブラリをロードしません。
=E
If not defined, MIME library is not loaded.

.S	SubjectをMime DecodeしてSummaryに記録
=E.S	To Decode Subject: And Save It In Summary File
.k	SubjectをMime DecodeしてSummaryに記録

	$USE_MIME	= 1; (default 1) 
.k	$USE_MIME

が設定されていると subject を MIME decodeして summary に記録する。

Example:
	...
	Subject: Re: TELEPHONE 
	   =?ISO-2022-JP?B?GyRCJD0kcyRKJCEhQRsoQg==?=

というメールが来たとすると、summary ファイルには
=E
is saved in summary file as 

	94/04/03 20:47:47 [1:fukachan@phys.t] Re: TELEPHONE そんなぁ〜

と記録されます

注意: subject をちょんぎったりはしませんが、一行にしてからdecodeして全
部書いてます。summaryは1行1メールがわかりやすくていいでしょ?
=E
Caution: If subject: has plural lines, FML converts it into one line
only in summary file for more readability.

.S	記事を MIME Decode して保存
=E.S	Decoding articles stored in $DIR/spool.

にふてぃ〜とかのださださ対策の一貫の名残です。現代では使うべきではあり
ません。
=E
THIS IS NEGATIVE INHERITANCE IN THE OLD AGE AGAINST BAD BAD BAD
IMPLEMENTATION OF SOME BBS e.g. NIFTYSERVE.OR.JP.

	$MIME_DECODED_ARTICLE          = 1;
.k	$MIME_DECODED_ARTICLE

と定義して下さい。$DIR/spool/数字 というファイルにＭＬの記事の保存する
時に日本語へ逆変換した内容を書き込みます。ただしこれをすると 
MIME/Multipart とかでエラーになるのでやってはいけません。
=E
enables FML decodes articles in $DIR/spool. HOWEVER this causes errors
getting old articles in MIME/Multipart mode. You should not use this
option.

.S	ISO-2022-JP Trap
.l	Mime-Memo

ISO-2022-JP の文字がない限りは require しません(たいして軽くはならない
でしょうが…)。
=E
FML traps "ISO-2022-JP" for MIME decoding to avoid useless evaluation
of MIME library.

.k	RFC1522
RFC1522	2. Syntax of encoded-words

   encoded-word = "=?" charset "?" encoding "?" encoded-text "?="
   charset = token    ; see section 3
   encoding = token   ; see section 4
   token = 1*<Any CHAR except SPACE, CTLs, and especials>

.S	mget MIME 処理のカスタマイズ変数
=E.S	Mget Mime Customize Variables
.k	MIME処理に関するカスタマイズ変数
.l	MIME-customizing
.l	MIME-2
.k	$MIME_VERSION
.k	$MIME_CONTENT_TYPE
.k	$MIME_MULTIPART_BOUNDARY
.k	$MIME_MULTIPART_PREAMBLE
.k	$MIME_MULTIPART_TRAILER

以下はＭＬ本来の配送には関係ないです。mget やまとめおくりの際の処理に
関係します。右辺はデフォールトの値（Built-in）です。ファイルの取り寄せ
等のモードにMIME関係もありますが、その時に使われています。
=E
"mget" routines handle MIME encodings to enforce your favor, which is
not used in usual.

   Mime-Version:
   Content-Type:

	$MIME_VERSION = '1.0';
	$MIME_CONTENT_TYPE = 'multipart/mixed;';

以下は MIME/Multipart で使う変数です。

	$MIME_MULTIPART_BOUNDARY = "--Thu_18_May_95_02:36:26--"

な形で日付を設定します。そのあと、これら↓の変数を設定してます。

	$MIME_MULTIPART_DELIMITER  = $MIME_MULTIPART_BOUNDARY;
	$MIME_MULTIPART_DELIMITER .= "\nContent-Type: message/rfc822\n";
	$MIME_MULTIPART_CLOSE_DELIMITER = $MIME_MULTIPART_BOUNDARY;

くぎり
=E
Separators of MIME parts. In default we use date.

	$MIME_MULTIPART_BOUNDARY = "--日付--"
=E
	$MIME_MULTIPART_BOUNDARY = "--Date--"

本文の前口上
=E
preamble before MIME parts

	$MIME_MULTIPART_PREAMBLE (デフォールトはなにもなし)
=E
	$MIME_MULTIPART_PREAMBLE (nothing in default)

本文の後につく部分
=E
trailer before MIME parts

	$MIME_MULTIPART_TRAILER (デフォールトはなにもなし)
=E
	$MIME_MULTIPART_TRAILER (nothing in default)

.S	実際の配送を担当するマシンを別にする場合
=E.S	FML runs on a host, delivery programs run in other hosts
.xref	$HOST

.S	ロックアルゴリズムの選択
=E.S	Lock Algorithm
.xref	how-to-lock

FML uses flock(2) in default. If you use flock(2), set

	$USE_FLOCK    = 1; (default 1)
.k	$USE_FLOCK

を設定すると flock system call をロックに使います。
=E
If flock(2) does not work on your OS, set

	$USE_FLOCK    = 0;

とすると link(2) を使うやり方にセットできます。デフォールトはflockです。
=E
to use a lock based on link(2). This algorithm uses lockfiles whereas
flock(2) is only in kernel.  If the machine shutdowns or reboots
suddenly, temporary lock files may be left in the lock spool. If
exists, please remove them. 


.S	MLを止めて(ロックして) config.phの edit をしたい
=E.S	Lock ML and edit its config.ph
.k	vipw.pl
.l	bin/vipw.pl
.k	maintenance.pl

ＭＬを動かしたまま config.ph を edit するのちょっと恐いです。夜中とか
メールがまず来ないと思っている時間ではなく、普通にメールが来得る時間帯
にメインテナンスをしたい時にはロックを書けた状態で editor を呼び出すこ
とが必要です。"makefml edit ML [file]" はこの機能を提供します。
=E
To edit files (e.g. cf, config.ph) under locking a ML like vipw(8),
FML provides the mechanism by "makefml".

	% makefml edit ML [file]

file が省略されると config.ph になります。

Example: to edit elena/config.ph 
	% makefml edit elena
	% makefml edit elena config.ph

Example: to edit elena/cf
	% makefml edit elena cf

注意: これを使って config.ph を edit してしまうと makefml config は基
本的に使えない。ということを意味するので注意して下さい。makefml config 
は毎回
=E
enables you to edit config.ph by hand.
==
ATTENTION: "makefml config" edits $DIR/cf and creates $DIR/config.ph
from $DIR/cf. If you use "makefml config" usually but now need to set
up FML over "makefml config" spec, you need to edit $DIR/cf manually
and run "make config.ph".

	 cf -> config.ph 

の生成手順を行なうため、cf ファイルがマスターになります。cf ファイルの
内容は makefml config でも保存されるので、makefml config を使う場合は 
cf を設定のマスターファイルにする必要があります。ちょうど sendmail.cf 
と CFの設定ファイルの関係のようになっています。

注意: 昔あった maintenance.pl や vipw.pl は削除されましたが、それと同
じことをする機能です。

.# $Id$
.# Copyright (C) 1993-1998 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1998 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
