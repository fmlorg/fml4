.C	ヘッダのカスタマイズ
=E.C	Customize Fields of the Mail Header 
.n	headers
.l	header-custom

fml はＭＬの記事やコマンドの結果を知らせるメールなどのヘッダのフィール
ドの並び変えや特定のフィールドの削除などを行なっています。FML 2.2 以降
のデフォールトは『Return-Receipt-To と Received を除き素通し』に設定さ
れています。ヘッダの一部を切ったり、付け加えるにはconfig.phに &DEFINE_
なんとか という関数呼びだしを設定して行ないます。


.S	ヘッダ・フィールドのフォーマット
=E.S	Configure Header Fields
.key	ヘッダ・フィールドのフォーマット
.key	@HdrFieldsOrder 
.xref	data-structure

fml は配送メールおよびコマンドの結果を知らせるメールなどのヘッダのフィー
ルドの成形を行います。またあらかじめ設定されたフィールドのみを通すよう
に設定できます。例えば、フィールドの並び順は @HdrFieldsOrder という変
数配列に従い、@HdrFieldsOrder に出てくるフィールドのみを通過させます。
X-Faces のようなうざったいフィールドは通さない などのようにです。
=E
fml.pl passes only defined fields through to cut off annoying fields,
e.g. X-Faces, and distributes the mail with a formatted header. It
orders the header fields of distribution following an array
@HdrFieldsOrder.

$PASS_ALL_FIELDS_IN_HEADER という変数を指定すると @HdrFieldsOrder にな
いフィールドも通過させます。@HdrFieldsOrder にないフィールドは入力の順
番でヘッダに現れます。2.2のデフォールトでは１です(素通し)。
=E
If $PASS_ALL_FIELDS_IN_HEADER is defined, fml.pl passed all fields in a
header except for Received: and Return-Receipt-To: (fields defined in
$SKIP_FIELDS).

	$PASS_ALL_FIELDS_IN_HEADER = 1; (path through, 1 is default)
.k	$PASS_ALL_FIELDS_IN_HEADER

* fml 2.1 is "0", fml 2.2 is "1".

.if LANG == JAPANESE
注意: $SUPERFLUOUS_HEADERS は昔の名前です。
なお $PASS_ALL_FIELDS_IN_HEADER でも $SUPERFLUOUS_HEADERS でもどっちを
使ってもOKです。また makefml は自動的に変換します($CFVersion 3.2)。
.k	$SUPERFLUOUS_HEADERS
.fi

ただし Received: と Return-Receipt-To: は切落とします($SKIP_FIELDS と
いう変数で定義されているフィールドは通さない)。この２つのフィールドを
通すには明示的に@HdrFieldsOrder に定義する必要があります。
Return-Recipient-To は当然として Received: は MAX HOP を越える場合に備
えてです。

フィールドの種類と順番に凝る場合:-)は @HdrFieldsOrder を config.ph 等
で定義しなおしてください。
=E
If you consists on your customize, you can set up @HdrFieldsOrder
e.g. in config.ph. In default @HdrFieldsOrder (1998/04/26) is

@HdrFieldsOrder のデフォールトは (1998/08/10, 2.2BETA#1)

    @HdrFieldsOrder =	# rfc822; fields = ...; Resent-* are ignored;
	('Return-Path', 'Received',
	 'Date', 'Posted', 'X-Posted', 'X-Original-Date',
	 'From', 'Reply-To', 'Subject', 'Sender', 
	 'To', 'Cc', 'Errors-To', 'Message-Id', 'In-Reply-To', 
	 'References', 'Keywords', 'Comments', 'Encrypted',
	 ':XMLNAME:', ':XMLCOUNT:', 'X-MLServer', 
	 'XRef', 'X-Stardate', 'X-ML-Info', 
	 'X-Mailer',
	 ':body:', ':any:', 
	 'X-Authentication-Warning',
	 'Mime-Version', 'Content-Type', 'Content-Transfer-Encoding',
	 'Content-ID', 'Content-Description', # RFC2045
	 'Precedence', 'Lines');

のように定義されています。X-Authentication-Warning は PICKY_HELO_CHECK
(sendmail) 等で Security の Warning がつくので通すようにしました。
=E
where FML passes X-Authentication-Warning through to show the security
warning.

また @HdrFieldsOrder 中では
=E
In @HdrFieldsOrder

	:body:
	:any:
	:XMLNAME:
	:XMLCOUNT:

の特殊な変数が使われています。それぞれ
=E
are defined for special purposes and expanded before distribution. The
meaning is

	:body:		$body を展開する場所
			$SMTP_OPEN_HOOK や $HEAD_ADD_HOOK 等で独自ヘッダを
			$body で定義した場合等に使われる(Backward Compatible)
=E
	:body:		$doby variable is expanded
			(obsolete, left for backward compatible)

	:any:		$PASS_ALL_FIELDS_IN_HEADER の時 @HdrFieldsOrder
			に明示的に現れないフィールドを展開する場所
=E
	:any:		fields not defined in @HdrFieldsOrder are shown 
			when $PASS_ALL_FIELDS_IN_HEADER is set.

	:XMLNAME:	$XMLNAME を展開する (X-ML-Name: フィールド)
.k	$XMLNAME
=E
	:XMLNAME:	$XMLNAME (X-ML-Name: Field)

	:XMLCOUNT:	$XMLCOUNT を展開する (X-Mail-Count: フィールド)
.k	XMLCOUNT
=E
	:XMLCOUNT:	$XMLCOUNT (X-Mail-Count: field)

のような特殊な目的に使われます。これらは互換性の趣が強い例外処理です。

.S	ヘッダフィールドの内容の強制
=E.S	Enforce the content for a header field
.l	&DEFINE_FIELD_FORCED
.k	--fh:field

SYNOPSIS:
	&DEFINE_FIELD_FORCED('field', "field-contents");

@HdrFieldsOrder 内で定義されているフィールドに対し、フィールドの内容を
強制操作します。なお
=E
Enforces the value of "field" to "field-contents". where the field is
one of fields defined in @HdrFieldsOrder.  This function sets up

	$Envelope{'fh:field:'} = "field-contents";

と同じです。
＃obsolete ですがコマンドラインの --fh:field="field-contents" と同じ

例: X-Ml-Info: の内容を"書きたいこと"に設定する。
	&DEFINE_FIELD_FORCED('x-ml-info', "書きたいこと");
=E
Example: set "X-ML-Info: ML Information"
==
	&DEFINE_FIELD_FORCED('x-ml-info', "ML Information");

.S	ヘッダフィールドをオリジナルのままにする
=E.S	Enforce the value of a field to one of the in-coming mail header
.l	&DEFINE_FIELD_ORIGINAL
.k	--oh:field

SYNOPSIS:
	&DEFINE_FIELD_ORIGINAL('field');

@HdrFieldsOrder 内で定義されているフィールドに対しオリジナルの値(MLサー
バへ入ってきた時のヘッダの値)にしておきたいフィールドを指定します。こ
れは
=E
enforce the value of a field to one of the in-coming mail header.  The
field must be one of elements of @HdrFieldsOrder. This function sets
up

	$Envelope{'oh:field:'};

と同じです。
＃obsoleteですが --oh:field  (コマンドライン)と同じ

例: To:, Cc:, Reply-To: をオリジナルの内容のままにする。
=E
Example: Let the value of To:, Cc:, Reply-To: be original.

	&DEFINE_FIELD_ORIGINAL('to');
	&DEFINE_FIELD_ORIGINAL('cc');
	&DEFINE_FIELD_ORIGINAL('reply-to');

To: Cc: フィールドをオリジナルのままにして配送する。

.S	ヘッダのフィールドを増やす or 減らす
=E.S	Add or Remove @HdrFieldsOrder entries
.k	ヘッダのフィールドを増やす or 減らす

&ADD_FIELD, &DELETE_FIELD という関数も用意しています。
例: X-Uja を付け加える。
=E
To add or remove header fields, set up @HdrFieldsOrder in config.ph.
Also FML provides macros, &ADD_FIELD, &DELETE_FIELD, for them. To add
a field "X-Uja" in the last of @HdrFieldsOrder,

	&ADD_FIELD('X-Uja');

Cc: フィールドを“つけない”なら
=E
If you always remove 'Cc:' field in distribution mail, you can set it
up by

	&DELETE_FIELD('Cc');

.if LANG == JAPANESE
注意: 96/11/2 $NOT_USE_CC を削除しました。@HdrFieldsOrder を直接いじる
か &DELETE_FIELD('Cc') を使って下さい。
.k	$NOT_USE_CC
.fi

ヘッダに現れる順番が重要な場合は @HdrFieldsOrder という配列を直接いじ
るしかありません。

例: 先頭に X-Some-Thing をつける

	unshift(@HdrFieldsOrder, 'X-Some-Thing');

.S	特定のヘッダ・フィールドのコピー
=E.S	COPY_FIELD

@HdrFieldsOrder 内で定義されているフィールドに対し、

where the field is one of fields defined in @HdrFieldsOrder.

		&COPY_FIELD(field, new-field);
	Example:
		&COPY_FIELD('Sender', 'X-Sender');

.S	Received: を残す
=E.S	Preserve Received: field in distribution articles
.k	Received: を残す
.l	left-Received

FML 2.2 以降では
=E
After FML 2.2, set

    $SKIP_FIELDS  = 'Return-Receipt-To';

です。makefml configのメニューにあります(中身はこれ)。
＃2.1 では子文字じゃないとだめかも unshift(@HdrFieldsOrder, 'received');
＃この場合一行だけ Received ではなく received になってしまってちょっ
＃と情けないかも知れませんが…
＃RFC822 としては大文字小文字は関係ないので問題はない。カッコ悪いだけ;-)
=E
to preserve Received: fields in the header. A capital is important.


歴史的に「サーバで受けたところまではOKなんだから、管理者が責任を持って、
ユーザにはMLサーバからユーザまでの配送分を見せれば十分だろう(余計なも
のは見せてもらわない方が幸せだろう)」という思想に基づき、デフォールト
では Received: はつけていません。またそれは too many hops によるエラー
を避けるためにも有効です。
=E
Out of security problems, in default FML cuts off Received: fields to
avoid "too many hops" error and the concept that FML receives this
mail so that we have network connectivity insurance between the poster
and this host.

念のためログを取るためには
=E
You may want to log whole input mails for security. To log all mails,
set (in the last of config.ph, but before "1;")

	&DEFINE_MODE("stdinlog");

というモード指定があります。これは入力を日毎にログファイル(var/logの下)
に残しておきます(溜る一方なので注意してね)。
=E
which enables FML to log inputs from MTA to a file under
$DIR/var/log/. Caution: you should need to expire them by hand :-)

なお Posted: (user が出した時間)と Date: (サーバが配送した時間) の違い
を見るとサーバにたどり着くまでの時間差(Network 的にどのくらい遠いか?)
がわかります。
.xref $DATE_TYPE
.k Posted:(user が出した時間)とDate:(サーバが配送した時間)の差
=E
In FML, "Posted:" is when this mail is sent from the original poster
and "Date:" is the time when FML runs. The difference between Date:
and Posted: reflects network delays.
.xref $DATE_TYPE

FYI: fml-support's ML Count: 01816, 01821 for the discussion

.S	Date: Type ($DATE_TYPE)
.l	$DATE_TYPE
.k	$DATE_TYPE

fml 2.2 の $DATE_TYPE のデフォールト値は original-date 、
fml 2.1 は received-date です。
=E
$DATE_TYPE default is "original-date".

.if LANG == JAPANESE
	未定義ならそのまま(互換性のため) received-date と同じになる

	original-date
		Date:	
		Posted: なし

	received-date
	received-date+posted
		Date:	FMLがメールを受けとった時間
		Posted:	オリジナルメールのDate:

	received-date+x-posted
		Date:	FMLがメールを受けとった時間
		X-Posted:	オリジナルメールのDate:

	received-date+x-original-date
		Date:	FMLがメールを受けとった時間
		X-Original-Date: オリジナルメールのDate:

	distribute-date
	distribute-date+posted
		Date:	FMLがメール配送を始めた時間
		Posted:	オリジナルメールのDate:

	distribute-date+x-posted
		Date:	FMLがメール配送を始めた時間
		X-Posted:	オリジナルメールのDate:

	distribute-date+x-original-date
		Date:	FMLがメール配送を始めた時間
		X-Original-Date:	オリジナルメールのDate:


.fi
.if LANG == ENGLISH
	not defined (default for compatibility), the same as "received-date"

	received-date
	received-date+posted
		Date:	When FML receives mail
		Posted:	Date: of the original mail

	received-date+x-posted
		Date:	When FML receives mail
		X-Posted:	Date: of the original mail

	received-date+x-original-date
		Date:	When FML receives mail
		X-Original-Date:	Date: of the original mail

	original-date
		Date:	
		Posted: not appears in the header 
			(remove the same information)

	distribute-date
	distribute-date+posted
		Date:	When FML start to deliver the article
		Posted:	Date: of the original mail

	distribute-date+x-posted
		Date:	When FML start to deliver the article
		X-Posted:	Date: of the original mail

	distribute-date+x-original-date
		Date:	When FML start to deliver the article
		X-Original-Date:	Date: of the original mail
.fi

distribute-date は Date: と X-Mail-Count: が同じ順番になるためのもので
す。ださいMUAでソートする時だけは便利という説があります。
=E
"distribute-date" sets up both Date: and X-Mail-Count: has the same
order on time sequence. It is useful to sort mails on functionless
MUA.

.S	コマンドの結果やユーザへのメッセージのヘッダのカスタマイズ
=E.S	Customizing Header Fields Of The Command Status Report Mail
.k	コマンドのREPLYメールのヘッダ
.xref	data-structure
.k	$Envelope{'GH:field:'} 

コマンドの結果やユーザへのメッセージのメールヘッダは
=E
You can customize the mail header of command replies by

	$Envelope{'GH:field:'} 

で変更できます。GH というキーワードなのは SMTP Library の 
GenerateHeader() という関数内で使われるためです。ヘッダフィールドの並
び順は @HdrFieldsOrder の順番です。
.k	GenerateHeader()
.k	&GenerateHeader()
=E
"field" of it is the name of a header field. The order of fields in
the header is defined by @HdrFieldsOrder.

Example:
.k	$MAINTAINER
.k	$MAINTAINER_SIGNATURE

コマンドの結果のメールの From: を特定のアドレス(および signatureつき等)
に変えたい場合。なお通常は From: は $MAINTAINER です。
=E
Enforce "From: uja@aoi.chan.panic (AOICHAN PANIC)".

	$Envelope{'GH:From:'} = "uja@aoi.chan.panic (AOICHAN PANIC)";

.IF LANG == JAPANESE
From: $MAINTAINER に限っては $MAINTAINER_SIGNATURE で signature をつけ
ることはできますが、まぁ形を気にするなら↑の方法で直接定義した方がより
よいでしょう。Dynamic に補正する必要がある場合は 
$REPORT_HEADER_CONFIG_HOOKで定義するとよい。
.xref	$REPORT_HEADER_CONFIG_HOOK
.fi
.IF LANG == ENGLISH
$REPORT_HEADER_CONFIG_HOOK enables you to be more flexible.
.xref	$REPORT_HEADER_CONFIG_HOOK
.fi

.S	コマンドメールの結果のメールの Reply-To: を変更する
=E.S	Configure Reply-To: of a command mail reply
.k	$FORCE_COMMAND_REPLY_TO
.k	$Envelope{'GH:Reply-To:'}

=E
Described above, 

	&DEFINE_FIELD_OF_REPORT_MAIL('Reply-To', "Your Reply-To Address");

は次の設定と同じです。@HdrFieldsOrder 内で定義されているフィールドに対
して設定できます。
=E
is the same as 

	$Envelope{'GH:Reply-To:'} = "Your Reply-To Address";

where the field is one of fields defined in @HdrFieldsOrder.
.if LANG == JAPANESE
Backward compatibility で残っている変数が

	$FORCE_COMMAND_REPLY_TO = "address-you-want-to-use";

です。実際には $Envelope{'GH:Reply-To:'} への代入と全く同じです。
.fi

.S	Subject Tags; Subject: に (Elena 100) などのタグをつける
=E.S	Subject Tags
.l	$SUBJECT_TAG_TYPE
.k	$SUBJECT_TAG_TYPE
.l	$SUBJECT_FREE_FORM
.k	$SUBJECT_FREE_FORM

FMLのデフォールトのデザインポリシーは「Subject: はいじらない。本来メー
ルソフトが好きな形にフォーマットするものをサーバ側でフォーマットを押付
けるべきではない」「有効に使いもしないのに Subject:の本体の情報を減ら
すタグはつけるべきではない」というものです。
＃注意：この問題は本来はメールインターフェイスプログラムが賢いか？
＃否か？という問題に還元されるべきものです。
=E
In default FML does not append a subject tag to Subject:. 
FML appends always X-Mail-Count: and X-ML-Name: and so on.
The user client program (MUA) should show the useful screen using
them. IT SHOULD BE NOT THE FUNCTION OF MAILING LIST SERVERS.
However FML provides $SUBJECT_TAG_TYPE to append a subject tag.

Subject: にタグをつける時は$SUBJECT_TAG_TYPE という変数にタイプを設定
します。ちなみに makefml config で設定できます。

  $SUBJECT_TAG_TYPE		Subject: での形
=E
  $SUBJECT_TAG_TYPE		Subject: tag

	TYPE    Subject Example

		Subject: 	 	(DEFAULT, FML recommends this)
	(:)	Subject: (Elena:100)
	[:]	Subject: [Elena:100]	(hml 1.6 compatibility)
	( )	Subject: (Elena 100)
	[ ]	Subject: [Elena 100]
	(,)	Subject: (Elena,100)
	[,]	Subject: [Elena,100]
	()	Subject: (Elena)
	[]	Subject: [Elena]
	(ID)	Subject: (100)
	[ID]	Subject: [100]

[解説]
設定すると config.ph の中では次のような形に設定されています
=E
[DESCRIPTION]
FML interprets $SUBJECT_TAG_TYPE (e.g. "(:)") as a set of variables

	$SUBJECT_FREE_FORM = 1;
	$BEGIN_BRACKET     = '(';
	$BRACKET           = 'Elena';
	$BRACKET_SEPARATOR = ' ';
	$END_BRACKET       = ')';
	$SUBJECT_FREE_FORM_REGEXP = "\\($BRACKET \\d+\\)";

と定義すると (Elena 100) の形になり、Reply のメールの (Elena 99) をは
ずし新しい (Elena 100) をつけるようになります。

Another example: Subject: [Elena 100]

	$SUBJECT_FREE_FORM = 1;
	$BEGIN_BRACKET     = '[';
	$BRACKET           = 'Elena';
	$BRACKET_SEPARATOR = ' ';
	$END_BRACKET       = ']';
	$SUBJECT_FREE_FORM_REGEXP = "\\[$BRACKET \\d+\\]";

.if LANG == JAPANESE
[捕捉]
$CFVersion 3 以前にあった $SUBJECT_HML_FORM は config.ph が CFVersion
3 以前のものだと判定された場合は内部で$SUBJECT_TAG_TYPE = "[:]"; へ変
換されます。現在の設定ではすでに無効な変数です。
.fi

.S	Subject: の成形 ([Elena:ID] フォーマットを抜く) [obsolete]
=E.S	Cut off [Elena:ID] form strings in a subject
.key	Subjectから[Elena:ID]を抜く
.k	[Elena:ID]を抜く
.key	$STRIP_BRACKETS

.if LANG == JAPANESE
[backward compatible, obsolete]
歴史的意味しかないので古いconfig.phを使っているならともかく、
新たに使うことはないはずです(使わないように)。

	$STRIP_BRACKETS = 1;

とすると Subjectから [ML:fukachan] みたいな部分をカットする。これは 
Subject: [Elena:ID] の形で配送するための前処理です。
.fi
.if LANG == ENGLISH
Historical, not used today.
.fi

.S	TAGの [Elena:00001] の五桁の数字をＮ桁に変更
=E.S	Change the digit of the number of a subject tag
.k	$HML_FORM_LONG_ID

	$SUBJECT_FORM_LONG_ID (5; the number > 1)
.k	$SUBJECT_FORM_LONG_ID 
.l	$SUBJECT_FORM_LONG_ID 

はSubject:のTAGの数字部分の桁数を定義する。5(桁)がデフォールトだが 
$SUBJECT_FORM_LONG_ID 桁にする。$SUBJECT_FREE_FORM 使用時に有効な変数。
2 以上
=E
is the digit of the number. Default is 5.

.if LANG == JAPANESE
注意:
かつて

	５桁がデフォールトだが $HML_FORM_LONG_ID 桁にする。
	$SUBJECT_HML_FORM = 1; の時にのみ有効。

という設定もありました。現在では $SUBJECT_FORM_LONG_ID を使うべき。
$CFVersion 3 以前にあった $HML_FORM_LONG_ID は config.ph が CFVersion
3 以前のものだと判定された場合は内部で $SUBJECT_FREE_FORM_LONG_ID; へ
代入変換されます。現在の設定ではすでに無効な変数です。
.fi

.S	TAGの [Elena:00001] の 0 パディングをなくす
=E.S	No padding of a subject tag e.g. [Elena:00001]
.k	[Elena:ID]の0パディングをしない

	$SUBJECT_FORM_LONG_ID = -1;
.k	$SUBJECT_FORM_LONG_ID

.if LANG == JAPANESE
[注意] 昔は
	$HML_FORM_LONG_ID = -1;
.k	$HML_FORM_LONG_ID
も有効でしたが、今はありません。
.fi

.S	オリジナルの Message-ID を配送に使う
=E.S	Pass the original Message-Id through
.key	Message-ID
.l	Uniq_Identifier_of_Message-ID
.key	$USE_ORIGINAL_MESSAGE_ID

	$USE_ORIGINAL_MESSAGE_ID = 1; (obsolete but has the same effect)

とするとオリジナルの Message-ID を保存してヘッダにつけます。

	&DEFINE_FIELD_ORIGINAL('Message-Id');

と同じです(ヘッダフィールドを扱う関数が汎用でなかった時代の変数の名残)。
オリジナルを使うべきか？サーバでつけるべきか？どっちがいいかという議論
ですが
=E
has same effect.

.if LANG == JAPANESE
in fml-support ML's Count: 02687
.q
>| デフォールトは fml がつけます。それはオリジナルを通すより、強制的につ
>| けるとより無限 loop 検出がしやすくなるためです。

っていう doc/op.jp の論理は正しいかな？

original で妙な pattern の Message-ID を使われてて、ちゃんと detect で
きないとかあると嫌ね＃そうそうあるとはおもえないのだが

という可能性もある一方 ＃ばぐってるperlとかね〜

fml 自体がつける場合、キャッシュテーブルの有効な大きさが半分になってし
まふというのがあるので、オリジナルを使う方が有効な大きさは増える。
ループが発生する場合にどのくらい未来まで世界線をたどればいいのかは不明
なので統計的な議論はできない＃マシンスペックやネットワーク構成に依存

自分が自分に送るとかそういうのなら一瞬でループにはいるのでまず間違いな
く detect するはずという場合が多いという仮定が正しいならどちらのやり方
でも大差はない

という論理になるような気がする。
.~q
.fi

.S	ML 独自の Message-ID フォーマット
=E.S	Original Message-ID for your mailing list
.k	Message-ID の独自フォーマット
.xref	$HEADER_ADD_HOOK

これは
	&DEFINE_FIELD_FORCED('Message-Id', "適当なID");
で解決ですが。HOOKを使うやり方も書いておきます。
=E
&DEFINE_FIELD_FORCED('Message-Id', "your favorite ID"); enables your
mailing list original ID, which should be unique through the whole
spacetime.

Message-ID: uja@aoi.chan.panic は次のように config.ph にでも書けば 
$body の内容が @HdrFieldsOrder 中の : body: で展開されます。そのため
HOOKを使うなら @HdrFieldsOrder 中の : body: を切ってはいけません。
=E
Let be "Message-Id: uja@aoi.chan.panic".

&DEFINE_FIELD_FORCED('Message-Id', "uja$$\@aoi.chan.panic");

は次と同じ
=E
is the same as

$HEADER_ADD_HOOK = q#
   $body .= "Message-ID: uja@aoi.chan.panic\n";
#;

Another Example:
Message-ID: <19950518.01905.Elena.Lolobrigita@Baycity.jp>

$HEADER_ADD_HOOK = q#
   $body .= "Message-ID: ".
	sprintf("<%4d%02d%02d.%05d.%s>\n", 1900 + $year, $mon + 1, $mday, $ID, 
	"Elena.Lolobrigita@Baycity.jp");
#;

.S	宇宙歴 (外国TVシリーズMLで使ってます:-)
=E.S	Star Trek Stardate: field
.l	startrek
.k	STAR TREK
.k	StarDate
.k	$APPEND_STARDATE
.url	http://www.fml.org/href/Startrek/

config.ph で $APPEND_STARDATE = 1; とすると宇宙歴がつきます:-)
=E
$APPEND_STARDATE = 1; in config.ph enables 

	Date: Fri, 19 May 95 22:31:09  JST
	From: "No.6 Fukachan" <fukachan@phys.titech.ac.jp>
	Subject: Re: Nantonaku Leonard Nimoy 
	To: enterprise@phys.titech.ac.jp (Foreign TV Series ML)
	X-ML-Name: Prisoner
==>	X-Stardate: [-31]5697.8164

	…body…

みたいになります。スタートレックFAQ に C program がのっていますが、
libstardate.pl はその perl 版です。
.k	libstardate.pl

.S	一つのメーリングリストに複数の投稿用アドレス
=E.S	One ML has plural addresses for posting 
.key	複数の投稿用アドレス

何の意味があるのかは聞かないでください(笑)
例:
Elena@phys.titech.ac.jp というMLで
=E
To enable the aliases of mailing list name e.g. both addresses 

	Elena@phys.titech.ac.jp
	Anna@phys.titech.ac.jp

の両方を投稿可能にする。設定したいアドレスを config.ph で 
@MAIL_LIST_ALIASES という配列にずらずら書いて下さい。
.k	@MAIL_LIST_ALIASES
.k	@PLAY_TO
.l	@MAIL_LIST_ALIASES
=E
write aliases in the array @MAIL_LIST_ALIASES in config.ph.  The first
element should be the original $MAIL_LIST. If this array defined, FML
changes To: (if rewriting To: also) and Reply-To: of distribution
articles.

  @MAIL_LIST_ALIASES = ('Elena@phys.titech.ac.jp', 
			'Anna@phys.titech.ac.jp'
		    );

なおHOOKの設定はもう必要ありません。&FixHeaders の中で書き換えは行なわ
れます。
=E
In the past this technique is implemented by a hook. Today you need
not to set up a hook.

.if LANG == JAPANESE
その複数のアドレスを(ループチェックに使うために) @MAIL_LIST_ALIASES が
必要です。配列の先頭がオリジナルのアドレス(== $MAIL_LIST)です。

こうすると Elena になげても Anna に投げても同じＭＬと見なし、

	$MAIL_LIST 

をその投げた方のアドレスに設定します。その副作用として

	To: と Reply-To:

がそのアドレスになります。

注意： @PLAY_TO, $Playing_to は昔の変数名です。この変数は 
compatibility のため自動的に @MAIL_LIST_ALIASES に代入されます。
＃ libcompat.pl にBackward compatibility のためのコードがありますが…
.k	$Playing_to
.fi

.S	X-ML-Info: の内容を指定する
=E.S	Configure X-ML-Info:
.k	$X_ML_INFO_MESSAGE
.k	&DEFINE_FIELD_FORCED('x-ml-info', "書きたいこと");

	&DEFINE_FIELD_FORCED('x-ml-info', "書きたいこと");
=E
	&DEFINE_FIELD_FORCED('x-ml-info', "information you say");

.if LANG == JAPANESE
で強制的に指定すれば良いでしょう。一応昔風に変数

	$X_ML_INFO_MESSAGE

で指定した内容を優先して X-ML-Info: につけて配送できるようにもなってい
ます。そうでない場合はモードによって適当に作られた user friendly な内
容が付け加えられます。
.fi
.if LANG == ENGLISH
$X_ML_INFO_MESSAGE causes the same effect. 

.fi

.S	To: の Rewriting 処理
=E.S	To: rewriting
.l	$REWRITE_TO
.l	$NOT_REWRITE_TO
.l	$NOT_REWRITE_CC

.if LANG == JAPANESE
2.1A の途中(config.ph CFVersion: 3.2)から To: Cc: はオリジナルのものを
そのまま通しています。2.2 のデフォールトは素通しです。

可読性のため、To: フィールドは $MAIL_LIST が展開され、常にＭＬのアドレ
スが出るようにすることもできます。makefml config ML で変更できます。

本来は書く人が気をつけるべきものであってＭＬサーバが気にするべきもので
はないでしょう。でも世の中わけ分からん人が多いので、apparent-to: になっ
ていて見辛いとか一体どうしてこのＭＬに来たメールなの？とかよくわからな
いメールのために常に To: $MAIL_LIST をつけることが可読性のためにもよい
とおもいますが…

現在は $REWRITE_TO が
	値	挙動
	0 	素通し (FML 2.2 default)

	1 	To: に $MAIL_LIST が含まれていればOK
		To: には $MAIL_LIST が含まれていない場合は
			To: $MAIL_LIST,
			    元の To: 
		
		にする (FML 2.1 default)。

	2 	To: $MAIL_LIST に強制する。
		To: のオリジナル内容は失われる。
		
To: Cc: というのは人間がメールを書く時の単なる便宜上のもので、配送手段
の SMTP としてはなんら区別はしていません。ですから、情報を落さず、To: 
は可読性のために $MAIL_LIST としています。

[蛇足] なお、To: Cc: の中に重複して現れるアドレスには普通それらを一つ
にまとめて一通分のみが配送されます。だから複数あっても気にしないでね

＃注意：なお、$NOT_REWRITE_CC は obsolete にしました
.fi
.if LANG == ENGLISH
For your eyes To: an Cc: should be appropriate order.
Posters should check its own mails. 
FML can enforce "To: $MAIL_LIST" for your eyes. To use it, please set

	$REWRITE_TO = 0; (FML 2.2 default)
		pass the original To: and Cc: through

	$REWRITE_TO = 1;
		If To: contains $MAIL_LIST, let it be.
		If not, FML formats
			To: $MAIL_LIST $ML_FN,
				the-original-To-content
	$REWRITE_TO = 2;
		Always To: $MAIL_LIST $ML_FN.
		The original To: content is lost.		
.fi

.S	NIFTY対策をするか?(参加者にNIFの人もいる, OBSOLETE?)
=E.S	Against NIFTYSERVE.OR.JP (obsolete)
.label	NIFTY
.label	$AGAINST_NIFTY
.label	against-nifty
.k	$USE_ERRORS_TO

.if LANG == JAPANESE
注意: もう必要ないらしい

	$USE_ERRORS_TO = 1;

とすると Errors-To: をつけます。$AGAINST_NIFTY も同じ意味でしたが 
$CFVersion 3 ではなくなりました。

NIFTY は非常識にも、Errors-to という時代おくれの部分しかみてないので;_;、
config.ph あたりで

	$AGAINST_NIFTY = 1

とするとメール本文に

	Errors-To: $MAINTAINER
.k	Errors-To:

がつきます。これで NIFTY からのエラーメールが $MAINTAINER に返るように
なってくれます。後向きな解決法ですが;_;。
前向きなのは、みんなで文句をいって直させることです。
＃でも、僕はアカウントをもってない;_;。アカウントを持ってる人が一年く
らいいいつづけないとだめなんだろうなぁ（はぁ）

なお、$ERRORS_TO で Errors-To: の部分は $MAINTAINER から変更できます。
.fi
.if LANG == ENGLISH
obsolete. Please ignore this.
.fi

.S	Errors-To:をつける
=E.S	Append Errors-To:

RFC1123 に逆らって Erros-To: をつけるなら $USE_ERRORS_TO = 1; 
=E
RFC1123 prohibits Errors-To: but terrible MTA's or SMTP convertor
cannot understand it.  Such terrible MTA returns error mails to From:
or To: but can understand Errors-To:. Sigh...
==
$USE_ERRORS_TO = 1; if you append Errors-To:.

.S	メールの最後に付加情報をつける設定
=E.S	Mail Preamble And Trailer

.if LANG == JAPANESE
注意: 基本的にコマンドの話です。

	$PREAMBLE_MAILBODY	（前）
	$TRAILER_MAILBODY	（後）
	を本文の前後に必ず付けます。

つまり、
	e.g. HELP コマンドにたいして、

	$PREAMBLE_MAILBODY	（前）
	HELPファイル本文
	$TRAILER_MAILBODY	（後）

のようになります。昔のやり方は

   $SMTP_OPEN_HOOK = q# $e{'Body'} .= $PREAMBLE_BODY.$e{'Body'}; #;
   ＃注：普通のＭＬのメールに $PREAMBLE_BODY がついて配送

ですが今は汎用性のためSMTPライブラリ中で処理されます。
.fi
.if LANG == ENGLISH
To append additional information, you can use $PREAMBLE_MAILBODY and
$TRAILER_MAILBODY. The command mail reply body becomes

	$PREAMBLE_MAILBODY
	command mail reply
	$TRAILER_MAILBODY
.fi

これと同様にすれば、本文にメールカウントを埋め込むことも可能になります。
注意： 配送されるメール本体につける方法。これは倫理的な問題があるので
変数などで容易にできるように実装されていません。
=E
FML DOES NOT IMPLEMENT THE VARIABLE TO REWRITE MAIL BODY IN TO
PRESERVE MORAL. It is against morals to rewrite mail body even if it
is an electric mail. We should treat it as the same as a postal mail.
The rewriting is to cut out a postal mail and rewrite it is mail
forgery.
==
If you rewrite the distribution mail, please use a hook BY YOUR OWN
RESPONSIBILITY AND RISK.

Example: 注意:このHOOKが走る関数中では %e == %Envelope 
=E
Example: In this hook %e == %Envelope. Append "Mail Count:
sequence-number" in the begging of distributed articles.

   $SMTP_OPEN_HOOK = q# $e{'Body'} .= "Mail Count: $ID\n\n".$e{'Body'}; #;

例： メール本文にヘルプを常につけたす
=E
Example: Append "how to get help" to the last of a distributed article.

   $SMTP_OPEN_HOOK = q% 

	$e{'Body'} .= 
       "\nTo need help, please send 'help' to elena-ctl\@fml.org."; 

   %;

.# $Id$
.# Copyright (C) 1993-1999 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1999 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
