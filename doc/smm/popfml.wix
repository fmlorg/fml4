.C	POP による FML の運用
=E.C	Executing FML based on POP3
.k	POP3 を使った FML
.l	popfml
.k	POP3
.k	FML based on POP3

.S	Introduction

POP3 を使う場合は設定手順は3段階から成ります。

	1 ~/.netrc にPOPサーバとそのパスワード(いや〜ん)
	2 ~/.popfmlrc に popfml の設定を書く
	3 cron で定期的に popfml を呼ぶ
=E
	1 set POP server host, account(ML address), password to ~/.netrc
	2 configure ~/.popfmlrc
	3 set up cron which runs popfml periodically

これで、MLが作れました。なお、まとめおくりはまた別です。以下でPOPとFML
の設定について各ステップを説明します。
=E
This configuration is a minimum explanation:) We explain details below.

.S	POP経由の自動RefileやＭＬの実行 (bin/popfml.pl)
=E.S	Automatic Re-Filing And Execution Ml By Pop (Bin/Popfml.Pl)

POP経由でスプールへ、POP3 を使ってＭＬを実行するlibexec/popfml.pl がそ
れの専用プログラムとして実装されています。想定されているケースは
=E
We implement libexec/popfml.pl for the case that

	メールはPOP3で読めるだけ
	メールを受けとめてプログラムを呼べないという
		OS附属のメールシステム or ポリシー
=E
	* You read mails via POP3 only
	* Your mail server's administration policy prohibits programs
	  from run kicked by MTA.

等の場合のために存在します。理屈としては

	pop を使って取り寄せつつパイプで MH の rcvstore へ入力(inc)
	pop を使って取り寄せつつパイプで fml へ投げる (ML)

は同じです。実行する下請けプログラムが違うだけです。後はこれを cron で
実行します。サイトに一台POP3を喋れるメールサーバがあれば自分のマシンが
メールを受けられなくてもPOP3経由で自動的にメールをスプールしたりＭＬを
作ったりできます。このやり方は汎用なのでPOP3でメールが読める場合ならど
んなOSでも原理的にはMLが実行できるということになります。
＃でもまああくまで裏技というカテゴリでしょう。
=E
The fundamental logic is simple. FML (libexec/popfml.pl) retrieves a
mail via POP and injects it to fml.pl. This technique is functional,
so applicable to all cases/os's where you can only read mails (of
course you need "perl" works well :-). This technique works well both
on UNIX and Windows NT (beta test phase).

ついでにその後 cron で自動でfolderに入れるプログラムを走らせることもで
きるでしょう。なおMHと同様パスワードは $HOME/.netrc からとられます。ど
こかにパスワードを書いておかないといけないことがこの方法の最大の弱点で
す。
=E
A problem is you should store the POP3 password somewhere on your
machine. In default popfml.pl read it from ~/.netrc.

注意: inc_via_pop.pl は昔の名前(今はリンク)で、pop2recv.pl は backward
compatible の目的で popfml.pl にリンクされています。

.S	Popfml.pl 
.l	popfml.pl 
.k	popfml.pl 

SYNOPSIS:

    popfml.pl [-user username] [-h host] [-f config-file] -[hd]
    
    -user username			
    -host host(pop server running)
    -f    config-file
    -h    this message
    -d    debug mode

例: ユーザ fukachan が POP Server hikari にアクセスする
.k	{ユーザ fukachan が POP Server hikari にアクセスする}
=E
Example:
Retrieve a user "fukachan" 's mails from POP server "hikari" and
injects them to programs defined in ~/.popfmlrc.

	popfml.pl -user fukachan -host hikari

.S	Popfml.pl の設定
=E.S	Popfml.pl's Configuration
.k	popfml.pl
.l	libexec/popfml.pl
.xref	cron
.xref	fml_local

.if LANG == JAPANESE
popfml で実行するコマンドを定義する設定ファイルは

	~/.popexecrc
	~/.popfmlrc 
.k	.popexecrc
.k	.popfmlrc 

のいづれかです。互換性のため、設定ファイルはどちらも使えます。
もし .popexecrc と .  popfmlrc 両方あると .popexecrc が優先されます。
$POP_EXEC という変数がフィルタのプログラムになります。 "|" はあっても
なくても構いません。

.fi
=E
Configuration files is ~/.popfmlrc. popfml.pl runs $POP_EXEC variable
in it as a filtering program.

設定例: 全部のメールを fml.pl へ突っ込む。~/.popexecrc の中は
=E
Example: inject mails retrieved from POP servers into fml.pl.

	$POP_EXEC = "/usr/local/fml/fml.pl /var/spool/ml/Elena";
	1;

でいいわけですが、普通はＭＬと自分宛をわけたりするためにフィルタ
(e.g. fml_local)が必要な場合もあるでしょうが、基本的には同じです。
.k	$POP_EXEC
.xref	filter

crontab の書き方はOSによって異なります。4.4BSD では次のような内容の 
crontab を書いて、crontab crontab などとします。
=E
How to set up cron differs from OS to OS. An example crontab (4.4BSD)
is

* * * * * popfml.pl -user fukachan -host hikari

.xref cron

.if LANG == JAPANESE
Example 2:

   ~/.popexecrc という設定ファイルを使って、POP経由でfml_localへ渡す。
   またcronで popfml.pl を動かし、ＭＬと同様のことをすることにする。

   ~/.popexecrc の中は

   $POP_EXEC = "/usr/libexec/fml/fml_local -user fukachan || exit 75";
   1;

と書いておく。cron で

	popfml.pl -user fukachan -host hikari

を一分おきに起こす。
＃NetBSD の cron だと 
＃	* * * * * popfml.pl -user fukachan -host hikari
＃です。

これで
	一分に一回 POPサーバへメールが来ているかどうかを見にいって
	もしメールがあればそれを取り込んで一通ずつfml_local へ渡す
	fml_local が条件(~/.fmllocalrc)に従いrefile等を行なう

もし、このメールが来ている先が uja-ml で

   $POP_EXEC = "/usr/libexec/fml/fml.pl /var/spool/ml/uja-ml";

になっていれば 

	”POP経由でＭＬ（uja-ml）を運用している”

ことと同じです。
.fi

このやりかたを使うことで自分のマシンで sendmail を起こしていてメールを
受け止められなくてはいけないという制約はなくなります。これで理論上は
perl がちゃんと(?)動くOSなら WINDOWS だろうが Macintosh だろうが動くは
ずですが…?(未確認)。NT version の FML は(Metainfo sendmail を使う場合
を除いて)この technique を利用しています。
=E
FML via POP3 technique may enable FML to run on several plat homes out
of UNIX and administration policy.

.S	変数
=E.S	Variables

	$POPFML_PROG
.l	$POPFML_PROG
	$POP_EXEC
.l	$PO_EXEC

POP3 で読んできたメールをどの program へ渡せばいいのか？
例:
=E
filtering program which we inject a mail to. Example: 

   $POP_EXEC = "/usr/local/fml/fml.pl /var/spool/ml/Elena";

	$POP_SERVER
.l	$POP_SERVER
.k	$POP_SERVER

POP Server
 
	$POP_USER
.l	$POP_USER
.k	$POP_USER

ユーザ名(アカウント)はＭＬのアドレスに相当します。
=E
The pop user name (account) corresponds to the mailing list address 

	$POP_PASSWORD
.l	$POP_PASSWORD
.k	$POP_PASSWORD

通常 ~/.netrc からとられる。当然 $POP_USER と一組みです。
=E
POP password with $POP_USER.

	$POP_TIMEOUT
.l	$POP_TIMEOUT
.k	$POP_TIMEOUT

POP Server がずっこけた場合等に切断する秒数。デフォールトは45秒
=E
timeout to close POP connection with POP server.

	$POP_QUEUE_DIR
.l	$POP_QUEUE_DIR
.k	$POP_QUEUE_DIR

POP で読んできたメールを一回保存する場所。デフォールトは
=E
temporary queue directory.

	$DIR/var/pop.queue
.k	$DIR/var/pop.queue
.k	var/pop.queue

	$POP_LOGFILE
.l	$POP_LOGFILE
.k	$POP_LOGFILE

POP のサーバとの通信のログ。デフォールトは
=E
session log of POP3.

	$DIR/var/log/_poplog
.k	$DIR/var/log/_poplog
.k	var/log/_poplog

	$POPFML_MAX_CHILDREN
.k	$POPFML_MAX_CHILDREN
.l	$POPFML_MAX_CHILDREN

一回(通常1分)にする処理数。あんまりやると OS がひさん
=E
the maximum number of programs running at the same time. 
If the value is large, OS is painful ;-)

	$POP_PORT
.k	$POP_PORT
.l	$POP_PORT

110/tcp と違う場合に設定する(普通は設定しなくても大丈夫)。
=E
POP3 port number. The default is 110/tcp. Usually you need not to
concern it.

	$POPFML_QUEUE_EXPIRE_LIMIT
.k	$POPFML_QUEUE_EXPIRE_LIMIT

expire limit of queue spool.

.# $Id$
.# Copyright (C) 1993-1998 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1998 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
