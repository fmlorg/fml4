.C	POP による FML の運用
.k	POP3 を使った FML
.l	popfml

.S	Introduction

設定手順は3段階から成ります。

	1 ~/.netrc にPOPサーバとそのパスワード
	2 ~/.popfmlrc に popfml の設定を書く
	3 cron で定期的に popfml を呼ぶ

これで、MLが作れました。なお、まとめおくりはまた別です。以下でPOPとFML
の設定について各ステップを説明します。


.S	POP経由の自動RefileやＭＬの実行 (bin/popfml.pl)

POP経由でスプールへ、POP3 を使ってＭＬを実行するlibexec/popfml.pl がそ
れの専用プログラムとして実装されています。想定されているケースは

	メールはPOP3で読めるだけ
	メールを受けとめてプログラムを呼べないという
		OS附属のメールシステム or ポリシー

等の場合のために存在します。このやり方は汎用なのでPOP3でメールが読める
場合ならどんなOSでも原理的にはMLが実行できるということになります。
＃でもまああくまで裏技というカテゴリでしょう。

理屈としては

	pop を使って取り寄せつつパイプで MH の rcvstore へ入力(inc)
	pop を使って取り寄せつつパイプで fml へ投げる (ML)

は同じです。実行する下請けプログラムが違うだけです。後はこれを cron で
実行します。サイトに一台 UNIX マシンがあれば自分のマシンがメールを受け
られなくてもPOP3経由で自動的にメールをスプールしたりＭＬを作ったりでき
ます。

ついでに、その後 cron で自動でfolderに入れるプログラムを走らせることも
できるでしょう。なおMHと同様パスワードは $HOME/.netrc からとられます。
どこかにパスワードを書いておかないといけないことがこの方法の最大の弱点
です。

注意: inc_via_pop.pl は昔の名前(今はリンク)で、pop2recv.pl は backward
compatible の目的で popfml.pl にリンクされています。


.S	popfml.pl 
.l	popfml.pl 
.k	popfml.pl 

SYNOPSIS:

    popfml.pl [-user username] [-h host] [-fhd]
    
    -user username			
    -host host(pop server running)
    -f    config-file
    -h    this message
    -d    debug mode

例： ユーザ fukachan が POP Server hikari にアクセスする
.k	{ユーザ fukachan が POP Server hikari にアクセスする}

	popfml.pl -user fukachan -host hikari


.S	bin/popfml.pl の設定
.k	popfml.pl
.l	libexec/popfml.pl
.xref	cron
.xref	fml_local

popfml で実行するコマンドを定義する設定ファイルは

	~/.popexecrc
	~/.popfmlrc 
.k	.popexecrc
.k	.popfmlrc 

のいづれかです。どちらでも構いません(backward compatible)。
もし ~/.popexecrc と ~/.popfmlrc 両方あると .popexecrc が優先されます。

設定例：
	全部のメールを fml.pl へ渡していいなら、

~/.popexecrc の中は

	$POP_EXEC = "/usr/local/fml/fml.pl /var/spool/ml/Elena";
	1;

でいいわけですが、普通はＭＬと自分宛をわけたりするためにフィルタ
(e.g. fml_local)が必要な場合もあるでしょうが、基本的には同じです。
.k	$POP_EXEC
.xref	filter

	$POP_EXEC の中身はフィルタのプログラムになります。

注意： いつもと違って "| で始らないことに注意してください。

この後、pop-server が hikari、 user が fukachan なら

* * * * * popfml.pl -user fukachan -host hikari

のような内容の crontab を書いて、crontab crontab とかします。
この辺はOSによって異なります。
.xref cron

解説：

   ~/.popexecrc という設定ファイルを使って、POP経由でfml_localへ渡す。
   またcronで popfml.pl を動かし、ＭＬと同様のことをすることにする。

   ~/.popexecrc の中は

   $POP_EXEC = "/usr/libexec/fml/fml_local -user fukachan || exit 75";
   1;

と書いておく。cron で

	popfml.pl -user fukachan -host hikari

を一分おきに起こす。
＃NetBSD の cron だと 
＃	* * * * * popfml.pl -user fukachan -host hikari
＃です。

これで
	一分に一回 POPサーバへメールが来ているかどうかを見にいって
	もしメールがあればそれを取り込んで一通ずつfml_local へ渡す
	fml_local が条件(~/.fmllocalrc)に従いrefile等を行なう

もし、このメールが来ている先が uja-ml で

   $POP_EXEC = "/usr/libexec/fml/fml.pl /var/spool/ml/uja-ml";

になっていれば 

	”POP経由でＭＬ（uja-ml）を運用している”

ことと同じです。

このやりかたを使うことで自分のマシンで sendmail を起こしていてメールを
受け止められなくてはいけないという制約はなくなります。

これで原理的に perl が動くOSなら WINDOWS だろうが Macintosh だろうが動
くはずですが…?(未確認)
＃ Error Handling できないのを無視すれば(おい) 、NT は動くよ

.S	変数

	$POPFML_PROG
.l	$POPFML_PROG
	$POP_EXEC
.l	$PO_EXEC

POP3 で読んできたメールをどの program へ渡せばいいのか？
例:
   $POP_EXEC = "/usr/local/fml/fml.pl /var/spool/ml/Elena";

	$POP_SERVER
.l	$POP_SERVER
.k	$POP_SERVER

POP Server。 

	$POP_USER
.l	$POP_USER
.k	$POP_USER

ＭＬの管理者。

	$POP_PASSWORD
.l	$POP_PASSWORD
.k	$POP_PASSWORD

通常 ~/.netrc からとられる。当然 $POP_USER と一組みです。

	$POP_TIMEOUT
.l	$POP_TIMEOUT
.k	$POP_TIMEOUT

POP Server がずっこけた場合等に切断する秒数。デフォールトは45秒

	$POP_QUEUE_DIR
.l	$POP_QUEUE_DIR
.k	$POP_QUEUE_DIR

POP で読んできたメールを一回保存する場所。デフォールトは

	$DIR/var/pop.queue
.k	$DIR/var/pop.queue
.k	var/pop.queue

	$POP_LOGFILE
.l	$POP_LOGFILE
.k	$POP_LOGFILE

POP のサーバとの通信のログ。デフォールトは

	$DIR/var/log/_poplog
.k	$DIR/var/log/_poplog
.k	var/log/_poplog

	$POPFML_MAX_CHILDREN
.k	$POPFML_MAX_CHILDREN
.l	$POPFML_MAX_CHILDREN

一回(通常1分)にする処理数。あんまりやると OS がひさん

	$POP_PORT
.k	$POP_PORT
.l	$POP_PORT

110/tcp と違う場合に設定する(普通は設定しなくても大丈夫)。


.# $Id$
.# Copyright (C) 1993-1997 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1997 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
