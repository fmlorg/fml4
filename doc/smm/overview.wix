.C	メーリングリストサーバ Overview
=E.C	Mailing list server overview
.n	overview

.if LANG == JAPANESE
-- ＭＬサーバの設計ポリシーとはなんだろうか…

   ・日々の routine work をいかに自動処理化できるか？

   ・可能な限り user および ＭＬ管理者 にとっての自由度をあげる

   ・デフォールトは単に配送とユーザ用のコマンド(help や記事の取り
     寄せ、配送先の変更/停止等)

   ・しかしそれ以外の様々な機能もひととおり準備されていると便利
     これらの高度な設定は管理者が明示的に設定しなければならない。
     というのは管理者は何をしているのか知っているべきだし、
     何をしているかの把握はセキュリティ的にも望ましい。

    ………
.fi
.if LANG == ENGLISH
-- The design policy for a mailing list (ML) server

	* automation for daily routine work
	* the degree of freedom for users and ML maintainers
	* provides delivery function and commands for users/maintainers
	* available options are fruitful but the configuration should
	  be explicit.
	...
.fi

.S	ML Server Process Overview

ＭＬサーバは本質的にフィルタリングをするものです。ＭＬ宛のメールが来た
ら配送プログラム(MTA)から起動されいろいろな処理をした後、配送するべき
(MLの)メンバーリストを配送プログラムへ渡します。後は配送プログラムが配
送を行ないます。つまり配送はＭＬサーバの役目ではありません。
=E
A ML server is a filtering process. MTA (Mail Transfer Agent) on a
host receives mail and injects it to a program (fml.pl).  The
program checks the member or not, surgeries the header and passes the
mail to MTA. The ML server does not deliver mails by itself.


[図]
=E
[Figure]

あるホスト                                    ＭＬサーバのマシン
=E
<a host>                                      <ML Server Host>

ＭＬのメンバーからのメール
=E
mail from a member

   |
   V
  MTA (e.g. sendmail)  ------------------>     MTA (e.g. sendmail)

                                                |  kick off the ML server
                                                V

                                            ＭＬサーバ(ドライバともいう)
=E
                                            ML server (driver)

                                                |  
                                                V

                                    MTA (e.g. sendmail)  配送プロセス
=E		
                                    MTA (e.g. sendmail)  distribution process

                                             |  |  |  |  |  |
                                             V  V  V  V  V  V

                                             ＭＬのメンバー
=E
                                             members of the Mailing List 

配送プロセスは上図のように動きます。ＭＬサーバが普通のメールではなくあ
る命令(ＭＬを辞める、過去の記事を読むなど)を含んだメールをうけた場合は、
それ(コマンド)を実行してその結果をリクエストした人へ送り返します。
=E
See the figure above on the delivery process. When the ML server
receives a command mail (e.g. unsubscribe this list, get past
articles), it executes given commands and replies the result to the
sender.

上図からわかるとおりＭＬ宛のメールが来た時だけＭＬサーバは起動されます。
つまり"不定期"にです。そのためリアルタイムにＭＬの記事(メール)を読みた
くない人、例えば3時間に一度過去3時間のメールをまとめて読む「まとめ送り」
の場合は"定期的に"まとめ送り(.ptr{msend})を実行するプログラムが起動さ
れる必要があります。FMLは定期的に起動しなければならないプログラム群は
cronというオペレーティングシステムが提供する機能を使っています。
.xref cron
=E
A ML server runs only when mail comes in. It is irregular and event
driven. If a user receives articles not real time but once three
hours, another program (msend.pl) needs to run periodically. This is
called "digest delivery". FML uses cron to execute msend.pl
periodically. See cron(8).  In default FML digest delivery depends on
OS's cron for functionality.
.xref cron

.S	Historical View

FML は Mailing List Server の package (Perl Scripts package) で、
僕が壱から Full Scratch したものです。
＃おまけCDROMつき雑誌等にある「…の改良」の記述は間違った推測なのです

これからＭＬをはじめる方にはそのままＭＬサーバをカスタマイズして使いた
いとおもっている方には改造の PLATFORM として利用してもらうことを想定し
ています。
=E
FML package provides a lot of functionality of mailing list functions.
I hope it will be useful for from beginner to for people to hack
mailing lists.

.if	LANG == JAPANESE
最初の発端は(フリーソフトの例にもれず)

	bug っているサーバ、
	機能の足りないサーバ、
	直すより自分で書いた方が早い

単にそういう話でした(ま、よくある話ですね:-)。

歴史的に hml 1.6 を一時期使っていて、その設定ファイルをコンバートする
のは面倒でした。そのためhml 1.6 を emulation するように設定することも
できます。
.fi
=E
For (personal) historical reason FML can emulate hml 1.6.

.S	Policy

『Mailing List は Private Communication を便利にするツール(Filter) 』
という観点を重視しているため、デフォールトではメンバーのみが投稿やコマ
ンドを使える という考え方を尊重しています。
=E
I think "mailing list is a tool for more private communication". In
default only members of a ML can post articles and uses commands for
the ML.

プログラムを使う以上は日々の routine work をいかに自動処理化できるか？
使いやすくできるか？が重要です。そのためにもユーザにみえるインターフェ
イスなどは様々なインターフェイスが提供されて好きなものを使うのが理想で
しょう。デフォールトは
=E
It is important for ML to make routine work more easier.  FML provides
several addresses and command interfaces. You can use interfaces you
like. For example, , FML sets up an address for posting and another
address for commands for each mailing list (default).

	『投稿用のアドレス』と『コマンド用のアドレス』があり、
	それらのアドレスでMTA (e.g. sendmail)が受けて fml.pl を起動する

.if LANG == JAPANESE	
という形態です。しかし『可能な限り user および ＭＬ管理者 にとっての自
由度をあげる(簡単に設定できる自由度をできるだけ確保するべき)』という理
想も追求したいところです。その結果として

   ・設定ファイルには sendmail.cf なみに様々な変数が定義されている

のを筆頭に

   ・コマンド用のアドレスは listserv(majordomo) スタイルでも可能

   ・ sendmail が動いていなくても POP3 を使ってＭＬを実行する

等様々なインターフェイスがパッケージ中に収録されています。
.fi
=E
To provides the degree of freedom of customization, FML configuration
file has a lot of variables (like a sendmail.cf. FML prepares
listserv(majordomo) style command server interface.  If you can not
set up "a MTA receives mail and runs FML", you can use POP3 based
mailing list.

ＭＬサーバというものは一番肝心な部分はかなり簡単なのですが、実際にはさ
まざまな例外処理が発生します。それをいかに封じ込めるかをノウハウという
わけです。またユーザー環境による違いを吸収するためにさまざまな関数をサ
ポートする必要がありました。例えば ish, lha サポートはその一例といえる
でしょう。
=E
The core of mailing servers is so simple but we consider a lot of
exceptions. It must be a know-how. FML support several plat-homes on
almost all UNIX and Micro$oft Windows NT 4.0 (beta test) and provides
non UNIX culture function such as "mget" with "ish", "lha".

.if LANG == JAPANESE
一方セキュリティ的には

   ・必要なことはしても、できるだけ何もしない
   ・機能の増加は簡単な configuration で、しかし明示的に指定しない限り
     よきにはからって動くべきではない

といえます。これが

   ある機能をONにする変数はあるが、明示的に指定しない限りONにはしない
   つまりデフォールトでは様々な機能はOFFにされている。	

ということの背景です。
.fi
.if LANG == ENGLISH
For security FML runs with simplest functions in default. FML provides
a lot of functions but disables them in default. You need explicit
change on config.ph to enable some functions by using "makefml"
interface or by hand.
.fi

多くの変数があるのは、簡単にある変数の値を変えるだけで挙動が変えられる
ようにするためです。また、それにより設定を操作するためのインターフェイ
スを割と簡単に書くことができます。例えば makefml です。makefml を使っ
てのインストールや簡単な設定の変更が可能です(ある程度以上複雑なことは
手でやって下さい)。また頑張ればWWWインターフェイスもすぐ書けるでしょう
(でも誰も作らないな:-)。
=E
FML provides a lot of variables. You can only configure them in
config.ph (configuration file). FML provides an interactive interface
"makefml". You can configure typical settings by "makefml".
I believe it is easy to write WWW Interface which runs "makefml" under
it (but THERE EXIST NO TIME;-).

.if LANG == JAPANESE
各種機能はそれぞれの目的に応じて選んでみて下さい。例えば『あるＭＬのロー
カルな再配送』のような場合はコマンド機能を落して使うべきでしょう。

例: ip-connection を受けるアドレス (include ファイルを呼び出すアドレス)
に使う時は、makefml config listname で 配送モード指定を「誰でもPOST可
能」にする。

	$PERMIT_POST_FROM = "anyone";
.fi

.S	機能の概要
=E.S	Function overviews

.if LANG == JAPANESE
ＭＬサーバはおおまかに
				設定ファイル(config.ph)の変数
	_____________________________________________________
	
	配送用のアドレス	$MAIL_LIST	
	コマンド用のアドレス	$CONTROL_ADDRESS
.l 	$MAIL_LIST
.l	$CONTROL_ADDRESS

からなります。特別な場合には(歴史的理由により) hml 1.6 (正確にはその元
祖の shell script) というサーバを Emulate します。特別な場合とは 

	配送用のアドレス==コマンド用のアドレス
	($MAIL_LIST == $CONTROL_ADDRESS)

に相当します。
.fi
.if LANG == ENGLISH
FML provides addresses for post and commands.

				variables in config.ph 
	_____________________________________________________
	
	address for post	$MAIL_LIST	
	address for command	$CONTROL_ADDRESS

You can set $MAIL_LIST == $CONTROL_ADDRESS. But in its case, FML
requires the keyword to identify mail is for post or for commands.
.fi

ＭＬサーバの現在の代表的な機能は以下のようなものです。
=E
The representative functions of FML are

   ○ 配送用のアドレスとコマンド用のアドレス 
	-- Chapter .ptr{access_policy}
=E
   * addresses for post and commands 
	-- Chapter .ptr{access_policy}

	それぞれについてアクセス制御や自動登録の設定
	なお特別な場合「配送用のアドレス==コマンド用のアドレス」は hml 1.6
=E
	each access control for each address

   ○ 様々な自動登録方式
	-- Chapter .ptr{auto-regist}
=E
   * 4 ways of automatic registration
	-- Chapter .ptr{auto-regist}

	前述のどのアドレスで？ x 4種類 x 各カスタマイズ変数…

   ○ unsubscribe confirmation
=E
   * unsubscribe confirmation

	confirmation を bye/unsubscribe コマンドでも使用可能に
=E
	confirmation for bye/unsubscribe command 

   ○ リモートメインテナンス/リモート管理
	-- Chapter .ptr{remote}
=E
   * remote maintenance 
	-- Chapter .ptr{remote}

	PGP, パスワード認証等の選択
	-- Chapter .ptr{pgp}
=E
	PGP authentication, password authentication ...
	-- Chapter .ptr{pgp}

   ○ 様々なヘッダカスタマイズ
	-- Chapter .ptr{header-custom}
=E
   * large degrees of freedom for header customization
	-- Chapter .ptr{header-custom}

   ○ セキュリティ: 内蔵トラフィックモニタ (e.g. メール爆弾対策)
	-- Chapter .ptr{MTI}
=E
   * Security: internal traffic monitor
	-- Chapter .ptr{MTI}

	例: トラフィックがある程度以上になると
	ＭＬはメールを自動的に受け付けなくなる
=E
	If a lot of mails are injected to ML, FML rejects more mails
	when the traffic overcomes some threshold.

   ○ セキュリティ: フィルタリングコード (e.g. SPAM 対策)
	-- Chapter .ptr{EnvelopeFilter}
=E
   * Security: filtering
	-- Chapter .ptr{EnvelopeFilter}

	ヘッダの各フィールドごとのフィルタリングコード
=E
	Filtering for each field of a mail header

   ○ 様々なコマンド
	-- Chapter .ptr{mget}
=E
   * a lot of commands
	-- Chapter .ptr{mget}

	ファイル取り寄せのコマンド mget コマンドのいろいろなファイル形
	式のサポート
=E
	* mget, get, ...

   ○ まとめおくり
	-- Chapter .ptr{msend}
=E
   * digest (matome okuri)
	-- Chapter .ptr{msend}

   ○ SMTP配送方式(リレー)
	-- Chapter .ptr{smtp}
=E
   * SMTP (relay is available but must be of no use today?)
	-- Chapter .ptr{smtp}

   ○ その他(MIME処理等)
	-- Chapter .ptr{MIME}
=E
   * Others, e.g. MIME (Japanese)
	-- Chapter .ptr{MIME}

   ○ ＭＬに投稿された記事をHTML 4.0形式で作成する。thread化もする。
	-- Chapter .ptr{SyncHtml} .ptr{href}
=E
   * Convert articles to HTML 4.0 format files with thread.	
	-- Chapter .ptr{SyncHtml} .ptr{href}

   ○ 記事のアーカイブ、Expire等
	-- Chapter .ptr{archive} .ptr{expire}
=E
   * archive, expire of ML articles
	-- Chapter .ptr{archive} .ptr{expire}

   ○ 複数のコマンドインターフェイス (listserv や majordomo style)
	みかけがあたかも listserv のようなコマンドの送り方を可能にする
	-- Chapter .ptr{fmlserv}
=E
   * several interfaces such as listserv or majordomo style
	-- Chapter .ptr{fmlserv}

必要に応じて設定ファイルで機能の追加・削減を行うことができます。
簡単なものは makefml で可能です。
=E
You can add and remove functions in config.ph. Firstly please use
"makefml config" to change simple configurations.

.S	インストール
=E.S	Installation
.xref	install

とりあえず細かいチューニングを行なわなくてよいなら
=E
The simplest way to install Fml system is to do in the top directory
of the fml source
# Hence a lot of variables are pre-defined.

	perl makefml 

=E
when you make a new ML 
=S
	perl makefml newml ML-Name
=S
e.g. to make elena@your-domain mailing list
=S
	perl makefml newml elena

ことで、インストールをします。ML の作成は

	perl makefml newml ＭＬの名前

で何個でも作れます。説明は INSTALL というファイルを見て下さい。
=E
Please see the file INSTALL for the detail.


.C	fml の機能についての概要
=E.C	Brief Overview of FML functions

注意: インストールやＭＬの作成の仕方についての詳細は INSTALL.jp という
ファイルを読んで下さい。
=E
Please see the file INSTALL.en for the detail on installation, how to
create mailing lists...

.S	Directory 構造
=E.S	Directory structure

基本的に directory は2箇所からなります。インストール時に makefml で指
定できます。インストール方法の詳細はINSTALLというファイルを参照。
=E
Directory's FML uses consists of two regions. One ($EXEC_DIR in
makefml) is where executables and libraries exist and another ($ML_DIR
in makefml) is one under which each ML's home directories. You can
change these variables when "makefml install".

	1 $EXEC_DIR (と makefml でいっている) 
	  実行ファイルとライブラリ群 (e.g. /usr/local/fml)
=E
	1 $EXEC_DIR in makefml
	  executable and libraries (e.g. /usr/local/fml)
	  
	2 $ML_DIR (e.g. /var/spool/ml)
	  各ＭＬ群が /var/spool/ml/ に作られる
=E
	2 $ML_DIR (e.g. /var/spool/ml)
          each ML's spool (/var/spool/ml/each-ml)

	   /var/spool/ml/elena/		(elena ML)
	   /var/spool/ml/mirei/		(mirei ML)
	   /var/spool/ml/Freekick/	(Freekick ML)
	   /var/spool/ml/sakura/	(sakura ML)
	   /var/spool/ml/tomoyo/	(tomoyo ML)
	   /var/spool/ml/kerochan/	(kerochan ML)
	   ...

elena ML 関係の全てのファイルは /var/spool/ml/elena/ 以下に作られます。
設定ファイル(config.ph)や記事のスプールも同様です。複数のＭＬを作成す
ると /var/spool/ml/ 以下に並びます。
=E
/var/spool/ml/elena has config.ph (configuration files), log files,
spools related to "elena" ML exist only under it.  One directory is
for one ML. It is closed. We call the directory the ML's home
(directory).

.S	インストーラ
=E.S	Installer

対話的処理をする makefml という簡単なインターフェイス(CUI)がついてきま
す。これがインストールやＭＬの作成簡単な設定の変更を可能にしています。
詳しくは INSTALL.jp を参照
=E
"makefml" is simple CUI interface for you. It is an installer and
configure which provides typical settings. Please see INSTALL.en for
more details for fundamental settings.  This document is for more
advanced settings than INSTALL.

初心者には最初は何をどういじってインストールするのかは良くわからないも
のです。とりあえず簡単なものはこれでできるはずです。詳細については 
INSTALL.jp というファイルを見て下さい。より高度な設定についてはこの文
書/パッケージ中の doc/op.jp 『FML 2.2 の設計と実装)』を読んで下さい。

『ある動作をするか？否か？』については config.ph という設定ファイルで
操作することができます。アーカイブやスプール、help ファイルの場所 や
『tar ish lha のような system のコマンド』のようなものもすべて hard
coding ではなく user が外部から制御できる変数として定義されています。
変数リストについて興味があれば cf/MANIFEST を見るとわかります。
=E
Almost all user defined variables are shown in FML configuration
file "config.ph". You can control FML by config.ph.

.S	ドキュメントについて
=E.S	On documents

PLAIN TEXT 版はパッケージ中の doc/ にあらかじめ用意されています。README
や INSTALLマニュアル の HTML 版も ぱっけーじ/doc/html/ の下に用意され
ています。doc/op.jp のHTML 版は巨大なのでパッケージにはついていません。
必要なら
=E
All documents of plain text version are bundled in a FML distribution
package. HTML version documents except this "op.*" documents are also
bundled in it since "op.*" are very large. If you want html version of
this document, please run

	(shell prompt)% make doc 

でつくって下さい。ドキュメントの最新版は
=E
Latest version of documents are available in

.url	http://www.fml.org/fml/

にあります。

.S	一般ユーザー権限ということ
=E.S	Non-privileged user
.l	non_privileged_user

特別なユーザー 例えば daemon 等で動かすのはセキュリティ上好ましくあり
ません。よって一般ユーザー、できればＭＬ用の特別なユーザーを用意し、そ
のユーザの権限でFMLを動かすのが望まれます。通常FMLプロセスのオーナー
(ユーザー)は makefml で作られる include というファイルの所有者です。
また FML は実装上 Trusted User 等を気にする必要はないので daemon で動
かす必要もありません。
=E
We recommend FML runs as a non-privileged user prepared for this
purpose. The privileged user should NOT be used as could as
possible. If you use sendmail, "include" file's owner is the process
owner of FML (fml.pl).

少しメカニズムの話をするとMTA (e.g. sendmail) はユーザー権限で動かすた
めに setuid() を行ない、そのユーザーとして fml.pl を起動します。POSIX 
準拠 OSは setuid() をちゃんと行なえる user は root に限られます。これ
はこれで正しい選択だし、ターゲットの 4.4BSD もそういう実装をとっていま
す。そのためMTAから setuid() をしてfml.plを動かすプログラムを走らせた
りはせずにその辺はMTAにまかせています。
=E
MTA runs fml.pl as a user process using setuid() call. The user fml.pl
switches to the owner of "include" file. MTA must run as a root under
POSIX standard basis, such as 4.4BSD basis OS's. 
FML trusts MTA can switch to a user. So :include: style is in default.

sendmail 等がうまく setuid() を実行できない場合 4.3 BSD では fml.c を 
compile して使えば良いでしょう。makefml でインストールしていれば 
makefml が作った Makefile を使うと
=E
If MTA cannot do setuid(), you can use C wrapper. On 4.3BSD, you can
make C wrapper at the ML's home directory by

	(shell prompt)% make fml

で fml および fml-ctl という実行ファイルが生成され、setuid されます。
fml は投稿用アドレス、fml-ctl はコマンド用アドレスに使います。
=E
fml is setuid()'ed to you (the owner ran "make"). You can have two
"fml" and "fml-ctl" executables by make. "fml" is a wrapper for the
address for post, "fml-ctl" is one for command.

4.3BSD では一般ユーザーに setuid() されたこの状態で setuid() が実行で
きます。POSIX 準拠等OSでは ＊非常に危ないですが＊ この fml を root 権
限に setuid しなければなりません。fml, fml-ctl をどこにおいて使うべき
か？について自信がない場合あなたのサイトもしくはそのマシンの管理者によ
く相談して下さい。
=E
On the other hand on POSIX basis OS's, only "root" process can do
setuid() call. You need to set up root-setuid()'ed C wrappers. THIS IS
VERY DANGEROUS. Please set up them with consulting administrators on
that such as the location of C wrapper ...

.S	ライブラリ・モジュールとダイナミック・ローディング
=E.S	Dynamic library loading 

.if LANG == JAPANESE
モジュールにすることにより

	マスターコードの保守
	自分だけのモジュールを独立に保守

することが容易になります。モジュールはすべて lib"module-name".pl とい
うファイル名です。

もともとは SMTP部分の独立保守と 常時使うわけではないコマンド部分を切り
離すことを目的としたモジュール化でしたが、現在では必要に応じてダイナミッ
クローディングされる様々なライブラリが提供されています。ファイルは一杯
ありますが常に使われるのはそのうちの2、3個くらいです。後は週に一度とか
明示的に設定がされた場合のみにしか使われないようなものです。

モジュールはインターフェイス仕様さえ不変なら独立に保守できます。
contribution され独立に保守されているコードも同様にライブラリに入って
います。例えば libtraffic.pl は

	libfml.pl の関数呼びだしインターフェイスに合わせれば、後は
	すべて user defined で作れる

というよい例です。
＃ぼくは中身についてタッチしていません。fml master code tree とは独立
＃に保守されています（感謝）

FML はこのライブラリ群が本体で、その動きを設定ファイル(config.ph)でカ
スタマイズするようになっています。そのためライブラリ・モジュールは一箇
所にまとめておくと『ひとつのfmlで複数のＭＬを扱うように拡張』等も容易
になり、また version up も楽です。makefml でインストールする場合はそう
いう形態になります。

例:
	ライブラリは /usr/local/fml の下に全部入れる
	ＭＬ群は /var/spool/ml/each-ml/
	   (e.g. /var/spool/ml/each-ml/config.ph )

ＭＬを配送ではなく特定の目的のサーバのみを dynamic loading して
『特定の目的のサーバ』にすることも簡単にできます。
＃config.ph で特定のファイル名を $LOAD_LIBRARY に設定する

これにより、

	コマンド 専用サーバ
	ftp 用サーバ
	ftpmail  専用サーバ 
	メールで request をうけてURLの中身を返すサーバ

等の専用サーバに設定することもできます。	
.fi
.if LANG == ENGLISH
FML uses a lot of dynamic loading libraries via perl "require"
statement. It enables extensions, independent customization, separation
of maintenance. Libraries are named lib"module-name".pl such as
libsmtp.pl (SMTP library). 

In default "makefml install" installs executables and libraries to
one directory e.g. /usr/local/fml. "makefml newml elena" makes a
mailing list. The home directory is e.g. /var/spool/ml/elena. When FML
runs, /usr/local/fml/fml.pl runs by reading the configuration
/var/spool/ml/elena/config.ph and libraries /usr/local/fml/lib*pl.
.fi

.include files.wix

.S	設定ファイル (config.ph)
=E.S	configuration file (config.ph)

できるだけソースコードを直接いじらなくてもたくさんの制御変数とフックで
カスタマイズできるようになっています。カスタマイズ可能な変数は 
config.ph 中に簡単な説明とともに書いてあるのでこれを変更することで行な
います。基本的なものについては makefml で変更ができます。
=E
FML provides a lot of variables. You can only configure them in
config.ph (configuration file). FML provides an interactive interface
"makefml". You can configure representative variables with "makefml".

.S	アクセス制御と自動登録
=E.S	Access control and automatic registration
.xref	autoregist

.if LANG == JAPANESE
前述のとおりデフォールトは来たメールの From: を見てメンバーチェックを
します。FML 2.1 以降では投稿とコマンドそれぞれについて以下の

	・誰からの投稿を許すか？
		だれでもOK			anyone
		登録されているメンバーだけ	members_only
		モデレーターだけ		moderator (.ptr{moderators})

	・もし、登録されているメンバー以外から来た場合にはどうするか？
		許否				reject
		自動登録			auto_regist
		無視(管理者へ報告だけする)	ignore

を設定できます。デフォールトはいずれも

	メンバーのみ(members_only) 投稿/コマンドの使用 が可能
	もしメンバー以外から来たら許否(reject)

です。自動登録は"投稿がメンバーだけ"(members_only)の場合に

	もしメンバー以外から来たら自動登録 → auto_regist へ変更

することで行ないます。自動登録のタイプは4種類あります。
.fi
.if LANG == ENGLISH
The top menu of "makefml config" shows 

   1    POLICY OF ACCESS (WHO CAN POST AND USE COMMANDS)

        [POST]
          PERMIT_POST_FROM                 members_only
          WHEN POST FROM NOT MEMBER        reject

        [COMMAND]                          
          PERMIT_COMMAND_FROM              members_only
          WHEN COMMAND FROM NOT MEMBER     reject

	.....


You can choice the following values for
    * PERMIT POST or COMMANDS FROM WHOM ?
    * IF MAIL COMES FROM NOT MEMBER, WHAT FML DOES?

The choice for "* PERMIT POST or COMMANDS FROM WHOM ?" is one of

	anyone					
	members_only	(default)
	moderator (.ptr{moderators})

The choice of function for "* IF MAIL COMES FROM NOT MEMBER, WHAT
FML DOES?" is one of

	reject		(default)
	auto_regist
	ignore

FML checks in-coming mail is from a member or not. It is default. If
from not member, FML reject the mail and notifies it to the sender. If
from not member and automatic registrable (auto_regist is selected),
FML try to do automatic registration.
.fi

.S	ファイル操作: 取り寄せとまとめ送り
=E.S	File Operations
.xref	mget, msend

get, mget, matome 等のコマンドにはオプションで tar.gz で固めてとか 
MIME/Multipart 形で記事をまとめて送り返して欲しい等の変更ができます。
mget と まとめおくりでの User interface は次のようなものが取り揃えられ
ています。mget コマンド毎に指定を変えることができます。
=E
"get", "mget" and "digest" delivery provides a lot of formats. The
following formats of mails is available.


	PLAIN TEST 
		UNIX FROM
		RFC934	
		RFC1153
		MIME/Multipart

	COMPRESSED FILE
		gzip UNIX FROM file
		tar + gzip
		uuencode

	   (日本使用)
		Lha + Ish 	(自動SJIS変換可)
		Lha + uuencode 	(自動SJIS変換可)
=E
	   (used only in Japanese ?)
		lha + ish
		lha + uuencode

mget で取り寄せられるのはデフォールトは $SPOOL_DIR (default "spool") 
ですが対象は標準のＭＬの記事スプール以外にも @ARCHIVE_DIR に指定するこ
とで増やすことができます。
=E
FML scans $SPOOL_DIR, @ARCHIVE_DIR for files of target for "mget".

ファイル操作の応用編としてユーザーが put も get できるように拡張された
コマンドも実装しています(library コマンド)。ただしデフォールトでは、
put するファイル名はセキュリティ上選べません。ファイル名を明示的に指定
する場合は安全のため管理者が変更するべきです。
.xref library
=E
"library" command enables "put" and "get" via FML whereas "library"
command permits only "number" as the file name to put.

.S	MIME や base64 等の処理 
=E.S	MIME and Base64 decoding
.xref	href

メール本文は基本的に素通しです。Subject のMIMEは decode してサマリーを
作ります(2.2ではデフォールト)。またHTMLでは base64 の画像等の変換処理
を下請けのプログラムに渡して行ないます。つまりメール中の gif ファイル
を変換してメールの記事の html を生成します。
=E
Fundamentally FML passes MIME header fields through. FML decodes
Subject: and save it in the summary file (default). If a base64
decoder is defined, FML decodes the base64 part in mail when a HTML
article is created.

.S	リモートでＭＬを管理すること
=E.S	Remote administration
.xref	remote
.xref	pgp

デフォールトではできません。設定ファイルで
=E
In default FML disables remote administration. 
If you use remote administration, please set 

	$REMOTE_ADMINISTRATION  = 1;

を設定するとできるようになります(makefmlでも設定できます)。
管理者として登録された人に対し
=E
You can change this with "makefml config". We check whether the
command is from an administrator or not with one or mixed ones of
methods:

	From: 行での認証
	管理者一人ごとのパスワード	(秘密鍵暗合)
	PGPベースでの認証		(公開鍵暗合)
=E
	From: address 
	password authentication
	PGP authentication     
.xref	pgp

の組合せで認証をします。デフォールトは
=E
In default we check a set of "From: address" and "password"
authentication. If possible, we recommend PGP authentication.

	From: 行での認証
	管理者一人ごとのパスワード	(秘密鍵暗合)

です。どうせやるなら PGPベースが推奨です:)

.if LANG == JAPANESE
FML 1.0 で『管理者が本当に操作しているかどうか?という点に関して保証で
きない』という理由ではずしたリモート管理(アドミンコマンド)を再実装し、
サポートします。保証できないという意味は From: での認証は簡単に偽造で
きるからです。

多くの場合ＭＬではリモート操作はパスワードで認証しています。しかしなが
ら、メールの中では平文パスワードを書く必要がありますし、ひとりの管理者
のパスワードは毎回同じで使い捨てではありません(時系列に沿って)。よって、
間違ってメールが読まれた場合を考えると危険なわけです。

PGPベースではこの心配はありません(もちろんあるメール全体を読まれていれ
ばそのメールと全く同じ内容を実行だけは可能なはずですが)。

FMLのリモート管理モードではパスワードは各管理者ごとに設定できます。
PGPの場合は管理者一人一人の public key を入れることになります。

管理者全体で一つの共通パスワードというようなださい実装はしません。これ
は普通の UNIX の パスワードシステム のミニチュア版です。サーバ側では 
$DIR/etc/passwd に 管理者ごとにパスワードを保存しています。 保証の度合
が上がったわけではありませんが、パスワードは crypt し保存しています。
一応かつての UNIX 程度の保証はされます。パスワードの保存を MD5 にする
こともできます。PGPではMLごとに $DIR/etc/pgp/ 以下に keyringを作りMLご
とに別のPGPPATHを用います。
.xref	pgp
.fi

.S	.forward
.xref	.forward

通常 include ファイルを設定するのは /etc/aliases ですが .forward は本
質的に同じものです。もっとも .forward の場合ユーザー名以外のものを使う
ことはできないわけですが。だから include は .forward に設定すれば同じ
です。詳細は .ptr{.forward}
=E
When you cannot edit /etc/aliases, you can set up an account as a
mailing list. In that case .forward is "include" file itself.
It is useful???

.S	Listserv/Majordomo
.xref	fmlserv

.if LANG == JAPANESE
   Listserv 互換用インターフェイス 	libexec/fmlserv.pl

fmlserv.pl を呼ぶようにした場合 コマンドは

	コマンド ＭＬ名前 オプション

になります。ようは Listserv 形式のしんたっくすで fml のコマンドを使え
るようにしたインターフェイスです。

	listserv:  fmlserv
	majordomo: fmlserv
	fmlserv: :include:/var/spool/ml/include/fmlserv

のようにしても大丈夫です。

.fi
.if LANG == ENGLISH
fmlserv.pl provides listserv(majordomo) style interface such as.
.xref fmlserv

	command	<ML> command options
e.g.
	get elena last:10 mp

get the latest 10 articles of elena ML with the MIME/multipart format.
.fi

.S	MTAとの通信 (e.g. sendmail)
=E.S	Communication with MTA (e.g. sendmail)

.if LANG == JAPANESE
FMLは sendmail 等の SMTP配信エージェントと自力で通信します。

	$Envelope{'mci:mailer'} = 'ipc'; (default)

の場合 $HOST で指定されているマシンにSMTP でコネクションを張り配送をま
かせます。$HOSTのデフォールトは自分のマシンで、つまり自分のマシンで走っ
ているMTAと通信します。
.fi
.if LANG == ENGLISH
FML communicates with MTA via SMTP (Simple Mail Transfer Protocol) to
deliver a distribution mail. The default configuration is

	$Envelope{'mci:mailer'} = 'ipc'; (default)

is 'ipc'. FML makes a connection via SMTP to MTA and sends mail to
it. If 'prog' is defined, fml.pl executes sendmail ($SENDMAIL) as a
program and injects the mail to it.
.fi

	$Envelope{'mci:mailer'} = 'prog';

の場合 $SENDMAIL という変数のプログラムを起動してそれに配送をさせるこ
ともできます。

SMTP を理解してくれるなら sendmail である必要もないし配送用に使える
SMTPサーバ があれば動きます。それは必ずしも自分のマシンで sendmail が
走っている必要はありません。各サイトで走っているSMTPを理解してくれる配
送プログラムがあればよいです。sendmail が走っているマシンが一つもなけ
れば sendmail を起動するように 'prog' を指定すればよいです。
=E
The default MTA is 'localhost' MTA. Hosts defined in $HOST and @HOSTS
are also available as a MTA. FML connects via SMTP. If no host runs
MTA, use 'prog'.

.S	MTAがメールを受けとれないマシンの時
=E.S	When your machine which FML runs on cannot receive mail
.xref	popfml

逆にどうやってメールを受けとるかという問題があります。通常 SMTP を理解
する受けとるサーバが走っていて、メールを受けとり fml.pl へ渡します。例
えば一定時間間隔で POP をかけてＭＬを動かし、配送はサイトの SMTP サー
バにやらせることでＭＬを実行するこは可能です。
=E
How FML receives mail is a problem. For security some sites prohibit
MTA to run a program. If so, you can use popfml.pl. popfml.pl connects
a POP server via POP3, receives mail for a ML and injects it to
fml.pl.

.S	セキュリティ
=E.S	Security

ＭＬのトラフィックをモニターして一気にメールが送られてきたらメール爆弾
と判定してrejectするとかヘッダやメール本文の特定のパターンをフィルタリ
ングする機能もあります。詳しくは .ptr{security}
=E
See .ptr{security} for more details, e.g.
	mail traffic monitor to reject mail bombs 
	filtering based on keywords in fields of a header and body

.S	その他の機能
=E.S	Others

.if LANG == JAPANESE
ロックは flock によるロック処理をデフォールトにしています。が flock() 
が動かない場合 UNIX V7 以来の link() によるロックを使います。

リレーサーバを設定できます。例えば、関東方面、関西方面にこねがあって、
マシンが調達できる場合、関東方面のメールを一回そのマシンに送ることで関
東方面へおくるメールを一つのメールでいっきにおくって、配送はそのリレー
先にまかすことで、配送を高速化できます。
注意: 現代のMTAでは対SPAM設定が普通ですからやるのであればちゃんと折衝
しましょう。

プロバイダ等でDISKに制限があったりする場合は、古い記事は消したいとおも
いますがそのための自動圧縮や Expire の機能をサポートします。

newsyslog(8) 的機能をサポートしています。古いログは自動的に

	members -> var/log/members.0 

のように変換し保存するようにしています。デフォールトでは members ファ
イルや まとめおくりのログに対して newsyslog を実行しています。
＃参照: % man newsyslog

一つのマシン上にある ＭＬ間のクロスポスト の場合、
複数のＭＬに入っている人には一通しか送らないようにします。
＃サイトにまたがる場合はデータのシンクロが必要なため実験段階です

おまけ機能として、スタートレックの宇宙歴をサポート(笑)します。
contrib/Utilities に宇宙歴をつけるmh, mh-e user interface つき:-)です。
.xref	startrek x-stardate
.fi
.if LANG == ENGLISH
Other topics:

	* flock(2), If flock(2) does not work, link(2) lock.
	* relaying. Today relaying is not used.
	* Automatic expiration, archiving
	* Newsyslog 
	* crosspost
	* Star Trek Stardate:
.fi

.C	Version Up と互換性について
=E.C	Version Up and Compatibility

.S	how to version up
.xref	version-up

makefml を使ってインストールしてもらうのが確実です。makefml の使い方に
ついては INSTALL.jp というファイルを見て下さい。
=E
Please use "makefml" for installation. See INSTALL.en for more details.

.S	新しい機能を有効にするには？
=E.S	Enable new functions

通常新しい機能・オプションは明示的に指定しない限り動きません。
設定変更は config.ph で行ないます。詳しくは INSTALL.jp を参照。
=E
A new function is disabled in default. A new function is available
when You set up it in config.ph explicitly. See INSTALL.en. 

version up して以前になかった機能を使うなら必要な変数を op.jp などから
探し設定を付け加えるます。すでにあるが使われていない機能を新たにONにす
るなら config.ph をサーチして値を1にするとか適当な設定を書くなどします。

基本的な変数であれば makefml で設定できます。makefml との共存やメイン
テナンスを考え $DIR/cf をいじり config.ph を再生成するようにするのが前
提となっています。"makefml config" を使わないなら cf をいじらずに 
config.ph を常に手動編集することになります。

.S	config.phの互換性について
=E.S	Compatibility on config.ph
.l	non-compat-1-2
.l	compatibility

FML では config.ph という設定ファイルが振舞いを決めます。
config.ph にも version という概念があります。

	$CFVersion
.k	$CFVersion

という変数で指定されています。現在の version は 3.x です。version が異
なる場合、ほとんどの変数について自動的に補正が加えられるため昔作った 
config.ph をそのまま使っても大丈夫なようになっています。
=E
is a version number of config.ph. The difference of $CFVersion makes
FML to evaluate compatibility codes automatically. But if you have
complicated hooks in config.ph, you may need to rewrite it.

config.ph でちょっと複雑な HOOK をかけている場合はちょっと注意がいるで
しょう。互換性のために実体は別でもその関数名が残っていることは多いです
が、HOOKで使う関数や変数全部が今でもサポートされているとは限らないから
です。

.if LANG == JAPANESE
できるだけ互換性を保つように作られていますが

    config.ph の $CFVersion が 3

でなおかつ

   『$MAIL_LIST と $CONTROL_ADDRESS が違う場合の $MAIL_LIST の挙動』

の時は従来と異なり『配送専用』です。ここだけは互換性がありません。しか
し

	$MAIL_LIST と $CONTROL_ADDRESS が同じ場合は
	昔と同じで配送用のアドレス $MAIL_LIST で
	コマンド(# command の形)を受け付けます。

従来 $MAIL_LIST != $CONTROL_ADDRESS の場合にヘッダやHELP等では「コマン
ドは $CONTROL_ADDRESS へ送ってね」と書いてあるにも関わらず $MAIL_LIST 
でもコマンドは受けられたという変な挙動がありました。これを互換性と解釈
するかバグと解釈するかは微妙ですが、FML 2.1 以降はアクセス制御ルールの
導入時に上記の解釈になりました。

______________________________________________________
[比較表]

	elena		配送専用
	elena-ctl	コマンドだけ

になります。2.1 リリース以前(2.1 Gamma series)では 

	elena		配送もコマンドも処理する
	elena-ctl	コマンドだけ

のように振舞いました。elena でのコマンドの「配送とコマンドの切り分け」
はメール本文が"# command"であるか？否か？で決めています。

2.1 以降でも配送用とコマンド用のアドレスが同じ場合は

	elena		配送もコマンドも処理する

になります。この場合「コマンドなのか？否か？はメール本文が"# command"
であるか？否か？」で決まります。これがもともとの hml 1.6 互換のスタイ
ルです。
______________________________________________________
.fi

.S	互換性のためのライブラリ
=E.S	Libraries For Compatibility

.if LANG == JAPANESE
cf/config という生成コマンドで作るようになった時 $CFVersion = 2; とい
う version が与えられました。さらに、それ以前の手動編集のみだった時代
の config.ph を使っている場合($CFVersionがない時代)は 1 と定義されてい
ます。


	$COMPAT_CF1 = 1;
.k	$COMPAT_CF1 

がセットされているか $CFVersion が2より小さい場合は自動的に

	libcompat_cf1.pl
.k	libcompat_cf1.pl

が dynamic loading されます。また 3 以下と判定された場合は

	libcompat_cf2.pl
.k	libcompat_cf2.pl

が自動的にローディングされます。
.fi

.S	FML 1.6 より前からの移行について
=E.S	Compatibility with before FML 1.6

.if LANG == JAPANESE
1.6では、基本的なデータ構造を call by reference 用に書き直したので、
いままでの SMTP_OPEN_HOOK 等の カスタマイズはそのままでは反映されません。
libcompat.pl にBackward compatibility のためのコードがあります。
昔の設定を変えたくないなら、config.ph に 

	$COMPAT_FML15 = 1; 
.k	$COMPAT_FML15

と書くと複雑なフックをしかけていない限り compatible にできます。
コードの都合上どうしても実現できないカスタマイズもありえます_o_

昔できたことは今の実装でも必ずできるのでこのドキュメントを参照してみて
下さい。
.fi
.if LANG == ENGLISH
	*** not translated ***
.fi

.S	FML 2.0 との互換性 (get コマンド)
=E.S	Compatibility with FML 2.0 ("get" command)
.k	$COMPAT_FML20

.if LANG == JAPANESE
	$COMPAT_FML20 = 1;

これに関係する機能は

   現在の get コマンドは resend ですが、これを昔のもの(2.0以前)に戻す。

くらいです。なお前述の $MAIL_LIST の非互換性は 2.1 gamma → 2.1 delta 
の時に導入されました。
.xref	non-compat-1-2
.fi
.if LANG == ENGLISH
	*** not translated ***
.fi

.S	hml 1.6 との互換性
=E.S	Compatibility with hml 1.6

.if LANG == JAPANESE
   0	members や log file 等はそのままでよい

   1 	fml をインストールし

   2 	makefml か手で config.ph で
	$MAIL_LIST と $CONTROL_ADDRESS の内容を同じにする。 

これで同じになります。whois などの機能については似たような機能はあって
も同じものはないので御了承下さい。基本的に移行は簡単でもすべての機能の
上位互換なわけではありません(security holeもあるのでそんな実装はするつ
もりはなかった)。
.fi
.if LANG == ENGLISH
	*** not translated ***
.fi


.C	設計指針に関するいくつかの考察…
=E.C	Around design policy

.S	From: はすべてを認めるべきだろうか？
=E.S	Do we permit any From: addresses?
.k	$REJECT_ADDR

現在は $REJECT_ADDR で定義されたアドレス群を From: に含むものはエラー
として管理者へフォワードされます。それは個人を代表しているとみなされな
いアドレスにたいしてです。というのはＭＬとは個人と個人を結び付けるもの
だと思われるからです。現在は
=E
In default FML does not permit mail from root, postmaster even if
$PERMIT_POST_FROM == "anyone" or $PERMIT_COMMAND_FROM == "anyone". We
think we cannot permit a post from non personal addresses such as
root, postmaster since a ML is for private communication. It is useful
to detect e.g. error mail loops. The addresses to reject is the
following pattern.

    $REJECT_ADDR  = 'root|postmaster|MAILER-DAEMON|msgs|nobody';
    $REJECT_ADDR .= '|majordomo|listserv|listproc';

のように設定されています。From:がこれらのアドレスだった場合管理者へフォ
ワードし伺いを立てます。そこから後はＭＬ管理者の判断でしょう。
=E
When we reject the mail from $REJECT_ADDR\@*, FML forwards it to
$MAINTAINER for consults. Other than $REJECT_ADDR we think addresses
to reject is 'uudecode', 'sysdiag', .... I think $REJECT_ADDR should
be more if possible.

この他にも uudecode や sysdiag(苦笑) のような attack で出てきそうなア
ドレスもありますが、まぁまず使ってないでしょう。果たしてこれは増やすべ
きなのか、減らすべきなのか？私見としては、もっと増やすべきではないだろ
うかと思うのですが…

正規表現でマッチした Email アドレスをはじく機能もあります。
$REJECT_ADDR_LIST 中に正規表現を定義します。デフォールトは(CF に合わせ
て) spamlist というファイルです。
.xref $REJECT_ADDR_LIST
=E
$REJECT_ADDR_LIST is also a list to reject.
.xref $REJECT_ADDR_LIST

.S	ML無限ループのチェックメカニズム
=E.S	Loop checks against mail loops
.k	$CHECK_MESSAGE_ID
.l	$CHECK_MESSAGE_ID
.xref	$LOG_MESSAGE_ID

デフォールトは $CHECK_MESSAGE_ID がセットされています。この時は
「Message-ID: フィールドはメールそれぞれについて時空全体で unique であ
る」という定義を利用したループチェックを行ないます。
=E
$CHECK_MESSAGE_ID is 1 in default. FML caches Message-Id: field of an
in-coming mail against mail loops. Duplicated Message-Id:'s are
invalid since Message-Id is unique in all space-time.

これ以外にもチェックはしていますが、理論上はこの uniqueness がもっとも
美しいでしょうね。

.S	newsyslog(8)
.k	newsyslog(8)
.k	/usr/bin/newsyslog
.k	libnewsyslog.pl
.k	@NEWSYSLOG_FILES
.k	$NEWSYSLOG_MAX
.k	&NewSyslog

/usr/bin/newsyslog に対応するものとして、libnewsyslog.pl が実装されて
います。昔の /etc/daily 等では
=E
FML provides a library of a subset of newsyslog(8). It rotates logs
like

	...
	rename log.0 log.1
	rename log log.0
	...

とやっていたログファイルの整理を行なうプログラムです。NetBSD では、も
ともと MITの Athena Project で作られたプログラムが使われています。
fml.pl がnewsyslog を使って処理するデフォールトのファイル群は
@NEWSYSLOG_FILES で次のファイルに定められています。
=E
@NEWSYSLOG_FILES is a list of newsyslog(8) target which consists of
digest delivery configuration, member and active lists.
msend.pl calls newsyslog function on Sunday morning.

    @NEWSYSLOG_FILES = 
	("$MSEND_RC.bak", "$MEMBER_LIST.bak", "$ACTIVE_LIST.bak");

つまりまとめおくり、配送・認証リスト等の変更があった時にできるバックアッ
プファイルです。これは日曜の朝 msend.pl (まとめおくりのプログラム)が実
行しています。まとめ送りをしていないなら実行されません。
まとめ送りをしていないならなんらかの形で別途動かす必要があります。

また関数コール自体(&NewSyslog)の引数(配列)は整理したいファイル群です。
変数 $NEWSYSLOG_MAX は「整理するのは何個までか？」を決めます。デフォー
ルトは４で、つまり
=E
$NEWSYSLOG_MAX is the maximum of rotation of log files.
e.g.

	log.4 log.3 ... log.0 log 

まで順番にまわって保存・整理されます。@NEWSYSLOG_FILES のログファイル
は msend が日曜の朝 newsyslog をかけます。

.S	Date: == サーバが配送した時間
=E.S	Date: is the time FML delivers. 

.if LANG == JAPANESE
Date: の付け方は $DATE_TYPE で変更できます。詳しくは .ptr{$DATE_TYPE}。

元々の理念は、サーバをどう考えるか？という観点で

1	サーバが単にリレーしてるだけ (passive?)

なのか

2	サーバまでの通信路はＯＫでした、はい。
	じゃ今からサーバ→メンバーへ配送するね(active?)

最初のデザイン当時 2 を重視したと。で、Posted: がサーバまでの配送の最
低限の pointer として残して、Date: にはサーバ→メンバー配送のための情
報としてサーバの localtime() をつけたと。そんな歴史的背景がありますね
＃まぁ当時からUUCPは除いて大抵２つはほとんど同じだったですけどね

Date: と Posted: の時間差でネットワークのDELAY情報が分かるのは副次的効
果です。

その他の副産物として時間順ソートをするだけでＭＬの記事を追うことができ
ます。つまりサーバが受けとった順ですね。
＃配送は途中のパスすべてに依存するのでメールを出したオリジナルの時間が
＃情報の順番とは限らないからです。
＃ See fml-support's ML Count: 01816, 01821 for the discussion
.fi
.if LANG == ENGLISH
$DATE_TYPE defines how Date: should be treated.  See .ptr{$DATE_TYPE}.

Date:	is the time when fml.pl delivers an article. 	
Posted:	is the time when the original sender posted. 

The concept of ML must be two ways of thinking.

	1	just relay.
	2	ML server receives mail and sends it again. 
		not just relay.

We think FML should be type 2. You can sort articles by Date: since it
is the fml.pl delivery order. This conversion is for your eyes.
.fi

.S	Received: を削る
=E.S	cut out Received: fields
.xref	left-Received

.S	Return-Receipt-To: も削るべき
=E.S	cut out Return-Receipt-To:

配送したメンバー全員からメールが返ってくるから削るです。
=E
To avoid replies from all ML members.

もちろん本来はヘッダの意味を考えてメールを書かない”そのメールを出した
人”が悪いのはいうまでもありまん。

.# $FML: overview.wix,v 2.6 2001/07/20 05:49:07 fukachan Exp $
.# Copyright (C) 1993-1998,2001 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1998,2001 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
