.C	まとめおくり
=E.C	Digest Delivery / Matome Okuri (Japanese term)
.l	msend
.k	msend
.k	digest
.k	まとめおくり
.k	$DIR/crontab

.S	まとめおくりの基本原理
=E.S	Mechanism Of Digest Delivery

.if LANG == JAPANESE
"まとめおくりのプロセス"は一定時間ごとに起動しその間に来た記事をまとめ
て配送します。

   for (;;) {	# 無限ループ
	寝て待つ(待機)

	やることがあるかどうか配送リスト(e.g. $ACTIVE_LIST)と
	$MSEND_RCを元に判定。

	たまった記事があれば配送

	データファイルのUPDATE
   }

.fi
.if LANG == ENGLISH
Digest delivery process works as follows:

   for (;;) {	# infinite loop
	wait for the digest delivery time

	check $ACTIVE_LIST and $MSEND_RC to determine
	"whom to send which range of articles" and "now"?
	If msend.pl has members to be sent a bundle of articles,
	msend.pl sends it to them.
   }

This periodic sending mechanism is digest delivery. This mechanism
clearly requires some help from OS. Cron on some systems (OS) kicks
digest delivery program periodically. Also you need to set up the
setting in your OS. We use "cron", standard service of UNIX.
.fi

これをどう実行するか？ということですが、システムが勝手に一定時間ごとに
チェックしてくれるわけではありません。システムに

	一定時間ごとに仕事がないかチェックしろ！

と教える必要があります。それが「cron をしかける」という意味です。

『まとめおくりを行う時間間隔』と『まとめるやり方』はユーザごとに自由に
設定できます。設定はユーザが自分でリモートでコントロールできます。
matome もしくは digest というコマンドです。コマンドについては後の節で
説明します。
＃ちなみに matome というコマンドと digest というコマンドは同じです。
=E
Each user controls its digest delivery parameters, "when" and "how
articles are packed". FML provides commands for the control, "digest"
and "matome" (Japanese term), described below.

.if LANG == JAPANESE
ちなみにプログラム群のそれぞれどの部分に対応するかというと

   for(;;) {		(cron)
	寝て、待つ	(cron)
	やることがあるかどうかチェックする	(msend.pl)
	やることがあるなら エントリ(actives の m= 部分)に従って
	実行する (msend.pl)
	(どこまで送ったかの記録を var/log/msendrc というファイルへ保存)
   }

です。cron の部分はシステムのcronが使えればその方が良いのですが、不可
能なら bin/cron.pl をシステムのcronの代わりに使えばよいわけです。
.fi
.if LANG == ENGLISH
.fi

.S	まとめおくりサーバ  msend.pl 
=E.S	Digest Delivery Server (msend.pl)
.k	msend.pl
.k	MSendv4.pl

まとめおくりを実行する スクリプト

SYNOPSIS
   msend.pl    [ options ] $DIR [ options ]  [ $LIBDIR [ options ] ]

   * fml.pl msend.pl fmlserv.pl は同じ引数のとりかたをします。
     #注意: fml_local.pl は MH を意識してるので異なります。
=E
   * fml.pl, msend.pl and fmlserv.pl have the same argument syntax.

.if LANG == JAPANESE
オプションと引数が共存する時は引数が - ではじまるならオプション、それ
以外は directoryの変数 だと仮定します。順番は関係ありませんdirectory 
に関しては そのdirectoryが存在すれば引数の順に $DIR、$LIBDIR にセット
されます。

次のようなオプション及び long line options を取ります。

   -d		デバッグモード
   -bt   	アドレステストモード (Become Test)
		(メンバーチェックのところまで。
		MLへの配送やコマンドは実行しない)
		いまのところ debug mode とかわらへんねん:-)
   -bd		デーモンモード(Become Daemon)
   -sOPT $OPT 	をセットする。(e.g. -sdebug == -d)
   -uOPT $OPT 	をオフする。  (e.g. -udebug は $debug = 0; と同じ)
   -lfile	file を $LOAD_LIBRARY 変数に代入する 
		e.g. -llibfml.pl 
   -q		quiet mode (エラーとかWarning以外は何も出力しない)
		POSIX の cron では OUTPUT をひろうので、-q なら
		エラー時以外はメールが来ないようにするため
.fi
.if LANG == ENGLISH
   -d		debug mode
   -bt		test mode

   -bd		daemon mode (become daemon)
   -sOPT $OPT	$OPT = 1;
   -uOPT $OPT	$OPT = 0;
   -lfile	$LOAD_LIBRARY = "file";
   -q		quite mode
		if not quiet mode, msend.pl runs with showing 
		a lot of information.
.fi

.S	crontab の見本
=E.S	Example of crontab
.k	crontab (4.4BSD)
.k	$DIR/crontab

makefml で newml すると $DIR/crontab に cron の設定の見本ができていま
す。(以下の説明では $DIR は各ＭＬのHOMEです(config.phのある場所))。
=E
"makefml newml <ML>" command generates examples which include crontab
example. Let $DIR be the ML's home directory. You need to set up cron
kicks msend.pl periodically since system(OS) does not work for you in
default. To set up cron, do

4.4BSD では各個人ごとに cron の設定が可能です。その場合、

   (shell prompt)% crontab $DIR/crontab 

を実行することで個人ごとのcronが設定できます。$DIR/crontab は例えば
=E
An example of crontab (4.4BSD) is

0 * * * * /usr/libexec/fml/msend.pl /var/spool/ml/Elena /usr/libexec/fml

のように書きます。
=E
where msend.pl runs at 0 minute in each hour.

上述のように「まとめおくりは msend.pl が行ないますが、自動では行なえま
せん。1時間に一回 msend.pl を実行しなさいとマシンに教える」設定が必要
です。それがこの cron の設定なわけです。

.if LANG == JAPANESE
[歴史]
	プログラムの名称 msend.pl (旧 MSendv4.pl)
.k	MSendv4.pl->msend.pl

最初実験プロジェクトのつもりではじめた時の version 4 というのがついた
MSendv4.pl というプログラム名のまま使ってきましたが、msend.pl に変更し
ました。
.fi
.if LANG == ENGLISH
.fi

.S	プログラムのログファイル $MSEND_RC (名称が変更されました)
=E.S	Control file of msend.pl $MSEND_RC(/var/log/msendrc)
.k	MSendrc -> var/log/msendrc
.k	$MSEND_RC

デフォールトが MSendrc -> var/log/msendrc に変更されています。
fml 1.x から version up する時に問題になるかも知れません。

config.ph で $MSEND_RC が明示的に指定していないと msend.pl は
$MSEND_RC を定義してくれと警告を(logファイルへ)吐くでしょう。
=E
You need to define $MSEND_RC (defined as $DIR/var/log/msendrc in
default). If it does not exist, msend.pl warns it and exits.  You
should know you can run msend.pl. This policy comes from against the
possibility that msend.pl may send a big bundle of articles if the
configuration has an error.

まとめおくりが"よきにはかって"動くようにすることはできるのですが「中途
半端に動くより今何をやっているか?を管理者が知っていること」を重視して、
わざと $MSEND_RC を明示的に指定してくれというようになっています。

＃注意: 実は fml の他の部分はほとんどよきにはからえで動きます(^^)
＃まとめおくりが例外です。それは間違って大量のメールを送ったりしては大
＃変だからです。

.S	コマンドで各ユーザーごとにどういうふうに送るかを決めること
=E.S	Command To Control Each User Digest Delivery Configuration

fml-1.4.1 以降、各ユーザーごとにまとめ送りの様式を決めることができま
す。デフォールトは UNIX FROM の gzip したフォーマットです。

各ユーザはコマンドをサーバに送ることで、自分で設定を変更することがで
きます。
=E
Each user can control each digest delivery configuration by a command.
e.g.
	digest 3u
	matome 3u
which sets up digest delivery is sent once 3 hours with UNIX FROM
format(PLAIN-TEXT). Please see help file for available options.

例: 3時間おきにUNIX FROMの形で送って欲しい場合

	matome 3u

をコマンドとして送ります。UNIXのSHELL上なら

   (shell prompt)% echo "matome 3u" | Mail コマンド用のアドレス

ですね。

.S	まとめ送りメールに付くSubjectの設定
=E.S	Subject of Digest
.l	$MSEND_SUBJECT_TEMPLATE
.k	$MSEND_SUBJECT_TEMPLATE
.k	$MSEND_DEFAULT_SUBJECT (CFv2)

	$MSEND_SUBJECT_TEMPLATE

という変数があります。これは
=E
is a template for Subject: of digest mails. It is defined as

.#    Digest -Matome Okuri- _ARTICLE_RANGE_ _DOC_MODE_ _PART_ _ML_FN_
    Digest _ARTICLE_RANGE_ _PART_ _ML_FN_

のように設定されていて、内部で
=E
in default. Each variable (_\S+_ style) is converted to in the
following way

	   _ARTICLE_RANGE_  <=>    Article 768
	   _DOC_MODE_       <=>    [last:10 tar + gzip]
	   _PART_           <=>    (1/4)
	   _ML_FN_          <=>    $ML_FN (here is "(Elena ML)") 

のように変換して、メールの subject: は
=E
These variables control Subject:. So you can customize Subject: for
you. In default the subject: after this conversion will be like

.#   Digest -Matome Okuri- Article 768 [last:10 tar + gzip] (1/1) (Elena ML)
   Digest Article 768 (1/1) (Elena ML)

のようになります。この変数を適当にカスタマイズすれば

	(1/1) を削る(_PART_を切る)
	_DOC_MODE_ を加えてドキュメント形式を表示する

とかが簡単にできます。これにより$NOT_SHOW_DOCMODE (CFVersion 2) や 
$MSEND_DEFAULT_SUBJECT は obsolete になりました。
.k	$NOT_SHOW_DOCMODE
.k	$MSEND_DEFAULT_SUBJECT

.S	まとめ送り処理のHOOK
=E.S	Available Hooks In Digest Delivery
.k	$MSEND_START_HOOK
.k	$MSEND_HEADER_HOOK

$MSEND_START_HOOK は実際の配送作業の始まる直前に評価されます。
=E
$MSEND_START_HOOK is evaluated after initialization but before the
main routine.

$MSEND_HEADER_HOOK は msend の Subject: 等を変更する場合に使用します。
=E
$MSEND_HEADER_HOOK is evaluated in the main routine and just before
Subject: substitution described above.

.S	まとめ形式のデフォールト
=E.S	Digest Delivery Default Configuration
.xref	$MGET_MODE_DEFAULT

gzip で複数のファイルを一つにして送るのがデフォールトですが、 
=E
The default file format is gzip-ed file format (for highly compression
efficiency). You can change the default by the variable

	$MSEND_MODE_DEFAULT
.k	$MSEND_MODE_DEFAULT

の値で、まとめ送りサーバの設定を変更することが出来ます。使えるパラメー
タは $MGET_MODE_DEFAULT と同様です。
=E
where a set of available parameters is the same as ones for
$MGET_MODE_DEFAULT (xref: .ptr{$MGET_MODE_DEFAULT}).

なお便利なように、これらの簡易設定があります。
=E
* A few shortcuts 

(After config.ph CFVersion 3)

	$MSEND_MODE_DEFAULT = "rfc1153"    (default RFC1153)
	$MSEND_MODE_DEFAULT = "rfc934"	   (default RFC934)

に設定する(詳細以下)。

＃昔は (config.ph CFVersion 2)
＃
＃	$USE_RFC1153_DIGEST	デフォールトをRFC1153
＃	$USE_RFC1153		デフォールトをRFC1153
＃	$USE_RFC934		デフォールトをRFC934
＃
＃でした。CFVersion 3 以下の config.ph の場合は自動的に補正/変換します。
.k	$USE_RFC1153_DIGEST
.k	$USE_RFC1153
.k	$USE_RFC934

例:
	まとめおくりのデフォールトを RFC934 へ
.k	まとめおくりのデフォールトを RFC934
.k	$USE_RFC934
=E
Example: change the default to RFC934 style (e.g. You can split the
format mail up by MH burst).

	$MSEND_MODE_DEFAULT = "rfc934";

まとめおくりで、0はデフォールトのUNIX FROMで区切られたメールを送り出す
が、1なら次のような形のものを送るようになる。これは mh のburstで複数の
mailに展開できます。＃あと、どういうソフトがあるのか知らない…:-)

.if LANG == JAPANESE
[934形式の例]

	------- Forwarded Message

	From: uja
	Subject: daa 

	ちまりちゃんもいいわね、いいわね。ねこめ〜わくもいいわねぇ
	しまちゃんかわいい

	------- Forwarded Message

	From: uja
	Subject: Re: daa
	
	あおいちゃんパニック もいいけど せいふくもの もよくてよ

	--fukachan@けろちゃんご〜ご〜

	------- Forwarded Message
.fi
.if LANG == ENGLISH

	------- Forwarded Message

	From: uja
	Subject: daa 

	Books by Takemoto Izumi are wonderful.

	------- Forwarded Message

	From: uja
	Subject: daa
	
	Aoichan Panic is good, but Seifukumono is also good :D

	--fukachan@ Kerochan is good

	------- Forwarded Message
.fi

例:
	まとめ送りのデフォールトを RFC1153 digest へ
.k	まとめ送りのデフォールトを RFC1153 digest へ
.k	RFC1153
.k	$USE_RFC1153
.k	$USE_RFC1153_DIGEST
=E
To change the default to RFC1153 style.

	$MSEND_MODE_DEFAULT = "rfc1153";

これには、それぞれまとめた束に、通し番号をつけなければなりません。よっ
てまとめおくりのデフォールトを1153に統一することになります。ユーザがコ
マンド matome 3 としても、 gzip ではなく 1153 形を意味するようになり
ます。この形式では通し番号はばらばらで各ユーザ毎に適当についてます。
=E
FML does not check the sequence number since each user is each user
parameters, time, file format ... and the time parameter can change.
We cannot control them. Hence the sequence number is not maintained as
unique.
==
To hack RFC1153, see librfc1153.pl.

もし細かい所を変えたい場合は librfc1153.pl でフォーマットを決めてくだ
さい

RFC1153 をデフォールトに変更すると、1153はまとめおくりの記事に番号をつ
けるので、個人個人に1153で送ると人によって番号が食い違い、矛盾がおきて
しまいます。
＃NetNewsなんかで1153形式を見ればわかるとおもうんですが…

まぁ番号を気にしないならいいんですが…

[注意]
一時期デフォールトで 3時間に強制的に設定しておいてある version があり
ますが、ようは番号の整合性をとるためです。1時間おきの1153送りの人と、3
時間おきの1153送りの人、があると番号が食い違ってしまいます。番号の整合
性を無視すれば、どうでもいいことなんですが…。とりあえず、この部分はコ
メントアウトしてあります(95/6/27)

.S	msend.pl のコマンド一覧 (help fileより)
=E.S	"digest" command parameters
.k	まとめ送りコマンド一覧

○まとめ送り希望の方へ:(基本的に N時間“おき")
なお digest と matome は同じコマンド(引数も当然同じ)です。
.if LANG == JAPANESE
matome 数字(0-23)	配送時間は実はmodulusで決めています
			if (0 == (24 % time)) { 配送();} 
			だから 17 なんてやっても一日一回と同じです(_o_)
			様式 default は gzip した Unix From つきのファイ
			ルの固まり
matome 数字(13-36)	上の特別の場合で、一日一回N時にまとめおくり
			13〜36の数字がこのケースに当てはまります
			午前5時に一回だけまとめおくり慕いときは、
			24+5=29 をおくりこんでください。午後5
			時は17でいいんですが、午前中はこうしないと判
			別がつかないので…
.fi
.if LANG == ENGLISH
FML checks modulus between the time and parameters.  "digest" command
fundamental syntax is

digest N 		If N is 0-23, a digest is delivered once N hours.
			If N is 13-36, a digest is delivered once a day
			at N hour. 

After N, file option may be added. If without a file format option,
the file format is "gzip", which is gzip-ped file containing articles.
.fi
   例:
	matome 数字u	plain(unpack)、つまりplain textを
	matome 数字i 	lha + ish でまとめて送ります
   オプション：
		オプションなしはGZIP(UNIX FROM)

	u	PLAIN-TEXT(UNIX FROM)
	uf	PLAIN-TEXT(UNIX FROM)
	i	lha + ish 
	ish	lha + ish 
	mp	MIME/Multipart	PLAIN-TEXT
	d	RFC1153 format 	PLAIN-TEXT
	b	RFC934 format 	PLAIN-TEXT(mh-burst)
	rfc934	
	ish	lha + ish 
	lhaish
	i
	li
	lu	lha + uuencode
	lhauu
	unpack	PLAIN-TEXT(UNIX FROM)


matome 0		普通の配送へ戻す
=E
digest 0		real time delivery (stop digest)

.if LANG == JAPANESE
   例:
   matome 1		まとめ送り １時間に一回(gzipd)
   matome 2		まとめ送り ２時間に一回(gzipd)
   matome 2u		まとめ送り ２時間に一回(plain text)
   matome 2mp		まとめ送り ２時間に一回 MIME/Multipart形式で
   matome 17		まとめ送り 一日一回と同じ(gzipd)
			#この場合は１７時に来る
   matome 29		まとめ送り 一日一回と同じ(gzipd)
			#この場合は午前５時に来る
			＃matome 5 は５時間“おき” という意味
.fi
.if LANG == ENGLISH
   matome 1		once in an hour  (file format is gzipd)
   matome 2		once in two hours (file format is gzipd)
   matome 2u		once in two hours (file format is unix from)
   matome 2mp		once in two hours (file format is MIME/Multipart)
   matome 17		once in a day (send at 17:00)
   matome 29		once in a day (send at 05:00; 29 = 24 + 5 )
.fi

.S	まとめ送りがなかった msend がメールを出す設定
=E.S	Notify that "no digest is delivered today" to members
.k	$MSEND_NOTIFICATION
.k	$MSEND_NOTIFICATION_SUBJECT


	$MSEND_NOTIFICATION = 1;

の時 msend は一日記事がなかったので「まとめ送りをしなかった」ことをメー
ルでＭＬのメンバーに知らせます。
=E
FML sends "no digest today for no article" to members of the ML.

	$MSEND_NOTIFICATION_SUBJECT (default "Notification $ML_FN")
	
はその時のメールの Subject: です。
=E
is Subject: of the notification mail.

.S	まとめ送りの時には X-ML-Info: は必要ない
=E.S	To add or not add X-ML-Info:
.k	$MSEND_NOT_USE_X_ML_INFO
.k	$NO_ML_INFO

	$MSEND_NOT_USE_X_ML_INFO = 1;

で付けないようにします(注意: $NO_ML_INFO から名称変更)。
=E
disables X-ML-Info: in the header of digest mails.

.S	捕捉：まとめおくりと$ACTIVE_LISTと$MSEND_RCと実際の動き…
=E.S	How msend.pl works

activesがこんなかんじだとします。
=E
Let actives (delivery list) be like this.

	-------- actives --------
	katri
	pollyanna	m=6u
	-------- actives --------

.if LANG == JAPANESE
	cron で一時間に一度 msend.pl を呼びます。

			↓

	activesをしらべて pollyanna はまとめおくりで６時間に一度で
	gzipかけないで配送（uがついてるから）希望だとわかる。
	この時に各ユーザごとにどういうふうに送るかを読み取っています

			↓

	もし 今の時間 % 6 が0(mod 6) なら、つまり、6、12、
	18、24時なら、配送することにして
	＃もし 29 なら 一日一回午前5時です。

			↓

	var/log/msendrc(旧 MSendrc)という、今までの配送記録とスプールの記事
	のたまり具合を比べ送ってない分がどの記事か？を決定する。
	記事がない場合はそのまま終り

			↓

	送ってない分をスプールから取り出して配送する。
.fi
.if LANG == ENGLISH
	* cron kicks msend.pl once in an hour.

	* checks delivery list (here actives) and find 
	  "pollyanna" hopes FML sends a pack of articles once in 6 hours
	   with the file format "u"(UNIX FROM style plain text).

	* checks whether the present hour % 6 is 0 or not.
	  If the modulus is 0, msend.pl should sent articles to "pollyanna".
	  If not, skip this user entry.

	* logs the largest number of articles in $MSEND_RC for the next time.
	  The range of sending articles is 
	  from the number for "pollyanna" in $MSEND_RC
	  to the current sequence number ($SEQUENCE_FILE).  
.fi

つまり 
	「特定時間になるとあらかじめためてあったメールを送る」
のではなく、
	「特定時間になるとactivesの情報に基づき、その時間に送ることに
	なっている人に、まだ送っていなかった分のメールをスプールから取
	り出して送る」
わけです。
=E
Conclusion: FML does not send stored articles somewhere but generates
a mail with a bundle of articles for a user and sends it to him/her
each time. It enables the customization for each user. The degree of
freedom is the same as that of "mget" command.

そのため各個人ごとに送り方を完全にカスタマイズすることが可能になるわけです。
また送る時の記事のまとめ方も mget コマンドと同じだけの自由度が選べます。
.xref	mget

.S	まとめおくりの いつ送るか？の判定を変える
=E.S	Modify when msend.pl should send articles?

msend.pl の sub MSendP で行っています。この部分の変更をすればできます
が hard coding になってしまいますね。
=E
Please hack "sub MSendP" (msend-predicate) in msend.pl.

.if LANG == JAPANESE
例: 今の設定

   if (($ID - $Request{$who}) >= 0) {
	送るべきメールがあるか？

	return 1 if(0 == ($HOUR % $When{$who}));
	$When{$who} おきに送るのだが、いまの時間は？
		
	return 1 if($When{$who} > 12 && ($HOUR + 24 == $When{$who}));
	一日一回送る人には 今がその時か？
	…
.fi
.if LANG == ENGLISH
Example: current code(sending if return value is 1)

    # CHECK: Modulus 
    if (($ID - $Request{$who}) >= 0) {
	return 1 if (0 == ($Hour % $When{$who}));
	return 1 if ($When{$who} > 12 && ($Hour + 24 == $When{$who}));
    }

    return 0; # not send

where 
	$ID		sequence number ($SEQUENCE_FILE)
	$Hour		the present time (hour)
	$who		user mail address
	$When{$who}	user's parameter (e.g. 3, 6, 12, 17 ...)
.fi

.S	まとめおくりをデフォールトにする
=E.S	Digest only mailing list
.l	msend-anytime

contrib/msend-anytime にテスト版の「リアルタイム配送はしないで全員にま
とめおくりをする場合のパッチ」があります。
=E
Please see contrib/msend-anytime patches.

設定はこのパッチをあてて -a と -A オプションつきで msend.pl を起動する
ように改造します。まとめ送りのタイミングは cron から起動する時間で調節
して下さい。
=E
Apply this patch and run "msend.pl -a -A other-options".

まとめ送りの設定をしていないユーザへのまとめ送りのモードは

	$MSEND_MODE_DEFAULT 

で決まります。
=E
$MSEND_MODE_DEFAULT is the default value (e.g. 3mp) of digest delivery
parameter.

.S	捕捉:システムの cron の代わりに bin/cron.pl を使う場合
=E.S	About bin/cron.pl
.xref	cron.pl

cron は 昔からある Unix の Daemon process で １分に一回起きて、やるこ
とがないか調べて、やることがあれば、実行、しなければ、６０秒間ねて待つ 
ということをします。

Vixie cron をいれてるとか POSIX なOSは個人のcronエントリが設定できます。
歴史的な流れを見てる人には見えてるとおもいますけど、crontab の Syntax 
は 4.4 ですが bin/cron.pl は4.3BSD用に開発したものです。今時の cron は
ユーザー権限で走ってくれるとおもうのですが、詳しくは man cron でマニュ
アルを読んでください。

『ユーザがUnixマシンの機能を使えるサービス内容で、それにお金を払ってい
る契約の場合』（契約書はよく読んでくださいね、そうでないところもありま
す）は迷うことなく加入しているプロバイダに聞いて見るのが確実でしょう
(^^)

どうしてもわからない時は、そのマシンの管理者に尋ねてみるとよいでしょう。
ただボランティアで管理者をやってるケースも多いですからできるだけ自分で
やることが望ましいです。
＃ネットワーク管理者は激務なのでいたわってあげてください(お願い)

.S	一週間に一度まとめ送りをするには?
=E.S	Digest Once In A Week
.xref	weekend-msend

bin/weekend-msend.sh に見本があるのでみてみよう。朝と夕方だけなどの応
用も全部同様ですね。
.xref	weekend-msend
=E
See bin/weekend-msend.sh for an example.
.xref	weekend-msend

.#########################################################################
.# bin/cron.pl
.include cron.wix

.# $Id$
.# Copyright (C) 1993-1998 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1998 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
