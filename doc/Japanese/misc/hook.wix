.C	フック一覧
=E.C	Hooks
.n	hooks
.l	hook

インタプリタなので(例えば config.ph に)フックを定義すれば適当な場所で
そのHOOKは評価され実行されます。
=E
Perl is an interpreter language. FML evaluates several hooks in a lot
of places. In this chapter we describe hooks. You can use complicated
control of FML and dynamic configuration changes by using hooks.

そのフックでちょっと複雑な設定やダイナミックなサーバの挙動の変更をした
りできます。config.ph で定義するのでMLが複数あってもMLごとに変更できる
わけです。一方 sitedef.ph で行なえばML共通のHOOKを仕掛けることができま
す。

.S	$START_HOOK
.l	$START_HOOK
.k	$START_HOOK

評価されるタイミングは、
	ヘッダの各フィールドの切り出しは終っている。
	が、配送orコマンド本体を行なう前
である。
=E
FML evaluates $START_HOOK, after header parsing and fundamental checks
but before main distribution and command functions

.if LANG == JAPANESE
例: 配送前にもし #ではじまらない行が８行以上あれば、たとえ#ではじまる
行があっても普通のメールとおもうようにする。

$START_HOOK =q%
    if ($Envelope{'nlines'} - $Envelope{'nclines'} >= 8) {
	undef $Envelope{'mode:uip'};
    }
%;
.fi

.S	$HEADER_ADD_HOOK
.l	$HEADER_ADD_HOOK
.k	$HEADER_ADD_HOOK

ヘッダに”新たに”つけくわえるフィールドをかいてカスタマイズするための
フック。
=E
Evaluated before header generation of distribution articles. $body
variable is used.

現在では $body という変数はこのためだけに使われる。
＃注意：昔は違った

例(昔のやり方):
=E
Example: add the field "X-Baycity-Weather: Mizumaki" (riddle:-).

    $HEADER_ADD_HOOK = q#
	$body .= "X-Baycity-Weather: Mizumaki\n";
    #;

ヘッダに X-Baycity-Weather: Mizumaki とつけくわえる(意味不明(笑))
現在では同じことは例えば 
=E
is the same as

	&DEFINE_FIELD_FORCED("X-Baycity-Weather","Mizumaki");

のような関数でできる。

例２:
=E
Example 2: append the original Message-Id.

Message-ID: <19950518.01905.Elena.Lolobrigita@Baycity.asia>

$HEADER_ADD_HOOK = q#
   $body .= "Message-ID: ".
	sprintf("<%4d%02d%02d.%05d.%s>\n", 1900 + $year, $mon + 1, $mday, $ID, 
	"Elena.Lolobrigita@Baycity.asia");
#;

.S	$DISTRIBUTE_START_HOOK
.l	$DISTRIBUTE_START_HOOK
.k	$DISTRIBUTE_START_HOOK

配送を始める関数に入った時に最初に評価されるHOOK
=E
evaluated in the begging of &Distribute which is the main function of
distribution.

.S	$SMTP_OPEN_HOOK
.l	$SMTP_OPEN_HOOK
.k	$SMTP_OPEN_HOOK

配送時にはこのフックの後 Sendmail へ渡すヘッダの処理が始まります。ここ
で強制的かつダイナミックにヘッダの内容を変えたりすると効果的です。単に
ヘッダの各フィールドを書き換えるのなら &DEFINE_FIELDうじゃうじゃ 関数
シリーズが用意されています。そちらを使うのがよいでしょう。
SMTPという名前がついていますがSMTP汎用ではありません。歴史的な名前です。
.xref	&DEFINE_FIELD_FORCED &DEFINE_FIELD_ORIGINAL
=E
The variable name is historical, so ambiguous. Today this hook is
evaluated after $DISTRIBUTE_START_HOOK but before $HEADER_ADD_HOOK.
You can understand faster to see libdist.pl.

例:	Reply-To: フィールドをML自体へ強制書き換え
	&DEFINE_FIELD_うじゃうじゃ以外にも別解はいくつかあるが解1
=E
Example: Overwrite Reply-To: field of distribution mail. Today we
recommend to use $DEFINE_FIELD_FORCED.

$SMTP_OPEN_HOOK = q#
	$Envelope{'fh:reply-to:'} = $MAIL_LIST; 	
#;

例2:	Precedence: を bulk へ
=E
Example 2: overwrite Precedence: to set "bulk".

$SMTP_OPEN_HOOK = q#
	$Envelope{'h:Precedence:'} = 'bulk';
#;

Precedence: に関しては実は config.ph で $PRECEDENCE = 'bulk'; でＯＫで
す。

.S	$DISTRIBUTE_CLOSE_HOOK (SMTP_CLOSE_HOOK)
.l	$DISTRIBUTE_CLOSE_HOOK
.k	$DISTRIBUTE_CLOSE_HOOK
.l	$SMTP_CLOSE_HOOK
.k	$SMTP_CLOSE_HOOK

$DISTRIBUTE_CLOSE_HOOK は配送が終った後でかつまだロックされている状態
で実行されます。具体的には &Distribute; を離れる直前に実行されます。
$SMTP_CLOSE_HOOK は昔の名前です。
=E
$DISTRIBUTE_CLOSE_HOOK is evaluated in the last of &Distribute, which
is the main function of distribution. $SMTP_CLOSE_HOOK is an old
obsolete name, so both are same.

.S	$FML_EXIT_HOOK
.l	$FML_EXIT_HOOK
.k	$FML_EXIT_HOOK

fml.pl が最後に実行する フック。このときすでに 『排他制御の lock が解
除されている』いることに注意して下さい。
=E
fml.pl evaluates this hook in the last. This evaluation is after
unlock! This hook is the last hook but $FML_EXIT_PROG is executed
after this since $FML_EXIT_PROG is to start a new process.

.S	$FML_EXIT_PROG
.l	$FML_EXIT_PROG
.k	$FML_EXIT_PROG

In the last of fml.pl, FML starts $FML_EXIT_PROG as a new process by
exec(2) system call (precisely speaking via exec(3)).

.S	$MSEND_START_HOOK
.l	$MSEND_START_HOOK
.k	$MSEND_START_HOOK

After msend.pl is initialized, msend.pl evaluates this hook in the
begging of the main function. See msend.pl internal.

.S	$MSEND_HEADER_HOOK
.l	$MSEND_HEADER_HOOK
.k	$MSEND_HEADER_HOOK

In the header generation when sending digest mail creation time.

.S	$MSEND_OPT_HOOK
.l	$MSEND_OPT_HOOK
.k	$MSEND_OPT_HOOK

msend.pl evaluates $MSEND_OPT_HOOK in the &MSendInit.

例:
デフォールトでは、まとめおくり や mget の時の Subject は
=E
In default, digest delivery's subject is 

Subject: Matomete Send [PLAINTEXT(UNIX FROM)] (1/1) (Elena Lolobrigita ML)

のようになります。が    ↑↑↑↑ここのところの文章がきにいらないので
OVERWRITE したいときは、
=E
To overwrite this, you can set the following ...

$MSEND_OPT_HOOK = q%
    $MSendOpt{'#uf'} = "#Overwritten... $MSendOpt{'#uf'}";
%;

このように、
		$MSEND_OPT_HOOK 
に 連想配列の 

	#モード の値が #説明の文章

のようにかいてください。なにをやってるのかは、libutils.pl の中の
sub MSendModeSet  という関数を見るとわかるとおもいます。
.xref	$MSEND_SUBJECT_TEMPLATE

.S	$REPORT_HEADER_CONFIG_HOOK
.l	$REPORT_HEADER_CONFIG_HOOK
.k	$REPORT_HEADER_CONFIG_HOOK

SMTP 配送ライブラリへ渡す直前に評価されるフック。
=E
In SMTP library, this hook is evaluated just before the mail is passed
to &Smtp; This routine is used in a reply mail of command results.

.S	$COMMAND_HOOK (obsolete on to add new commands technique)
.l	$COMMAND_HOOK
.l	command-hook
.k	コマンドのカスタマイズ
.k	$COMMAND_HOOK

現在のfmlでは %Procedure に登録していない関数を実行しようとするとエラー
になります。そのため $COMMAND_HOOK によるコマンドの実行はできません。


.S	$MODE_BIFURCATE_HOOK
.l	$MODE_BIFURCATE_HOOK
.k	$MODE_BIFURCATE_HOOK

モードが分岐する関数の中で呼ばれるHOOK。ほとんど先頭で呼ばれる。実際に
は sub ModeBifurcate を見ないと何だか分からないだろう。
=E
Called in the first stage of &ModeBifurcate where fml.pl running mode
changes.

.S	$COMMAND_FILTER_HOOK
.l	$COMMAND_FILTER_HOOK
.k	$COMMAND_FILTER_HOOK
.xref	EnvelopeFilter

.S	$REJECT_COMMAND_FILTER_HOOK
.l	$REJECT_COMMAND_FILTER_HOOK
.k	$REJECT_COMMAND_FILTER_HOOK
.xref	EnvelopeFilter

.S	$DISTRIBUTE_SUMMARY_HOOK
.l	$DISTRIBUTE_SUMMARY_HOOK
.k	$DISTRIBUTE_SUMMARY_HOOK

$DISTRIBUTE_SUMMARY_HOOK = q#
	&Append2(sprintf("%s [%d:%s] %s", 
			 $Now, $ID, substr($From_address, 0, 15), $s),
		 $SUMMARY_FILE);
#;

このHOOKが評価される時 $s は subject になっています。
=E
$s is the subject when this hook is evaluated.

.# $Id$
.# Copyright (C) 1993-1998 Ken'ichi Fukamachi
.#          All rights reserved. 
.#               1993-1996 fukachan@phys.titech.ac.jp
.#               1996-1998 fukachan@sapporo.iij.ad.jp
.# 
.# FML is free software; you can redistribute it and/or modify
.# it under the terms of GNU General Public License.
.# See the file COPYING for more details.
