INIT_PACKAGE () {
	# initialize
   	cp /dev/null $PATCHLEVEL_DIR/version

	# if conf/mode does NOT EXISTS, we should check 'cvs ci *'.
	if [ X$MODE = X ]; then
		### rcsid is not used explicit, so delete here
		#	echo " "; echo "Fixing rcsid ... " 
		#	/bin/sh distrib/bin/fix-rcsid.sh

		# echo " ";
		# echo "O.K. rcs check in var/doc/ ... ";
		# sh distrib/bin/sync-rcs-of-doc.sh
		echo "------------------------------"
		echo "Checking CVS commited all?";
		echo ""
		${MAKE} scan
		echo ""
		echo "------------------------------"
	else
		echo ignore make scan check
	fi

	echo " "; echo "Fixing permissions ... ";
	chmod 755 kern/*.pl bin/* sbin/* libexec/*
	chmod 644 kern/lib*.pl proc/*.pl
}


INIT_DIST () {
	test -d $PATCHLEVEL_DIR || mkdir $PATCHLEVEL_DIR

	( cd $PATCHLEVEL_DIR; $VERSION_PL )

	PATCHLEVEL=`cat $PATCHLEVEL_FILE`

	if [ "X$PATCHLEVEL" = "X" ]
	then
		PATCHLEVEL=1
	fi
}


INIT_VERSION () {
   (
	echo " "; 
	echo "fml release version::Initialize() ... "
	echo "fml release          Date() ... "
	echo "FML_VERSION={ $FML_VERSION }"
	$FML_VERSION -t kern/fml.pl > /dev/null

	if [ $release = 1 ]
	then
		echo "FML Release";
		$FML_VERSION -s

	elif [ $init = 1 ]
	then
 		echo "fml release          Increment() ... "
		$FML_VERSION -i kern/fml.pl > /dev/null
	else
		echo ""
		echo "RELEASE VERSION NOT INCREMENTED"
		echo "        (but patchlevel up? :-) ... "
		echo ""
		echo If you increment fml snapshot release version
		echo 	USAGE: $0 -i fml.pl
	fi

	RID=`$FML_VERSION -s`
	echo -n $RID     > $RELEASE_MANIFEST
	echo -n ";"	>> $RELEASE_MANIFEST
	date 		>> $RELEASE_MANIFEST
	echo "" 	>> $RELEASE_MANIFEST

	RS="kern/*.pl proc/*.pl bin/*.pl sbin/[a-z]* libexec/*.pl contrib/*/*.pl sys/*/[a-z]*"

	if [ $package = 1 ]
	then
		echo ""; 
		echo "-- export list of RCS ID in snapshot balls for [$RID]"
		echo ""; 
		for file in $RS
		do
			${PERL} $FML/distrib/bin/show-rcsid.pl $file |\
			tee -a $RELEASE_MANIFEST
		done

		############################
		##### distrib/history/ #####
		############################
		TID=`cat $FML/conf/release`
		test -d distrib/history      || mkdir distrib/history
		test -d distrib/history/$TID || mkdir distrib/history/$TID

		# not use $RELEASE_MANIFEST
		# cat $RELEASE_MANIFEST >> distrib/history/$TID/$RID
		RID=`${PERL} distrib/bin/fml_version.pl -r`

		# log cvs status unless $MODE
		if [ X$MODE = X ]; then
		   echo "save cvs status to distrib/history/$TID/$RID"
		   cvs_scan_conf=/tmp/cvsscan.conf.$$
		   awk -v FS=/ '{print $2}' ${FML}/CVS/Entries > $cvs_scan_conf
		   ${PERL} distrib/bin/cvsscan.pl -f $cvs_scan_conf |\
		   tee -a distrib/history/$TID/$RID
			(
			 echo "--------------------------";
			 echo "";
			) >> distrib/history/$TID/$RID
			echo " "; 
		   rm -f $cvs_scan_conf
		else
			echo "";
			echo -- ignore cvs status log
			echo "";
		fi
	fi

   )

	echo "Done."; 
	echo " "; 
}


INIT_CLEAN_UP () {
   (
	cd $DESTDIR || exit 1

	test -d FML || mkdir FML

	for x in fml-*
	do
	   echo mv $x FML/$x.$$
		mv $x FML/$x.$$
	done
   )

   volume=` df $DESTDIR |grep /dev/|awk '{print $4}' `

   echo ""
   echo "VOLUME CHECK: $DESTDIR left=$volume"

   if [ $volume -lt 10000 ]
   then
	echo "ERROR: $DESTDIR is too small. (left < ${volume}K)"
	exit 1
    fi

echo ""
}


INIT () {
	if [ $package = 0 ]
	then
		INIT_DIST
	elif [ $package = 1 ]
	then
		INIT_PACKAGE
	fi

	INIT_VERSION

	INIT_CLEAN_UP
}
