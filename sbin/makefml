#!/usr/local/bin/perl
# Copyright (C) 1993-1996 fukachan@phys.titech.ac.jp
# Copyright (C) 1996      fukachan@sapporo.iij.ad.jp
# fml is free software distributed under the terms of the GNU General
# Public License. see the file COPYING for more details.

local($id);
$id = q$Id$;
$rcsid .= " :".($id =~ /Id: lib(.*).pl,v\s+(\S+)\s+/ && $1."[$2]");


### AUTOMATICALLY REPLACED (Agent-Oriented?) ###
### AUTOMATICALLY REPLACED by makefml (Wed, 11 Dec 96 23:26:19 )
$CONFIG_DIR = ""; # __MAKEFML_AUTO_REPLACED_HERE__



&InitMakeFml;
&InitTTY;

&MakeFmlLock;

if (@ARGV) {
    &ExecCmd(join(" ",@ARGV));
}
else {
    &InitFmlConfig;
    &ExecCmd("init");
    &ExecCmd("install");
}

# Interactive Mode;
# &Menu;

&MakeFmlUnLock;

exit 0;


#################### LIBLARIES ####################
sub InitMakeFml
{
    &GetTime;

    require 'getopts.pl';
    &Getopts("dh");

    $LOCK_SH                       = 1;
    $LOCK_EX                       = 2;
    $LOCK_NB                       = 4;
    $LOCK_UN                       = 8;

    umask(077);

    local($user) = (getpwuid($<))[0];

    $debug = $opt_d;

    $HOME  = $ENV{'HOME'};
    $PWD   = $ENV{'PWD'};

    { # DNS AutoConfigure to set FQDN and DOMAINNAME; 
	local(@n, $hostname, $list);
	chop($hostname = `hostname`); # beth or beth.domain may be possible
	$FQDN = $hostname;
	@n    = (gethostbyname($hostname))[0,1]; $list .= " @n ";
	@n    = split(/\./, $hostname); $hostname = $n[0]; # beth.dom -> beth
	@n    = (gethostbyname($hostname))[0,1]; $list .= " @n ";

	foreach (split(/\s+/, $list)) { /^$hostname\.\w+/ && ($FQDN = $_);}
	$FQDN       =~ s/\.$//; # for e.g. NWS3865
	$DOMAINNAME = $FQDN;
	$DOMAINNAME =~ s/^$hostname\.//;
    }

    # config amd temporary files
    $CONFIG_TMP  = "/tmp/.fmlconfig.$user";
    $CONFIG_LOG  = "/tmp/.fmlconfiglog.$user";
    $CONFIG_DIR   = $CONFIG_DIR || "$HOME/.fml";
    $FML_CONFIG  = "$CONFIG_DIR/config";

    # initialize files
    if (-f $FML_CONFIG) {
	package Config;

	eval("require \$main'FML_CONFIG;\#'");
	print STDERR $@ if $@;

	$main'debug = $Config'debug;
	package main;

	&Dumpvar('Config') if $debug;
    }
    else {
	$TheFirstTime = 1;
    }

    # if not defined this machine OS;
    if ($OS_TYPE = $Config'OS_TYPE{$FQDN}) { #';
	print "---THIS HOST ($FQDN)'s OS IS $OS_TYPE\n";
    }
    else {
	print "---Try to inspect your Operating System ...\n\n";
	local($eval);

	$eval = q#$OS_TYPE = `sh sbin/os-type`;#;
	eval($eval);

	print STDERR $@ if $@;
	print "\n";

	chop $OS_TYPE;
	$OS_TYPE =~ tr/a-z/A-Z/;

	print "   Your OS looks $OS_TYPE\n";
	print "\n";

	eval("\$Config'OS_TYPE{'$FQDN'} = '$OS_TYPE';");
    }


    @Config = ('DOMAIN', 'FQDN', 'EXEC_DIR', 'ML_DIR');

    %Config = ('EXEC_DIR', 'EXEC FILES DIRECTORY',
	       'ML_DIR',   'TOP LEVEL ML DIRECTORY', 
	       'DOMAIN',   'DOMAIN NAME', 
	       'FQDN',     'FQDN', 
	       ); 

    %Default = ('EXEC_DIR', '/usr/local/fml',
		'ML_DIR',   '/var/spool/ml', 
		'DOMAIN',   $DOMAINNAME,
		'FQDN',     $FQDN,
		); 

    %MakeFmlProc = ('init',    'do_init',
		    'install', 'do_install',
		    'setq',    'do_setq',
		    'show',    'do_show',
		    'config',  'do_config',
		    'new',     'do_newml',
		    'newml',   'do_newml',
		    'add',     'do_adduser',
		    'adduser', 'do_adduser',
		    'bye',     'do_byeuser',
		    'byeuser', 'do_byeuser',
		    );

    # anyway set;
    &GetCurConfig;

    # signal handling
    $SIG{'ALRM'} = 'TimeOut';
    $SIG{'INT'} = $SIG{'QUIT'} = $SIG{'TERM'} = 'SignalLog';
}


sub InitFmlConfig
{
    local($cmd, $prompt, $v);

    print "---Please Define Your Fml System \n\n";

    for (@Config) {
	$k = $_;
	$p = $Config{$_};
	$v = $CurConfig{$_} ? $CurConfig{$_} : $Default{$_};

	printf "%-25s %s ", $p, "[$v]";

	$cmd = &GetString;
	
	$cmd = ($cmd !~ /^\s*$/) ? $cmd : $v;
	$buf .= sprintf("  set \$%-10s = '%s';\n", $k, $cmd);
	&do_setq($k, $cmd);
    }

    print "\n$buf\n";

    &GetCurConfig;

    print "CONFIG_DIR (e.g. $HOME/.fml, $CurConfig{'EXEC_DIR'}/.fml ...)\n";
    print "Config Saved in [$CurConfig{'EXEC_DIR'}/.fml] ";

    $cmd = &GetString;
    $cmd = ($cmd !~ /^\s*$/) ? $cmd : "$CurConfig{'EXEC_DIR'}/.fml";
    $CONFIG_DIR = $cmd;

    # mkdir CONFIG_DIR;
    {
	local($dir);
	for (split(/\//, $CONFIG_DIR)) {
	    $dir .= "/$_";
	    $dir =~ s#//#/#g;

	    if (! -d $dir) {
		print "   mkdir $dir\n";
		mkdir($dir, 0700);
	    }
	}
    }

    $FML_CONFIG  = "$CONFIG_DIR/config";

    $buf = &Dumpvar('Config');
    &SaveConfig($buf);

    print "\nThe Current Config is saved in $FML_CONFIG\n";
}


sub GetCurConfig
{
    local($s);

    # reset %CurConfig from Config Name Space;
    for (keys %Default) { 
	$s .= "\$CurConfig{'$_'} = \$Config'$_;\n";
    }

    eval($s);
    print "$@\n---\n$s\n" if $@;
}


sub SaveConfig
{
    local($buf) = @_;

    if (-f $FML_CONFIG) { rename($FML_CONFIG, "${FML_CONFIG}.bak");}

    open(F, ">> $FML_CONFIG") || die("Cannot save config to $FML_CONFIG");
    select(F); $| = 1; select(STDOUT);
    print F "$buf\n";
    print F "\n1;\n";
    close(F);
}


sub FlushLog
{
    &Cat($CONFIG_LOG);

    unlink $CONFIG_TMP;
    unlink $CONFIG_LOG;
}


sub Cat
{
    local($in) = @_;

    open(IN, $in) || return;
     $| = 1;
    while (<IN>) { print OUT $_;}
    close(IN); 
}


sub Copy
{
    local($in, $out) = @_;

    open(IN,  $in)      || (&Log("CopyIN: $!"), return);
    open(OUT, "> $out") || (&Log("CopyOUT: $!"), return);
    select(OUT); $| = 1; select(STDOUT); 
    while (<IN>) { print OUT $_;}
    close(OUT);
    close(IN); 
}


sub AppendString2File
{
    local($s, $file) = @_;

    open(APP, ">> $file") || return 0;
    select(APP); $| = 1; select(STDOUT);
    print APP "$s\n" if $s;
    close(APP);
}


sub Warn { print STDERR @_; print STDERR "\n";}


sub Log 
{ 
    &AppendString2File($_[0], $CONFIG_LOG);
}


sub SignalLog 
{ 
    local($sig) = @_; 
    print STDERR "Caught Signal[$sig], shutting down ... \n\n";
    &FlushLog;
    exit(1);
}


sub MakeFmlLock
{
    local($dir) = $CurConfig{'ML_DIR'};

    print "\n---Try to LOCK ML Actions...\n\t";

    opendir(DIRD, $dir);
    for (readdir(DIRD)) {
	next if /^\./;
	next unless -f "$dir/$_/config.ph";
	$count++;
	print " $_";

	$FP_SPOOL_DIR = "$dir/$_/spool";
	open($FP_SPOOL_DIR, $FP_SPOOL_DIR);
	flock($FP_SPOOL_DIR, $LOCK_EX);

    }
    closedir(DIRD);

    if ($count) {
	print "\n   ALL ML ACTIONS ARE LOCKED; GO AHEAD!\n\n";
    }
    else {
	print "\n   NO ML EXISTS; GO AHEAD!\n\n";
    }
}


sub MakeFmlUnLock
{
    local($dir) = $CurConfig{'ML_DIR'};

    opendir(DIRD, $dir);
    for (readdir(DIRD)) {
	next if /^\./;

	$FP_SPOOL_DIR = "$dir/$_";
	open($FP_SPOOL_DIR, $FP_SPOOL_DIR);
	flock($FP_SPOOL_DIR, $LOCK_UN);

    }
    closedir(DIRD);
}


# lock algorithm using flock system call
# if lock does not succeed,  fml process should exit.
sub Flock
{
    open(LOCK, $FP_SPOOL_DIR); # spool is also a file!
    flock(LOCK, $LOCK_EX);
}


sub Funlock 
{
    close(LOCK);
    flock(LOCK, $LOCK_UN);
}


sub InitTTY
{
    if (-e "/dev/tty") { $console = "/dev/tty";}

    open(IN, "<$console") || open(IN,  "<&STDIN"); # so we don't dingle stdin
    open(OUT,">$console") || open(OUT, ">&STDOUT");# so we don't dongle stdout
    select(OUT); $| = 1; #select(STDOUT); $| = 1;
}


sub ExecCmd
{
    local($_) = @_;
    local(@argv, $fp);

    @argv = split(/\s+/, $_);

    &GetCurConfig;

    # function pointer;
    $fp = shift @argv;
    $fp = $FP{$fp} ? $FP{$fp} : $fp;

    if ($MakeFmlProc{$fp}) {
	$fp = $MakeFmlProc{$fp};
	&$fp(@argv);
    }
    else {
	print "   Command [$fp] NOT DEFINED\n";
	print "   Please see the document 'INSTALL'\n\n";
	return;
    }

}


sub gets
{
    local($.);
    $_ = <IN>;
}


sub GetString
{
    local($s);

    $s = &gets;

    # ^D
    if ($s eq "")  { exit 0;}
    chop $s;

    $s;
}



##########################################################
sub do_init
{
    print "\n";
    
    for ($Config'EXEC_DIR, $Config'ML_DIR) {
	if (! -d $_) {
	    print "   mkdir $_\n";
	    mkdir($_, 0755);
	}
    }
    print "\n";
    return 'LAST';
}


sub do_install
{
    local($cmd);

    print "---Install the Fml system to $CurConfig{'EXEC_DIR'}. O.K.? [y/n] ";
    $cmd = &GetString;

    if ($cmd ne 'y') {
	print "STOP. (DO NOT INSTALLED)\n";
	return;
    }
    else {
	print "\nsbin/install.sh $Config'EXEC_DIR\n"; #';
    }

    &FixPath("src/fml.pl");
    &FixPath("src/msend.pl");
    &FixPath("sbin/makefml");
    &FixPath("cf/config");

    # $exec_dir/sbin/install.sh is NOT yet installed 
    if (-f "sbin/install.sh") {
	$SH = $ENV{'SH'} || "/bin/sh";
	system "$SH ./sbin/install.sh $Config'EXEC_DIR"; #';
    }
    else {
	print "Please do \"makefml\" in the top directory of the source\n";
    }
}


sub FixPath
{
    local($prog) = @_;
    local($perl);

    $perl = &search_path('perl');

    open(IN, $prog) || (&Warn("cannot open $prog"), return);
    open(NEW, "> $prog.new") || (&Warn("cannot open $prog.new"), return);
    select(NEW); $| = 1; select(STDOUT);

    while (<IN>) {
	if ($. == 1) {
	    print NEW "\#\!$perl\n";
	    next;
	}

	# recreate my own;
	if ($prog =~ /makefml/ && 
	    /__MAKEFML_AUTO_REPLACED_HERE__/ && /^\$CONFIG_DIR/) {
	    print NEW "### AUTOMATICALLY REPLACED by makefml ($MailDate)\n";
	    print NEW "\$CONFIG_DIR = \"$CONFIG_DIR\"; ";
	    print NEW "\# __MAKEFML_AUTO_REPLACED_HERE__\n";
	    next;
	}

	print NEW $_;
    }
    close(OUT);
    close(IN);

    rename($prog, "$prog.bak");
    rename("$prog.new", $prog);
}


sub search_path
{
    local($f) = @_;
    local($path) = $ENV{'PATH'};
    local(@path) = split(/:/, $path);

    for ("/usr/local/bin", "/usr/share/bin", 
	 "/usr/contrib/bin", "/usr/gnu/bin") {
	push(@path, $_);
    }

    foreach $dir (@path) { if (-f "$dir/$f") { return "$dir/$f";}}
}


sub do_setq
{
    eval("\$Config'$_[0] = '$_[1]';");
    print "$@\n--@_\n" if $@;
}


sub do_new { &do_newml(@_);}
sub do_newml
{
    local($ml) = @_;
    local($exec_dir, $ml_dir, $cf, $domain, $fqdn, $cf, $cfex, $user);

    print "---Creating $ml mailing list\n";

    &InitLocalVariables;

    # mkdir ML Directory
    mkdir("$ml_dir/$ml", 0700);
    &Conv($ml, "$exec_dir/cf/__makefml", "$CONFIG_DIR/$ml.cf");

    if ($OS_TYPE && open(CF, ">> $CONFIG_DIR/$ml.cf")) {
	print CF "\nLOCAL_CONFIG\n\n";
	print CF "\# makefml TENUKI;-) Config\n";
	print CF "\$NON_PORTABILITY = 1;\n";
	print CF "\n\# makefml defines the following.\n";
	print CF "\$COMPAT_${OS_TYPE} = 1;\n";
	close(CF);
    }

    # 
    # make ml/config.ph
    $exec  = "perl $exec_dir/cf/config -m $exec_dir/cf/MANIFEST ";
    $exec .= "$CONFIG_DIR/$ml.cf";    
    system "$exec > $ml_dir/$ml/config.ph";

    ### generate samples, includes and aliases in $exec_dir/include ###
    umask(022);

    mkdir("$exec_dir/include", 0755);
    # include file is public readable;
    &Conv($ml, "$exec_dir/etc/samples/__include", "$exec_dir/include/$ml");

    # 
    umask(077);

    # directory to store the config for each ML
    mkdir("$CONFIG_DIR/$ml", 0700);

    # generating samples ...;
    &Conv($ml, "$exec_dir/etc/samples/__aliases", "$CONFIG_DIR/$ml/aliases");
    &Conv($ml, "$exec_dir/etc/samples/__include", "$CONFIG_DIR/$ml/include");
    &Conv($ml, "$exec_dir/etc/samples/__crontab", "$CONFIG_DIR/$ml/crontab");
    &Conv($ml, "$exec_dir/etc/samples/__fml.c",   "$CONFIG_DIR/$ml/fml.c");

    &GenCrontab;

    # the last info
    print "Please see several examples in $CONFIG_DIR/$ml\n";
    print "\n# Example of Aliases ($CONFIG_DIR/$ml/aliases)\n";
    &Cat("$CONFIG_DIR/$ml/aliases");
    print "\n";
}


sub do_config
{
    local($ml) = @_;
    local($exec_dir, $ml_dir, $cf, $domain, $fqdn, $cf, $cfex, $user);
    local($cf, $local_config, $config);

    print "---Configure $ml mailing list ... \n";

    &InitLocalVariables;

    # without LOCAL_CONFIG;
    open(CF, "$CONFIG_DIR/$ml.cf") || die ("cannot find $CONFIG_DIR/$ml.cf");
    while (<CF>){
	next if /---SUBSTITUTE BY makefml/;
	next if /---END OF SUBSTITUTE BY makefml/;

	if (1 .. /LOCAL_CONFIG/) {
	    next if /LOCAL_CONFIG/;
	    $config .= $_;
	}
	else {
	    $local_config .= $_;
	}

    }

    $config .= "### ---SUBSTITUTE BY makefml ($MailDate)---\n";
    $config .= &AutoRegistQuery($ml);
    $config .= "### ---END OF SUBSTITUTE BY makefml ($MailDate)---\n";

    $local_config .= "### ---SUBSTITUTE BY makefml ($MailDate)---\n";
    $local_config .= "\n\# makefml defines the following.\n";
    $local_config .= "\$COMPAT_${OS_TYPE} = 1;\n";
    $local_config .= &SubjectTagQuery($ml);
    $local_config .= "### ---END OF SUBSTITUTE BY makefml ($MailDate)---\n";

    print "Saved in $CONFIG_DIR/$ml.cf\n";

    if (open(CF, "> $CONFIG_DIR/$ml.cf")) {
	print CF $config;
	print CF "\nLOCAL_CONFIG\n$local_config\n";
	close(CF);
    }

    # 
    # make ml/config.ph
    $exec = "perl $exec_dir/cf/config $CONFIG_DIR/$ml.cf ";
    system "$exec > $ml_dir/$ml/config.ph";
}


sub Query
{
    local($menu, $query, $pat, $default) = @_;

    while (1) {
	print "$menu ($query) [$default] ";
	$cmd = &GetString;
	print "\n";

	if ($cmd =~ /^($pat)$/) { last;}
	if ($cmd =~ /^\s*$/) { $cmd = $default; last;}

	print "   ***Warning!!! Please input ($query)\n";
    }    

    $cmd;
}


sub AutoRegistQuery
{
    local($ml) = @_;
    local($r, $buf);

    $r = &Query("Auto Registration ", "y/n", "y|n", "n");

    $buf .= "ML_MEMBER_CHECK\t";
    $buf .= $r eq 'y' ? "0" : "1";
    $buf .= "\n";

    if ($r eq "y") {
	print "   Auto Registration Type\n";
	print "      0 default\n";
	print "      1 subject\n";
	print "      2 body\n";	
	print "\n";

	$r = &Query("   Auto Registration Type ", "0,1,2 ", '0|1|2', "0");

	if ($r == 1) {
	    $buf .= "REQUIRE_SUBSCRIBE\tsubscribe\n";
	}
	elsif ($r == 2) {
	    $buf .= "REQUIRE_SUBSCRIBE\tsubscribe\n";
	    $buf .= "REQUIRE_SUBSCRIBE_IN_BODY\t1\n";
	}
    }

    $buf;
}


sub SubjectTagQuery
{
    local($ml) = @_;
    local($r, $buf);

    print "Subject TAG TYPE [0-6]:\n\n";
    print <<_EOF_;
TYPE    Subject Example
----------------------------
0       Subject:                (NO TAG which Fml recommends)

1	Subject: (Elena:100)

2	Subject: [Elena:100]	(hml 1.6 compat)

3	Subject: (Elena 100)

4	Subject: [Elena 100]

5	Subject: [Elena,100]

6	Subject: (Elena,100)

_EOF_

    $r = &Query("Subject TAG TYPE ", "0-6", "[0-6]", "0");

    %tag = (1, "(:)",
	    2, "[:]",
	    3, "( )",
	    4, "[ ]",
	    5, "(,)",
	    6, "[,]");

    if ($r =~ /^[123456]$/){
	$buf .= "&DEFINE_SUBJECT_TAG('$tag{$r}');\n";
    }
    else {
	$buf = "";
    }

    $buf;
}


sub InitLocalVariables
{
    # anyway set;
    &GetCurConfig;

    $user     = (getpwuid($<))[0];
    $exec_dir = $CurConfig{'EXEC_DIR'};
    $ml_dir   = $CurConfig{'ML_DIR'};
    $domain   = $CurConfig{'DOMAIN'};
    $fqdn     = $CurConfig{'FQDN'};

    # Mailing list name is all lower case;
    $ml =~ tr/A-Z/a-z/;
}


sub GenCrontab
{
    open(TAB, "> $CONFIG_DIR/crontab") || 
	(&Warn("cannot open $CONFIG_DIR/crontab"), return);
    select(TAB); $| = 1; select(STDOUT);

    opendir(DIRD, $CONFIG_DIR) || (&Warn("cannot open $CONFIG_DIR"), return);
    for (readdir(DIRD)) {
	next if /^\./;

	if (-f "$CONFIG_DIR/$_/crontab") {
	    if (open(IN, "$CONFIG_DIR/$_/crontab") ) {
		while (<IN>) {  print TAB $_;}
		close(IN);
	    }
	}

    }
    closedir(DIRD);

}


sub do_adduser
{
    local($ml, $member) = @_;
    local($exec_dir, $ml_dir, $cf, $domain, $fqdn, $cf, $cfex, $user);

    print "---Addming $member to $ml mailing list\n";

    $user     = (getpwuid($<))[0];
    $exec_dir = $CurConfig{'EXEC_DIR'};
    $ml_dir   = $CurConfig{'ML_DIR'};
    $domain   = $CurConfig{'DOMAIN'};
    $fqdn     = $CurConfig{'FQDN'};

    # Mailing list name is all lower case;
    $ml =~ tr/A-Z/a-z/;

    # mkdir ML Directory
    if (! -d "$ml_dir/$ml") {
	print "***Error: $ml ML NOT CREATED\n";
	return;
    }

    # add 
    for ("$ml_dir/$ml/members", "$ml_dir/$ml/actives") {
	print "Append $member to $member\n" if $debug;
	&AppendString2File($member, $_);
    }
}


sub do_byeuser
{
    local($ml, $member) = @_;
    local($exec_dir, $ml_dir, $cf, $domain, $fqdn, $cf, $cfex, $user);

    print "---Delete $member in $ml mailing list\n";

    $user     = (getpwuid($<))[0];
    $exec_dir = $CurConfig{'EXEC_DIR'};
    $ml_dir   = $CurConfig{'ML_DIR'};
    $domain   = $CurConfig{'DOMAIN'};
    $fqdn     = $CurConfig{'FQDN'};

    # Mailing list name is all lower case;
    $ml =~ tr/A-Z/a-z/;

    # mkdir ML Directory
    if (! -d "$ml_dir/$ml") {
	print "***Error: $ml ML NOT CREATED\n";
	return;
    }

    # delete 
    for ("$ml_dir/$ml/members", "$ml_dir/$ml/actives") {
	print "Delete $member in $_\n" if $debug;
	&Repl($member, $_);
    }
}


sub Repl
{
    local($member, $file) = @_;

    open(F, $file)           || (&Warn("cannot open $file"), return 0);
    open(NEW, "> $file.new") || (&Warn("cannot open $file.new"), return 0);
    select(NEW); $| = 1; select(STDOUT);

    while (<F>) {
	s/^\#\s*$member/\#\#BYE $member/i; # off;
	s/^$member/\#\#BYE $member/i;
	print NEW $_;
    }

    close(NEW);
    close(F);

    rename($file, "${file}.bak") || 
	(&Warn("cannot rename $file $file.bak"), return 0);
    rename("${file}.new", $file) ||
		(&Warn("cannot rename $file.new $file"), return 0);
}


sub Conv
{
    local($exec_dir, $ml_dir, $cf, $domain, $fqdn, $user);
    local($ml, $example, $out) = @_;

    $user     = (getpwuid($<))[0];
    $exec_dir = $CurConfig{'EXEC_DIR'};
    $ml_dir   = $CurConfig{'ML_DIR'};
    $domain   = $CurConfig{'DOMAIN'};
    $fqdn     = $CurConfig{'FQDN'};
    $opts     = $CurConfig{'OPTS'};

    # Mailing list name is all lower case;
    $ml =~ tr/A-Z/a-z/;

    open(NEW, $example)  || &Log("cannot open $example");
    open(CF, "> $out")   || &Log("cannot open $out");
    select(CF); $| = 1; select(STDOUT);
    
    while (<NEW>) {
	s/_EXEC_DIR_/$exec_dir/g;
	s/_ML_DIR_/$ml_dir/g;
	s/_ML_/$ml/g;
	s/_DOMAIN_/$domain/g;
	s/_FQDN_/$fqdn/g;
	s/_USER_/$user/g;
	s/_OPTIONS_/$opts/g;
	print CF $_;
    }
    close(NEW);
    close(CF);
}


sub GetTime
{
    @WDay = ('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
    @Month = ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
	      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
    
    ($sec,$min,$hour,$mday,$mon,$year,$wday) = (localtime(time))[0..6];
    $Now = sprintf("%2d/%02d/%02d %02d:%02d:%02d", 
		   $year, $mon + 1, $mday, $hour, $min, $sec);
    $MailDate = sprintf("%s, %d %s %d %02d:%02d:%02d %s", 
			$WDay[$wday], $mday, $Month[$mon], 
			$year, $hour, $min, $sec, $TZone);

    # /usr/src/sendmail/src/envelop.c
    #     (void) sprintf(tbuf, "%04d%02d%02d%02d%02d", tm->tm_year + 1900,
    #                     tm->tm_mon+1, tm->tm_mday, tm->tm_hour, tm->tm_min);
    # 
    $CurrentTime = sprintf("%04d%02d%02d%02d%02d", 
			   1900 + $year, $mon + 1, $mday, $hour, $min);
}

#####
package dumpvar;

sub main'Dumpvar 
{
    ($package, @vars) = @_;

    # if perl 4
    local(*stab) = eval("*_$package");

    # if perl 5
    if ($] =~ /5\.\d\d\d/) { *stab = *{"Config::"};}

    while (($key, $val) = each(%stab)) {
	{
	    next if @vars && !grep($key eq $_,@vars);
	    local(*entry) = $val;

	    if (defined $entry) {
		$buf .= "\$$key = '$entry';\n";
	    }

	    if (defined @entry) {
		$buf .= "\@$key = (\n";
		foreach $num ($[ .. $#entry) {
		    $buf .= "  $num\t'",$entry[$num],"'\n";
		}
		$buf .= ");\n";
	    }

	    if ($key ne "_$package" && $key ne "_DB" && defined %entry) {
		$buf .= "\%$key = (\n";
		foreach $key (sort keys(%entry)) {
		    $buf .= "\t '$key', '$entry{$key}', \n";
		}
		$buf .= ");\n";
	    }
	}
    }

    return $buf;
}

1;
