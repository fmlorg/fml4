#!/usr/local/bin/perl
# Copyright (C) 1993-1996 fukachan@phys.titech.ac.jp
# Copyright (C) 1996-1997 fukachan@sapporo.iij.ad.jp
# fml is free software distributed under the terms of the GNU General
# Public License. see the file COPYING for more details.

### not beatiful yet;_; ...

local($id);
$id = q$Id$;
$rcsid .= " :".($id =~ /Id: lib(.*).pl,v\s+(\S+)\s+/ && $1."[$2]");


### AUTOMATICALLY REPLACED (Agent-Oriented?) ###
$CONFIG_DIR = ''; # __MAKEFML_AUTO_REPLACED_HERE__

&InitMakeFml;
&InitTTY;

# info
if (! @ARGV) { &ExecCmd("info"); exit 0;}

&MakeFmlLock;

if (@ARGV) {
    &ExecCmd(join(" ",@ARGV));
}
else {
    &ExecCmd("info");
}

# RESERVED FOR FURTHER EXTENTION;
# Interactive Mode;
# &Menu;

&MakeFmlUnLock;

if ($GroupWritable) {
    print STDERR "\n   Please check the group permission in $ML_DIR\n";
    print STDERR "   Enjoy Internetworking!\n";
}

exit 0;



#################### LIBLARIES ####################
sub InitMakeFml
{
    $| = 1;

    &GetTime;

    require 'getopts.pl';
    &Getopts("dhf:A:");

    # flush;
    select(STDOUT); $| = 1;

    # flock(2)
    $LOCK_SH                       = 1;
    $LOCK_EX                       = 2;
    $LOCK_NB                       = 4;
    $LOCK_UN                       = 8;

    # umask 077?
    # if a group mainteints the fml system, umask(007)?;
    # here several people can read but not write;
    umask(002);

    $COMPAT_ARCH = $opt_A;

    if ($COMPAT_ARCH eq "WINDOWS_NT4") {
	$USER = $ENV{'USERNAME'};
    }
    else {
	$USER = $ENV{'USER'} || (getpwuid($<))[0];
    }

    $debug = $opt_d;

    $HOME  = $ENV{'HOME'};
    $PWD   = $ENV{'PWD'};

    { # DNS AutoConfigure to set FQDN and DOMAINNAME; 
	local(@n, $hostname, $list);
	chop($hostname = `hostname`); # beth or beth.domain may be possible
	$FQDN = $hostname;
	@n    = (gethostbyname($hostname))[0,1]; $list .= " @n ";
	@n    = split(/\./, $hostname); $hostname = $n[0]; # beth.dom -> beth
	@n    = (gethostbyname($hostname))[0,1]; $list .= " @n ";

	foreach (split(/\s+/, $list)) { /^$hostname\.\w+/ && ($FQDN = $_);}
	$FQDN       =~ s/\.$//; # for e.g. NWS3865
	$DOMAINNAME = $FQDN;
	$DOMAINNAME =~ s/^$hostname\.//;
    }

    # architecture dependence;
    if ($COMPAT_ARCH eq "WINDOWS_NT4") {
	$CONFIG_DIR =~ s#\\#/#g;
    }

    # config amd temporary files
    $CONFIG_LOG  = "/tmp/.fmlconfiglog.$USER";
    $CONFIG_DIR   = $CONFIG_DIR || "$HOME/.fml";

    if ($opt_f) {
	$FML_CONFIG  = $opt_f;	
    }
    else {
	$FML_CONFIG  = "$CONFIG_DIR/system";
    }

    # initialize files
    if (-f $FML_CONFIG) {
	print STDERR "---Loading the configuration file $FML_CONFIG\n\n";

	package Config;
	eval("require \$main'FML_CONFIG;\#'");
	print STDERR $@ if $@;

	$main'debug = $Config'debug;
	package main;

	&Dumpvar('Config') if $debug;
    }
    else {
	print STDERR "---ignore no configuration file $FML_CONFIG\n\n";
	$TheFirstTime = 1;
    }

    # if not defined this machine OS;
    if ($OS_TYPE = $Config'OS_TYPE{$FQDN}) { #';
	print "---THIS HOST ($FQDN)'s OS IS $OS_TYPE\n";
    }
    elsif ($COMPAT_ARCH eq "WINDOWS_NT4") {
	$OS_TYPE = "WINDOWS_NT4";
	eval("\$Config'OS_TYPE{'$FQDN'} = '$OS_TYPE';");
    }
    else {
	print "---Try to inspect your Operating System ...\n\n";
	local($eval);

	$eval = q#$OS_TYPE = `sh sbin/os-type`;#;
	eval($eval);

	print STDERR $@ if $@;
	print "\n";

	chop $OS_TYPE;
	$OS_TYPE =~ tr/a-z/A-Z/;

	print "   Your OS looks $OS_TYPE\n";
	print "\n";

	eval("\$Config'OS_TYPE{'$FQDN'} = '$OS_TYPE';");
    }


    # configurable variables;
    @Config = ('DOMAIN', 'FQDN', 'EXEC_DIR', 'ML_DIR');

    %Config = ('EXEC_DIR', 'EXEC FILES DIRECTORY',
	       'ML_DIR',   'TOP LEVEL ML DIRECTORY', 
	       'DOMAIN',   'DOMAIN NAME', 
	       'FQDN',     'FQDN', 
	       ); 

    %Default = ('PERSONAL_OR_GROUP', 'personal',
		'EXEC_DIR', '/usr/local/fml',
		'ML_DIR',   '/var/spool/ml', 
		'DOMAIN',   $DOMAINNAME,
		'FQDN',     $FQDN,
		'GROUP',    '',
		); 

    # $COMPAT_ARCH eq "WINDOWS_NT4"
    if ($COMPAT_ARCH eq "WINDOWS_NT4") {
	local($dir);
	chop($dir = `cd`);
	$dir =~ s/(\w:).*/$1/;
	$Default{'EXEC_DIR'} = "$dir\\fml";
	$Default{'ML_DIR'}   = "$dir\\fml\\ml";
    }

    %MakeFmlProc = ('init',     'do_init',
		    'install',  'do_install',
		    '0#install', 'Install the fml system',
		    'info',     'do_info',
		    '0#info',    'show this message',
		    'setq',     'do_setq',
		    'show',     'do_show',
		    'config',   'do_config',
		    'new',      'do_newml',
		    'newml',    'do_newml',
		    '1#newml ML',   'make a new Mailing List <ML>',
		    'add',      'do_adduser',
		    '2#add ML address',     'add <address> to <ML>',
		    'adduser',  'do_adduser',
		    '2#adduser ML address', 'add <address> to <ML>',
		    'bye',      'do_byeuser',
		    '3#bye ML address',     'remove <address> from the <ML>',
		    'byeuser',  'do_byeuser',
		    '3#byeuser ML address', 'remove <address> from the <ML>',
		    'addadmin', 'do_addadmin',
		    '4#addadmin ML address', 'add <address> as an admin to <ML>',
		    'byeadmin', 'do_byeadmin',
		    '4#byeadmin ML address', 'remove the administrator of the <ML>',
		    'help',	'do_help',
		    '8#help',	'help message',
		    'passwd',	'do_passwd',
		    '8#passwd ML address',	'to change the administrator passwd',

		    'fmlserv',  'do_fmlserv',
		    'listserv', 'do_fmlserv',
		    'marjodomo','do_fmlserv',

		    '10#fmlserv', 'set up fmlserv (listserv-like interface)',
		    '10#listserv','set up fmlserv (listserv-like interface)',
		    '10#majordomo','set up fmlserv (listserv-like interface)',
		    );

    ### anyway reload and set the present config for convenience;
    &GetCurConfig;
    &ResetVariables;

    # fix include path for *.pl
    push(@INC, $EXEC_DIR);

    if ($CurConfig{'PERSONAL_OR_GROUP'} =~ /^(group|fmlserv)$/) {
	$GroupWritable = $CurConfig{'PERSONAL_OR_GROUP'};
    }

    ### signal handling
    $SIG{'ALRM'} = 'TimeOut';
    $SIG{'INT'} = $SIG{'QUIT'} = $SIG{'TERM'} = 'SignalLog';
}


sub InitFmlConfig
{
    local($cmd, $prompt, $v);

    print "---Please Define Your Fml System Configurations\n\n";

    # personal or group-shared?
    printf "%-25s ", 'Personal Use or ML-Admin-Group-Shared or fmlserv you use?';
    $cmd = &Query("Personal, Group, Fmlserv", "personal/group/fmlserv", 
		  "personal|group|fmlserv", "personal");    
    $cmd = ($cmd !~ /^\s*$/) ? $cmd : $v;
    &do_setq("PERSONAL_OR_GROUP", $cmd);

    if ($cmd eq 'group' || $cmd eq 'fmlserv') {
	printf "Please define the group (in /etc/group) ML Operators use";
	$cmd = &Query("Group of Mailing List Operators", 
		      "fml or GID ([\\w\\d]+)", "[\\w\\d]+", "fml");    
	&do_setq("GROUP", $cmd);

	$GID = &GetGID($cmd);

	print "GID\t$cmd\n" if $debug;
	print "GID\t$GID\n" if $debug;

	if (! $GID) {
	    print "   *** ERROR ***\n";
	    print "   I cannot find the group \"$cmd\" in /etc/group.\n";
	    print "   Please define it!\n";
	    exit 0;
	}
    }

    # values;
    for (@Config) {
	$k = $_;
	$p = $Config{$_};
	$v = $CurConfig{$_} ? $CurConfig{$_} : $Default{$_};

	printf "%-25s %s ", $p, "[$v]";

	$cmd = &GetString;
	
	$cmd = ($cmd !~ /^\s*$/) ? $cmd : $v;
	$buf .= sprintf("  set \$%-10s = '%s';\n", $k, $cmd);
	&do_setq($k, $cmd);
    }

    print "\n$buf\n";

    &GetCurConfig;

    # print "CONFIG_DIR (e.g. $HOME/.fml, $CurConfig{'EXEC_DIR'}/.fml ...)\n";
    # print "Config Saved in [$CurConfig{'EXEC_DIR'}/.fml] ";
    # $cmd = &GetString;
    # $cmd = ($cmd !~ /^\s*$/) ? $cmd : "$CurConfig{'EXEC_DIR'}/.fml";
    # $CONFIG_DIR = $cmd;

    $CONFIG_DIR = "$CurConfig{'EXEC_DIR'}/.fml";

    # mkdir CONFIG_DIR;
    {
	local($dir);
	for (split(/\//, $CONFIG_DIR)) {
	    if ($COMPAT_ARCH eq "WINDOWS_NT4") {
		$dir .= $dir ? "/$_" : $_;
	    }
	    else {
		$dir .= "/$_";
	    }

	    $dir =~ s#//#/#g;

	    if (! -d $dir) {
		print "   mkdir $dir\n";
		# here /usr/local/fml;only installer can read-write this;
		mkdir($dir, 0755); 
	    }
	}
    }

    $FML_CONFIG  = "$CONFIG_DIR/system";

    $buf = &Dumpvar('Config');
    &SaveConfig($buf);

    print "\nThe Current Config is saved in $FML_CONFIG\n";
}


sub GetCurConfig
{
    local($s);

    # reset %CurConfig from Config Name Space;
    for (keys %Default) { 
	$s .= "\$CurConfig{'$_'} = \$Config'$_;\n";
    }

    eval($s);
    print "$@\n---\n$s\n" if $@;
}


sub SaveConfig
{
    local($buf) = @_;

    if (-f $FML_CONFIG) { rename($FML_CONFIG, "${FML_CONFIG}.bak");}

    open(F, ">> $FML_CONFIG") || die("Cannot save config to $FML_CONFIG");
    select(F); $| = 1; select(STDOUT);
    print F "$buf\n";
    print F "\n1;\n";
    close(F);
}


sub FlushLog
{
    &Cat($CONFIG_LOG);
    unlink $CONFIG_LOG;
}


sub Cat
{
    local($in) = @_;

    open(CAT_OUT, $in) || return;
    select(STDOUT); $| = 1;
    while (<CAT_OUT>) { print $_;}
    close(CAT_OUT); 
}


sub Copy
{
    local($in, $out) = @_;

    open(COPY_IN,  $in)      || (&Log("CopyIN: $!"), return);
    open(OUT, "> $out") || (&Log("CopyOUT: $!"), return);
    select(OUT); $| = 1; select(STDOUT); 
    while (sysread(COPY_IN, $_, 4096)) { print OUT $_;}
    close(OUT);
    close(COPY_IN); 
}


sub AppendString2File
{
    local($s, $file) = @_;

    open(APP, ">> $file") || return 0;
    select(APP); $| = 1; select(STDOUT);
    print APP "$s\n" if $s;
    close(APP);
}


sub Warn { print STDERR @_; print STDERR "\n";}


sub Log 
{ 
    &AppendString2File($_[0], $CONFIG_LOG);
}


sub SignalLog 
{ 
    local($sig) = @_; 
    print STDERR "Caught Signal[$sig], shutting down ... \n\n";
    #&FlushLog;
    exit(1);
}


sub MakeFmlLock
{
    local($dir) = $CurConfig{'ML_DIR'};

    print "\n---Try to LOCK ML Actions...\n\t";

    opendir(DIRD, $dir);
    for (readdir(DIRD)) {
	next if /^\./;
	next unless -f "$dir/$_/config.ph";
	$count++;
	print " $_";

	$FP_SPOOL_DIR = "$dir/$_/spool";
	open($FP_SPOOL_DIR, $FP_SPOOL_DIR);
	flock($FP_SPOOL_DIR, $LOCK_EX);

    }
    closedir(DIRD);

    if ($count) {
	print "\n   ALL ML ACTIONS ARE LOCKED; GO AHEAD!\n\n";
    }
    else {
	print "\n   NO ML EXISTS; GO AHEAD!\n\n";
    }
}


sub MakeFmlUnLock
{
    local($dir) = $CurConfig{'ML_DIR'};

    opendir(DIRD, $dir);
    for (readdir(DIRD)) {
	next if /^\./;

	$FP_SPOOL_DIR = "$dir/$_";
	open($FP_SPOOL_DIR, $FP_SPOOL_DIR);
	flock($FP_SPOOL_DIR, $LOCK_UN);

    }
    closedir(DIRD);
}


# lock algorithm using flock system call
# if lock does not succeed,  fml process should exit.
sub Flock
{
    open(LOCK, $FP_SPOOL_DIR); # spool is also a file!
    flock(LOCK, $LOCK_EX);
}


sub Funlock 
{
    close(LOCK);
    flock(LOCK, $LOCK_UN);
}


sub InitTTY
{
    if (-e "/dev/tty") { $console = "/dev/tty";}

    open(IN, "<$console") || open(IN,  "<&STDIN"); # so we don't dingle stdin
    open(OUT,">$console") || open(OUT, ">&STDOUT");# so we don't dongle stdout
    select(OUT); $| = 1; #select(STDOUT); $| = 1;
}


sub ExecCmd
{
    local($_) = @_;
    local(@argv, $fp);

    @argv = split(/\s+/, $_);

    &GetCurConfig;
    &ResetVariables;

    if ($TheFirstTime) {
	;
    }
    else {
	if (!-d $EXEC_DIR) {
	    print STDERR "ExecDir($EXEC_DIR) NOT FOUND, STOP\n";
	    return;
	}
	if (!-d $ML_DIR) {
	    print STDERR "ML_DIR($ML_DIR) NOT FOUND, STOP\n";
	    return;
	}
    }



    # function pointer;
    $fp = shift @argv;
    $fp = $FP{$fp} ? $FP{$fp} : $fp;

    if ($MakeFmlProc{$fp}) {
	$fp = $MakeFmlProc{$fp};
	&$fp(@argv);
    }
    else {
	print "   Command [$fp] NOT DEFINED\n";
	print "   Please see the document 'INSTALL'\n\n";
	return;
    }

}


sub gets
{
    local($.);
    $_ = <IN>;
}


sub GetString
{
    local($s);

    $s = &gets;

    # ^D
    if ($s eq "")  { print STDERR "'^D' Trapped.\n"; exit 0;}
    chop $s;

    $s;
}


sub FixPath
{
    local($prog) = @_;
    local($perl);

    if ($COMPAT_ARCH eq "WINDOWS_NT4") { 
	$perl = "";
    }
    else {
	$perl = &search_path('perl');
    }

    open(PROG, $prog) || (&Warn("cannot open $prog"), return);
    open(NEW, "> $prog.new") || (&Warn("cannot open $prog.new"), return);
    select(NEW); $| = 1; select(STDOUT);

    while (<PROG>) {
	if ($. == 1) {
	    print NEW "\#\!$perl\n" if $perl;
	    next;
	}

	next if /^\#\#\# AUTOMATICALLY REPLACED/;

	# recreate my own;
	if ($prog =~ /makefml/ && 
	    /__MAKEFML_AUTO_REPLACED_HERE__/ && /^\$CONFIG_DIR/) {
	    #print STDERR "----Replace makefml::\$CONFIG_DIR -> $CONFIG_DIR\n";
	    print NEW "### AUTOMATICALLY REPLACED by makefml ($MailDate)\n";
	    print NEW "\$CONFIG_DIR = '$CONFIG_DIR'; ";
	    print NEW "\# __MAKEFML_AUTO_REPLACED_HERE__\n";
	    next;
	}

	print NEW $_;
    }
    close(NEW);
    close(PROG);
    sleep 1;

    if ($COMPAT_ARCH eq "WINDOWS_NT4") { 
	unlink "${prog}.bak" if -f "${prog}.bak";
	&Copy($prog, "${prog}.bak");
	&Copy("${prog}.new", $prog);
    }
    else {
	rename($prog, "${prog}.bak") || &Warn("cannot rename $prog $prog.bak");
	rename("${prog}.new", $prog) || &Warn("cannot rename $prog.new $prog");
    }
}


sub search_path
{
    local($f) = @_;
    local($path) = $ENV{'PATH'};
    local(@path) = split(/:/, $path);

    for ("/usr/local/bin", "/usr/share/bin", 
	 "/usr/contrib/bin", "/usr/gnu/bin") {
	push(@path, $_);
    }

    foreach $dir (@path) { if (-f "$dir/$f") { return "$dir/$f";}}
}


sub OutPutLocalConfig
{
    local(*MAKE_FML) = @_;

    print CF "\nLOCAL_CONFIG\n\n";
    print CF "\#__MAKEFML_LOCAL_CONFIG__\n";
    print CF "require 'libmakefml.pl';\n";

    for (keys %MAKE_FML) {
	$value = $MAKE_FML{$_};
	$value = ($value =~ /^\d+$/) ? $value : "\"$value\"";
	print CF "\$MAKE_FML{'$_'} = $value;\n";
    }

    print CF "&ConfigByMakeFml;\n";
    print CF "\#__END_OF_MAKEFML_LOCAL_CONFIG__\n";
}



sub Query
{
    local($menu, $query, $pat, $default) = @_;
    
    print "\n";

    while (1) {
	#print "menu={$menu} query={$query}\n";
	print "${CurTag}${menu} ($query) [$default] ";
	$cmd = &GetString;
	print "\n";

	if ($cmd =~ /^($pat)$/) { last;}
	if ($cmd =~ /^\s*$/) { $cmd = $default; last;}

	print "$CurTag   ***Warning!!! Please input one of ($query)\n";
    }    

    $cmd;
}


sub ShowMainMenu
{
    local(*config, *MAKE_FML) = @_;

    eval($local_config);
    print $@ if $@;

    if ($config{'ML_MEMBER_CHECK'}) {
	$ShowMenu{'auto_regist'} = "member_check";
    }
    else {
	$ShowMenu{'auto_regist'} = "auto_registation";
    }

    &MakeOptionShowMenu(*MAKE_FML);

    $MENU = qq#;
    ********************************************************************;
    Which entry do you change?;
    --------------------------------------------------------------------;
      ENTRY                                   Current Configuration
    --------------------------------------------------------------------;
    ;
    0 END;
    1 MEMBER CHECK or AUTO REGISTRATION        $ShowMenu{'auto_regist'};
    2 SUBJECT TYPE                             $MAKE_FML{'SUBJECT_TAG'};
    3 OPTIONAL SETTINGS(e.g. MIME, HTML)       $ShowMenu{'option_summary'};
    ;
    ;#;

    $MENU =~ s/;//g;

    print $MENU;
}


sub AutoRegistQuery
{
    local($ml, *config) = @_;
    local($r, *new);

    ### MENU;
    undef $MENU{'AUTO_REGIST_TYPE'};
    $MENU{'AUTO_REGIST_TYPE'} .= "\n";
    $MENU{'AUTO_REGIST_TYPE'} .= "Auto Registration Type\n";
    $MENU{'AUTO_REGIST_TYPE'} .= "0 default\n";
    $MENU{'AUTO_REGIST_TYPE'} .= "1 subject\n";
    $MENU{'AUTO_REGIST_TYPE'} .= "2 body\n";	
    $MENU{'AUTO_REGIST_TYPE'} .= "\n";
    $MENU{'AUTO_REGIST_TYPE'} =~ s/\n/\n$CurTag/g;
    ### END MENU;

    ### DEFAULT CONFIG; 
    $new{'ML_MEMBER_CHECK'}           = 0;
    $new{"REQUIRE_SUBSCRIBE"}         = "";
    $new{"REQUIRE_SUBSCRIBE_IN_BODY"} = "";
    push(@config, (sort keys %new));
    ### END CONFIG; 

    # MAIN;
    $r = &Query("Auto Registration ", "y/n", "y|n", "n");
    $new{'ML_MEMBER_CHECK'} = $r eq 'y' ? 0 : 1;

    if ($r eq "y") {
	print $MENU{'AUTO_REGIST_TYPE'};

	$r = &Query("Auto Registration Type ", "0,1,2 ", '0|1|2', "0");

	if ($r == 1) {
	    $new{"REQUIRE_SUBSCRIBE"}         = "subscribe";
	}
	elsif ($r == 2) {
	    $new{"REQUIRE_SUBSCRIBE"}         = "subscribe";
	    $new{"REQUIRE_SUBSCRIBE_IN_BODY"} = 1;
	}
    }

    # reset;
    for (keys %new) {
	undef $config{$_};
	$config{$_} = $new{$_};
    }
}


sub SubjectTagQuery
{
    local($ml, *MAKE_FML) = @_;
    local($r, $buf);

    undef $MAKE_FML{"SUBJECT_TAG"};
    $MENU{"SUBJECT_TAG"} .= "\n";
    $MENU{"SUBJECT_TAG"} .= "Subject TAG TYPE [0-6]:\n\n";
    $MENU{"SUBJECT_TAG"} .= "TYPE    Subject Example\n";
    $MENU{"SUBJECT_TAG"} .= "----------------------------\n";
    $MENU{"SUBJECT_TAG"} .= "0\tSubject: NO TAG (Default, Fml recommends)\n";
    $MENU{"SUBJECT_TAG"} .= "\n";
    $MENU{"SUBJECT_TAG"} .= "1\tSubject: (Elena:100)\n";
    $MENU{"SUBJECT_TAG"} .= "\n";
    $MENU{"SUBJECT_TAG"} .= "2\tSubject: [Elena:100]	(hml 1.6 compat)\n";
    $MENU{"SUBJECT_TAG"} .= "\n";
    $MENU{"SUBJECT_TAG"} .= "3\tSubject: (Elena 100)\n";
    $MENU{"SUBJECT_TAG"} .= "\n";
    $MENU{"SUBJECT_TAG"} .= "4\tSubject: [Elena 100]\n";
    $MENU{"SUBJECT_TAG"} .= "\n";
    $MENU{"SUBJECT_TAG"} .= "5\tSubject: [Elena,100]\n";
    $MENU{"SUBJECT_TAG"} .= "\n";
    $MENU{"SUBJECT_TAG"} .= "6\tSubject: (Elena,100)\n";
    $MENU{"SUBJECT_TAG"} .= "\n";

    $MENU{'SUBJECT_TAG'} =~ s/\n/\n$CurTag/g;

    print $MENU{'SUBJECT_TAG'};

    $r = &Query("Subject TAG TYPE ", "0-6", "[0-6]", "0");

    %tag = (1, "(:)",
	    2, "[:]",
	    3, "( )",
	    4, "[ ]",
	    5, "(,)",
	    6, "[,]");

    if ($r =~ /^[123456]$/) {
	$MAKE_FML{"SUBJECT_TAG"} =  "$tag{$r}";
    }
}


sub MakeOptionShowMenu
{
    local(*MAKE_FML) = @_;
    local($r, $buf);

    for (keys %MAKE_FML) {
	next unless /^OPT_/;
	next if $MAKE_FML{$_} != 1;

	$_ =~ s/OPT_//;
	$r .= $r ? ",$_" : $_;
    }

    $ShowMenu{'OPT_MIME'} = $MAKE_FML{'OPT_MIME'} == 1 ? "USE": "";
    $ShowMenu{'OPT_HTML'} = $MAKE_FML{'OPT_HTML'} == 1 ? "USE": "";

    $ShowMenu{'option_summary'} = $r;
}


sub ShowOptionMenu
{
    local(*MAKE_FML) = @_;

    &MakeOptionShowMenu(*MAKE_FML);
    
    $MENU{'OPTIONS'}  = "\n";
    $MENU{'OPTIONS'} .= "OPTIONS\n";
    $MENU{'OPTIONS'} .= "\n";
    $MENU{'OPTIONS'} .= "------------------------------------\n";
    $MENU{'OPTIONS'} .= "  ENTRY                Current Configuration\n";
    $MENU{'OPTIONS'} .= "------------------------------------\n";
    $MENU{'OPTIONS'} .= "0 END\n";
    $MENU{'OPTIONS'} .= "1 MIME                 $ShowMenu{'OPT_MIME'}\n";
    $MENU{'OPTIONS'} .= "2 HTML CONVERSION      $ShowMenu{'OPT_HTML'}\n";
    $MENU{'OPTIONS'}  =~ s/\n/\n$CurTag/g;

    print $MENU{'OPTIONS'};
}


sub OptionQuery
{
    local($ml, *MAKE_FML) = @_;
    local($r, $buf);

    ### MAIN ###
    while (1) {
	&ShowOptionMenu(*MAKE_FML);

	$tag = $CurTag;
	$CurTag .= "   ";
	$r = &Query("OPTIONS ", "1-2", "[1-2]", "0");

	$CurTag .= "   ";

	if ($r == 0) {
	    last;
	}
	elsif ($r == 1) {
	    $r = &Query("USE MIME", "y/n", "y|n", "n");
	    $MAKE_FML{"OPT_MIME"} = $r eq "y" ?  1 : 0;
	}
	elsif ($r == 2) {
	    $r = &Query("USE HTML", "y/n", "y|n", "n");
	    $MAKE_FML{"OPT_HTML"} = $r eq "y" ?  1 : 0;
	}

	$CurTag = $tag;
    }
}


sub ResetVariables
{
    # anyway set;
    &GetCurConfig;

    if ($COMPAT_ARCH eq "WINDOWS_NT4") {
	$USER = $ENV{'USERNAME'};
    }
    else {
	$USER = (getpwuid($<))[0];
    }

    $EXEC_DIR = $CurConfig{'EXEC_DIR'};
    $ML_DIR   = $CurConfig{'ML_DIR'};
    $DOMAIN   = $CurConfig{'DOMAIN'};
    $FQDN     = $CurConfig{'FQDN'};
    $GID      = &GetGID($CurConfig{'GROUP'});

    if ($CurConfig{'GROUP'} && !$GID) { 
	print "Group of ML operatos is not defined in /etc/group\n";
	print "Please define it in first!\n";
	exit 0;
    }

    if ($CurConfig{'PERSONAL_OR_GROUP'} =~ /^(group|fmlserv)$/) {
	$GroupWritable = $CurConfig{'PERSONAL_OR_GROUP'};
    }
    else {
	$GroupWritable = 0;	
    }

    $ML_ETC_DIR = "$ML_DIR/etc";

    # Mailing list name is all lower case;
    # $ml =~ tr/A-Z/a-z/;
    if ((! $NOT_CHECK_ML_EXIST) && $ml && (! -d "$ML_DIR/$ml")) {
	die("Cannot find $ml. you've not created it yet?\n");
    }
}


sub GenCrontab
{
    local($uid);

    print STDERR "\n";
    print STDERR "   Crontab for all ${USER}'s ML's is saved in\n";
    print STDERR "   $ML_ETC_DIR/crontab/$USER\n";

    open(TAB, "> $ML_ETC_DIR/crontab/$USER") || 
	(&Warn("cannot open $ML_ETC_DIR/crontab/$USER"), return);
    select(TAB); $| = 1; select(STDOUT);

    opendir(DIRD, $ML_DIR) || (&Warn("cannot open $ML_DIR"), return);
    for (readdir(DIRD)) {
	next if /^\./;

	$uid = (stat("$ML_DIR/$_/crontab"))[4];

	# if $uid == real-UID;
	if (($uid == $<) && -f "$ML_DIR/$_/crontab") {
	    if (open(CRONTAB, "$ML_DIR/$_/crontab") ) {
		while (<CRONTAB>) { print TAB $_;}
		close(CRAONTAB);
	    }
	}

    }
    closedir(DIRD);

    close(TAB);
}


sub Repl
{
    local($member, $file) = @_;

    open(F, $file)           || (&Warn("cannot open $file"), return 0);
    open(NEW, "> $file.new") || (&Warn("cannot open $file.new"), return 0);
    select(NEW); $| = 1; select(STDOUT);

    while (<F>) {
	/^$member/ && $found++;
	s/^\#\s*$member/\#\#BYE $member/i; # off;
	s/^$member/\#\#BYE $member/i;
	print NEW $_;
    }

    close(NEW);
    close(F);

    rename($file, "${file}.bak") || 
	(&Warn("cannot rename $file $file.bak"), return 0);
    rename("${file}.new", $file) ||
		(&Warn("cannot rename $file.new $file"), return 0);

    $found;
}


sub Mesg { print STDERR "$_[1]\n";}


sub Conv
{
    local($ml, $example, $out) = @_;
    local($uid, $gid);
    open(EXAMPLE, $example)  || &Log("cannot open $example");
    open(CF, "> $out")   || &Log("cannot open $out");
    select(CF); $| = 1; select(STDOUT);
    
    print STDERR "\tGenerating $out\n";

    if ($COMPAT_ARCH eq "WINDOWS_NT4") {
	$USER = $ENV{'USERNAME'};
    }
    else {
	$uid   = $uid || (getpwuid($<))[2];
	$gid   = $gid || (getpwuid($<))[3];
    }

    while (<EXAMPLE>) {
	s/_EXEC_DIR_/$EXEC_DIR/g;
	s/_ML_DIR_/$ML_DIR/g;
	s/_ML_/$ml/g;
	s/_DOMAIN_/$DOMAIN/g;
	s/_FQDN_/$FQDN/g;
	s/_USER_/$USER/g;
	s/_OPTIONS_/$opts/g;
	s/XXUID/$uid/g;
	s/XXGID/$gid/g;
	print CF $_;
    }

    close(EXAMPLE);
    close(CF);
}


sub Touch  { open(APPEND, ">> $_[0]"); close(APPEND);}

sub GetTime
{
    @WDay = ('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
    @Month = ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
	      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
    
    ($sec,$min,$hour,$mday,$mon,$year,$wday) = (localtime(time))[0..6];
    $Now = sprintf("%2d/%02d/%02d %02d:%02d:%02d", 
		   $year, $mon + 1, $mday, $hour, $min, $sec);
    $MailDate = sprintf("%s, %d %s %d %02d:%02d:%02d %s", 
			$WDay[$wday], $mday, $Month[$mon], 
			$year, $hour, $min, $sec, $TZone);

    # /usr/src/sendmail/src/envelop.c
    #     (void) sprintf(tbuf, "%04d%02d%02d%02d%02d", tm->tm_year + 1900,
    #                     tm->tm_mon+1, tm->tm_mday, tm->tm_hour, tm->tm_min);
    # 
    $CurrentTime = sprintf("%04d%02d%02d%02d%02d", 
			   1900 + $year, $mon + 1, $mday, $hour, $min);
}


sub FixIncludeHeader
{
    local($file, $include, @include, $INCDIR);

    $include =q#sys/types.h unistd.h#;
    @include = split(/\s+/, $include);
    $INCDIR  = '/usr/include';

    &ResetVariables;

    print STDERR "\tGenerating $ML_DIR/$ml/config.h\n";

    if (open(GUESS, "> $ML_DIR/$ml/config.h")) {
	foreach $file (@include) {
	    if ( -f "$INCDIR/$file" ) {
		print GUESS "\#include <$file>\n";
	    }
	    else {
		# print STDERR "Not Found $INCDIR/$file\n";
	    }
	}

	close(GUESS);
    }
}


#################################################################
sub do_help
{
    print "makefml:\n";
    print "   available commands\nt";
    print join("\n\t", (keys %MakeFmlProc));
    print "\n\n";
}


sub do_passwd
{
    local($ml, $member, $passwd) = @_;
    local($passwd_file);

    print "---Changing Passwd of Admin $member in $ml mailing list\n";

    &ResetVariables;

    # $ml/etc
    &MakeWritableDir("$ML_DIR/$ml/etc");

    $passwd_file= "$ML_DIR/$ml/etc/passwd";

    -f $passwd_file || &Touch($passwd_file);

    while (!$member || !$passwd) {
	if (! $member) {
	    print "Address: ";
	    chop($member = <STDIN>);
	}
	else {
	    print "Address: $member\n";
	}

	if (! $passwd) {
	    # no echo
	    system "stty", "-echo";

	    print "Password: ";
	    chop($passwd = <STDIN>);
	    print "\n";

	    system "stty", "echo";
	}

	if (!$member || !$passwd) {
	    &Warn("Error: Please input NOT NULL Address and Password.");
	}
    }

    require 'libcrypt.pl';
    $init = 1;	# if new-comer, initialize the passwd;

    print "\n";

    if (&ChangePasswd($passwd_file, $member, $passwd, $init)) {
	print "   Passwd Changed ($passwd_file).\n";
    }
    else {
	print "   Passwd Change Fails ($passwd_file).\n";
    }

}


sub do_init
{
    &ResetVariables;

    if (! -d $EXEC_DIR) {
	print "   mkdir $EXEC_DIR\n";
	mkdir($EXEC_DIR, 0755);		
    }

    if (! -d $ML_DIR) {
	print "   mkdir $ML_DIR\n";
	&MakeWritableDir($ML_DIR);
    }
}


sub do_info
{
    print STDERR "*" x 60; print STDERR "\n";
    print STDERR "makefml Usage:\n\n";

    printf STDERR "   makefml %-20s %s\n", "command arguments", "what";
    print STDERR "   ".("-"x57)."\n\n";

    for (sort {$a <=> $b} keys %MakeFmlProc) {
	next unless /^\d+\#/;
	$usage = $MakeFmlProc{$_};

	s/^(\d+\#)//;

	printf STDERR "   makefml %-20s %s\n", $_, $usage;
    }

    print STDERR "\n";
    print STDERR "*" x 60; print STDERR "\n";
    print STDERR "\n";
    print STDERR "HOW TO INSTALL:\n";
    print STDERR "Please input \"perl makefml install\" to INSTALL the fml\n";
    print STDERR "\n";
}


sub do_install
{
    local($cmd);

    # main proc -> here;
    &InitFmlConfig;
    &ExecCmd("init");

    $cmd = &Query("---Install the Fml system to $CurConfig{'EXEC_DIR'}.", 
		  "y/n", "y|n", "n");

    if ($cmd ne 'y') {
	print "STOP. (DO NOT INSTALLED)\n";
	return;
    }
    else {
	print "Installing ... to $Config'EXEC_DIR\n"; #';
    }

    &FixPath("src/fml.pl");
    &FixPath("src/msend.pl");
    &FixPath("libexec/fmlserv.pl");
    &FixPath("sbin/makefml");
    &FixPath("cf/config");

    &ResetVariables;

    # /var/spool/ml/etc/
    # etc can be group-writable for crontab/each-user
    if ($GroupWritable) {
	print STDERR "Group Writable\n" if $debug;
	print STDERR "mkdir $ML_ETC_DIR\n" if $debug;;
	&MakeWritableDir($ML_ETC_DIR);
    }
    else {
	print STDERR "Personal Use\n" if $debug;;
	print STDERR "mkdir $ML_ETC_DIR\n" if $debug;;
	&MakeWritableDir($ML_ETC_DIR);
    }

    # $EXEC_DIR/sbin/install.sh is NOT yet installed 
    if ($COMPAT_ARCH eq "WINDOWS_NT4") {
	print "perl sys/arch/WINDOWS_NT4/ntinstall.pl $EXEC_DIR\n";
	system "perl sys/arch/WINDOWS_NT4/ntinstall.pl $EXEC_DIR";
    }
    elsif (-f "sbin/install.sh") {
	$SH = $ENV{'SH'} || "/bin/sh";
	system "$SH ./sbin/install.sh $EXEC_DIR";
	eval symlink($CONFIG_DIR, "$EXEC_DIR/Configurations");
    }
    else {
	print "Please do \"makefml\" in the top directory of the source\n";
    }

    if ($GroupWritable eq 'fmlserv') {
	$cmd = &Query("Set up \"fmlserv\" system now? ", "y/n", "y|n", "n");
	if ($cmd eq 'y') { &ExecCmd("fmlserv");}
    }
}


sub do_setq
{
    #print STDERR "setq \$Config'$_[0] = '$_[1]';\n"  if $debug;;
    eval("\$Config'$_[0] = '$_[1]';");
    print "$@\n--@_\n" if $@;
}


sub GenerateDirectory
{
    local($ml) = @_;

    ### umask;
    $NOT_CHECK_ML_EXIST = 1;
    &ResetVariables;
    $NOT_CHECK_ML_EXIST = 0;

    ### mkdir ML Directory
    # group writable;
    # etc, etc/crontab can be group-writable for crontab/each-user
    if ($GroupWritable) {
	print STDERR "Group Writable\n"  if $debug;;
	print STDERR "mkdir etc crontab\n" if $debug;;
	&MakeWritableDir($ML_ETC_DIR);
	&MakeWritableDir("$ML_ETC_DIR/crontab");
    }
    else {
	print STDERR "Personal Use\n" if $debug;;
	print STDERR "mkdir etc crontab\n" if $debug;;
	&MakeWritableDir($ML_ETC_DIR);
	&MakeWritableDir("$ML_ETC_DIR/crontab");
    }

    # owner only read-write
    # umask(077);
    &MakeDir("$ML_DIR/$ml");
}


sub do_new { &do_newml(@_);}
sub do_newml
{
    local($ml) = @_;

    print "---Creating $ml mailing list\n";

    &GenerateDirectory($ml);
    &ResetVariables;

    ### cf file; 
    # &SetWritableUmask; &SetPublicUmask;
    &SetPersonalUmask;	# umask 077;

    #print STDERR "$EXEC_DIR/cf/__makefml -> $ML_DIR/$ml/cf\n";
    &Conv($ml, "$EXEC_DIR/cf/__makefml", "$ML_DIR/$ml/cf");

    if ($OS_TYPE && open(CF, ">> $ML_DIR/$ml/cf")) {
	$MAKE_FML{'NON_PORTABILITY'} = 1;
	$MAKE_FML{'OS_TYPE'} = $OS_TYPE;
	$MAKE_FML{'ML_NAME'} = $ML_NAME;
	&OutPutLocalConfig(*MAKE_FML);
	close(CF);
    }

    &ResetVariables;
    &SetPublicUmask;

    # include file is public readable;
    # why for () fails?;
    &Conv($ml, "$EXEC_DIR/etc/makefml/include", "$ML_DIR/$ml/include");
    &Conv($ml, "$EXEC_DIR/etc/makefml/aliases", "$ML_DIR/$ml/aliases");
    &Conv($ml, "$EXEC_DIR/etc/makefml/Makefile","$ML_DIR/$ml/Makefile");

    &SetPersonalUmask;	# umask 077;

    &Conv($ml, "$EXEC_DIR/etc/makefml/crontab", "$ML_DIR/$ml/crontab");
    &Conv($ml, "$EXEC_DIR/etc/makefml/fml.c",   "$ML_DIR/$ml/fml.c");
    &FixIncludeHeader;

    # doc/drafts -> help,deny,guide,objective
    &Copy("$EXEC_DIR/doc/drafts/help", "$ML_DIR/fmlserv/help");
    &Copy("$EXEC_DIR/doc/drafts/deny", "$ML_DIR/fmlserv/deny");
    &Copy("$EXEC_DIR/doc/drafts/guide", "$ML_DIR/fmlserv/guide");
    &Copy("$EXEC_DIR/doc/drafts/objective", "$ML_DIR/fmlserv/objective");

    # here backed to the writable bit == 077 or 007
    &SetWritableUmask;
    &SetPersonalUmask;	# umask 077;

    &GenCrontab;

    $exec  = "perl $EXEC_DIR/cf/config -m $EXEC_DIR/cf/MANIFEST ";
    $exec .= "$ML_DIR/$ml/cf";
    system "$exec > $ML_DIR/$ml/config.ph";

    # print message;
    # the last info
    print "\n   Please see several examples in $ML_DIR/$ml\n";
    print "\n# Example of Aliases ($ML_DIR/$ml/aliases)\n";
    &Cat("$ML_DIR/$ml/aliases");
    print "\n";
}


sub do_config
{
    local($ml) = @_;

    local($cf, $local_config, $config);
    local(@config, %config);

    print "---Configure $ml mailing list ... \n";

    &ResetVariables;

    $cf = "$ML_DIR/$ml/cf";

    # GET PRESENT CONFIG;
    # without LOCAL_CONFIG;
    open(CF, $cf) || die ("cannot find $cf");
    while (<CF>) {
	next if /^\#/;
	next if /^\s*$/;
	chop;

	if (1 .. /LOCAL_CONFIG/) {
	    next if /^LOCAL_CONFIG/;
	    ($key, $value) = split(/\s+/, $_, 2);
	    $config{$key} = $value;
	    push(@config, $key);
	}
	else {
	    next if /^LOCAL_CONFIG/;

	    if (/^\#__MAKEFML_LOCAL_CONFIG__/ .. 
		/^\#__END_OF_MAKEFML_LOCAL_CONFIG__/) {
		$local_config .= $_ if /\$MAKE_FML/;
	    }
	}
    }

    # set local_config -> %MAKE_FML;
    print "====\n";
    print $local_config;
    print "=======\n";
    eval($local_config);
    print $@ if $@;


    ### MAIN ###
    while (1) {
	$CurTag = "    ";

	&ShowMainMenu(*config, *MAKE_FML);

	#($menu, $query, $pat, $default)
	$r = &Query("Menu ", "number", "\\d+", "0");

	$CurTag = "\t";  

	if ($r == 0) {
	    last;
	}
	elsif ($r == 1) {
	    &AutoRegistQuery($ml, *config);
	}
	elsif ($r == 2) {
	    &SubjectTagQuery($ml, *MAKE_FML);
	}
	elsif ($r == 3) {
	    &OptionQuery($ml, *MAKE_FML);
	}
    }


    # set local_config -> %MAKE_FML;
    print $local_config;
    $eval = q%eval $local_config;%;
    eval($eval);
    print $@ if $@;


    if (open(CF, "> $cf")) {
	select(CF); $| = 1; select(STDOUT);

	for (@config) {
	    # printf    "%-25s\t%s\n", $_, $config{$_};
	    printf CF "%-25s\t%s\n", $_, $config{$_};
	}

	$MAKE_FML{'NON_PORTABILITY'} = 1;
	$MAKE_FML{'OS_TYPE'}         = $OS_TYPE;
	&OutPutLocalConfig(*MAKE_FML);

	close(CF);

	print "Saved in $cf\n";
    }

    # make ml/config.ph
    $exec = "perl $EXEC_DIR/cf/config $cf ";
    system "$exec > $ML_DIR/$ml/config.ph";
}


sub do_addadmin
{
    $AdminMode = 1;
    &do_adduser(@_);
    $AdminMode = 0;
}

sub do_byeadmin
{
    $AdminMode = 1;
    &do_byeuser(@_);
    $AdminMode = 0;
}

sub do_adduser
{
    local($ml, $member) = @_;
    local(@files);

    &SetWritableUmask;

    print "---Adding $member to $ml mailing list\n";

    if ($AdminMode) {
	@files = ("$ML_DIR/$ml/members-admin");
    }
    else {
	@files = ("$ML_DIR/$ml/members", "$ML_DIR/$ml/actives");
    }

    &ResetVariables;

    # mkdir ML Directory
    if (! -d "$ML_DIR/$ml") {
	print "\n*****Error: $ml ML NOT CREATED\n";
	print "   Firstly,please do \"perl makefml newml $ml\"!\n";
	return;
    }

    # add 
    for (@files) {
	print "Append $member to $_\n" if $debug;
	&AppendString2File($member, $_);
    }
}


sub do_byeuser
{
    local($ml, $member) = @_;
    local(@files);

    print "---Delete $member in $ml mailing list\n";

    &SetWritableUmask;

    if ($AdminMode) {
	@files = ("$ML_DIR/$ml/members-admin");
    }
    else {
	@files = ("$ML_DIR/$ml/members", "$ML_DIR/$ml/actives");
    }

    &ResetVariables;

    # mkdir ML Directory
    if (! -d "$ML_DIR/$ml") {
	print "***Error: $ml ML NOT CREATED\n";
	print "   Firstly,please do \"perl makefml newml $ml\"!\n";
	return;
    }

    # delete 
    for (@files) {
	if (&Repl($member, $_)) {
	    print "Delete $member in $_\n" if $debug;
	}
    }
}


sub do_fmlserv
{
    print "---Configure fmlserv mailing list ... \n";

    # special assigned ML;
    $ml = "fmlserv";

    &GenerateDirectory($ml);
    &ResetVariables;

    ### cf file; 
    &ResetVariables;

    &SetPublicUmask;

    # include file is public readable;
    # why for () fails?;
    local($exec_dir) = "$EXEC_DIR/etc/makefml";
    &Conv($ml, "$exec_dir/fmlserv-include", "$ML_DIR/$ml/include");
    &Conv($ml, "$exec_dir/fmlserv-aliases", "$ML_DIR/$ml/aliases");

    &SetPersonalUmask;
    &Conv($ml, "$exec_dir/fmlserv-fml.c",   "$ML_DIR/$ml/fml.c");
    &FixIncludeHeader;

    # fmlserv (uid != owner ) can read help
    ($GroupWritable eq 'fmlserv') ? umask(027) : umask(077);

    &Copy("$EXEC_DIR/doc/drafts/help-fmlserv", "$ML_DIR/fmlserv/help");

    # the last info
    print "\n   Please see several examples in $ML_DIR/$ml\n";
    print "\n# Example of Aliases ($ML_DIR/$ml/aliases)\n";
    &Cat("$ML_DIR/$ml/aliases");
    print "\n";
}


sub SetWritableUmask
{
    if ($GroupWritable eq 'fmlserv') {
	umask(007);
    }
    else {
	umask(077);	
    }
}

sub SetPersonalUmask
{
    umask(077);
}

sub SetPublicUmask
{
    umask(022);
}

sub GetGID
{
    open(GROUP, "/etc/group") || (&Log("cannot open /etc/group"), return '');
    while (<GROUP>) { /^$_[0]/ && (return (split(/:/, $_))[2]);}
    close(GROUP);

    "";
}

sub MakeWritableDir
{
    if ($GroupWritable) {	# for backup files
	-d $_[0] || mkdir($_[0], 0775);
	chown $<, $GID, $_[0] if $GID;
    }
    else {
	-d $_[0] || mkdir($_[0], 0755);
    }
}

sub MakeDir
{
    print "---MakeDir($_[0])\t(UID=$< GID=$GID)\n";

    if ($GroupWritable eq 'fmlserv') {	# for backup files
	-d $_[0] || mkdir($_[0], 0775);
	chown $<, $GID, $_[0] if $GID;
    }
    else {
	-d $_[0] || mkdir($_[0], 0755);
    }
}

#################################################################
package dumpvar;

sub main'Dumpvar 
{
    ($package, @vars) = @_;

    if ($] =~ /5\.\d\d\d/) { 
	*stab = *{"${package}::"};
    }
    else {
	(*stab) = eval("*_$package");
    }

    while (($key, $val) = each(%stab)) {
	{
	    next if @vars && !grep($key eq $_,@vars);
	    local(*entry) = $val;

	    if (defined $entry) {
		$buf .= "\$$key = '$entry';\n";
	    }

	    if (defined @entry) {
		$buf .= "\@$key = (\n";
		foreach $num ($[ .. $#entry) {
		    $buf .= "  $num\t'",$entry[$num],"'\n";
		}
		$buf .= ");\n";
	    }

	    if ((($] !~ /5\.\d\d\d/) && 
		 $key ne "_$package" && $key ne "_DB" && defined %entry
		 )
		||
		(($] =~ /5\.\d\d\d/) && 
		 $key ne "$package::" && $key ne "DB::" && 
		 (defined %entry) && 
		 ($dumpPackages || $key !~ /::$/)
		 && ($key !~ /^_</ || $dumpDBFiles)
		 && !($package eq "dumpvar" && $key eq "stab")
		 )
		) {

		$buf .= "\%$key = (\n";
		foreach $key (sort keys(%entry)) {
		    $buf .= "\t '$key', '$entry{$key}', \n";
		}
		$buf .= ");\n";
	    }
	}
    }

    return $buf;
}

# here is in "package dumpvar";

1;
